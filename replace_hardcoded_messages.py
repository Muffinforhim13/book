#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–º–µ–Ω—ã —Ö–∞—Ä–¥–∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ bot.py –Ω–∞ –≤—ã–∑–æ–≤—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import re
import sqlite3

# –ú–∞–ø–ø–∏–Ω–≥ —Ö–∞—Ä–¥–∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–ª—é—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
MESSAGE_MAPPING = {
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –≤—Ä—É—á–Ω—É—é.": "phone_request",
    "–ü–æ–¥–µ–ª–∏—Å—å, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç üíå –ù–∞–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ–±—ã –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –ª–∏—á–Ω–æ": "ask_name",
    "–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.": "registration_success",
    
    # Email
    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.": "email_invalid",
    "‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–π –ø–µ—Å–Ω–∏.": "email_saved",
    "‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–Ω–∏–≥–∏.": "email_saved",
    
    # –û—à–∏–±–∫–∏
    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.": "error_questions",
    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.": "error_email",
    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.": "error_general",
    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.": "error_order_creation",
    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.": "error_save_data",
    
    # –ö–Ω–∏–≥–∞
    "–ù–∞–ø–∏—à–∏ –ø–æ –∫–∞–∫–æ–º—É –ø–æ–≤–æ–¥—É –º—ã —Å–æ–∑–¥–∞—ë–º –∫–Ω–∏–≥—É üìî\n–ò–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –±–µ–∑ –ø–æ–≤–æ–¥–∞?": "book_gift_reason",
    "–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ —Ç–≤–æ–µ —Ñ–æ—Ç–æ, –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–∞ –Ω—ë–º —Ö–æ—Ä–æ—à–æ –±—ã–ª–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ.\n–¢–∞–∫ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–∏—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–µ–π üíØ": "book_photo_request",
    
    # –ü–µ—Å–Ω—è
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –ø–æ –∫–∞–∫–æ–º—É –ø–æ–≤–æ–¥—É –º—ã —Å–æ–∑–¥–∞—ë–º –ø–µ—Å–Ω—éüé∂\n–ò–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –±–µ–∑ –ø–æ–≤–æ–¥–∞? –ê –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.": "song_gift_reason",
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    "üëã –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞?": "welcome_ready",
}

def check_message_exists(message_key: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect('bookai.db')
        cursor = conn.cursor()
        cursor.execute('SELECT COUNT(*) FROM bot_messages WHERE message_key = ?', (message_key,))
        count = cursor.fetchone()[0]
        conn.close()
        return count > 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è {message_key}: {e}")
        return False

def replace_hardcoded_messages():
    """–ó–∞–º–µ–Ω—è–µ—Ç —Ö–∞—Ä–¥–∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –≤—ã–∑–æ–≤—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª bot.py
    with open('bot.py', 'r', encoding='utf-8') as f:
        content = f.read()
    
    original_content = content
    replacements_made = 0
    
    # –ó–∞–º–µ–Ω—è–µ–º –∫–∞–∂–¥–æ–µ —Ö–∞—Ä–¥–∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ
    for hardcoded_text, message_key in MESSAGE_MAPPING.items():
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è regex
        escaped_text = re.escape(hardcoded_text)
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ await message.answer("—Ç–µ–∫—Å—Ç")
        pattern = rf'await\s+message\.answer\(\s*["\']({escaped_text})["\']\s*([^)]*)\)'
        
        # –ó–∞–º–µ–Ω–∞ –Ω–∞ –≤—ã–∑–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        replacement = f'await message.answer(await get_message_content("{message_key}", "{hardcoded_text}"), \\2)'
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—É
        new_content = re.sub(pattern, replacement, content, flags=re.MULTILINE | re.DOTALL)
        
        if new_content != content:
            print(f"‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ: {message_key}")
            print(f"   –¢–µ–∫—Å—Ç: {hardcoded_text[:50]}...")
            replacements_made += 1
            content = new_content
    
    # –¢–∞–∫–∂–µ –∑–∞–º–µ–Ω—è–µ–º await callback.answer() —Å–æ–æ–±—â–µ–Ω–∏—è
    callback_messages = {
        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.": "error_general",
    }
    
    for hardcoded_text, message_key in callback_messages.items():
        escaped_text = re.escape(hardcoded_text)
        pattern = rf'await\s+callback\.answer\(\s*["\']({escaped_text})["\']\s*\)'
        replacement = f'await callback.answer(await get_message_content("{message_key}", "{hardcoded_text}"))'
        
        new_content = re.sub(pattern, replacement, content, flags=re.MULTILINE | re.DOTALL)
        
        if new_content != content:
            print(f"‚úÖ –ó–∞–º–µ–Ω–µ–Ω–æ callback: {message_key}")
            replacements_made += 1
            content = new_content
    
    # –ï—Å–ª–∏ –±—ã–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    if content != original_content:
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        with open('bot.py.backup', 'w', encoding='utf-8') as f:
            f.write(original_content)
        print(f"\nüìÅ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: bot.py.backup")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open('bot.py', 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"\nüéâ –ó–∞–º–µ–Ω–µ–Ω–æ {replacements_made} —Ö–∞—Ä–¥–∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π!")
        print("üìù –§–∞–π–ª bot.py –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç get_message_content –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'from bot_messages_cache import get_message_content' not in content:
            print("\n‚ö†Ô∏è  –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç:")
            print("from bot_messages_cache import get_message_content")
    else:
        print("‚ÑπÔ∏è  –•–∞—Ä–¥–∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É–∂–µ –∑–∞–º–µ–Ω–µ–Ω—ã")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîÑ –ó–∞–º–µ–Ω–∞ —Ö–∞—Ä–¥–∫–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –≤—ã–∑–æ–≤—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    missing_messages = []
    
    for hardcoded_text, message_key in MESSAGE_MAPPING.items():
        exists = check_message_exists(message_key)
        if not exists:
            missing_messages.append(message_key)
            print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {message_key}")
        else:
            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {message_key}")
    
    if missing_messages:
        print(f"\n‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(missing_messages)} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –∑–∞–º–µ–Ω–æ–π")
        
        response = input("\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∑–∞–º–µ–Ω—É? (y/N): ")
        if response.lower() != 'y':
            print("–û—Ç–º–µ–Ω–µ–Ω–æ")
            return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—É
    print(f"\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–º–µ–Ω—É...")
    replace_hardcoded_messages()
    
    print(f"\n‚úÖ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
    print("üí° –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω–∫–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!")

if __name__ == "__main__":
    main()
