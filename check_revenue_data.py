#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã—Ä—É—á–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import aiosqlite
import json
from datetime import datetime, timedelta

DB_PATH = 'bookai.db'

async def check_revenue_data():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤—ã—Ä—É—á–∫–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã—Ä—É—á–∫–µ...")
    
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å total_amount
        async with db.execute('''
            SELECT id, status, total_amount, order_data, created_at
            FROM orders 
            WHERE total_amount IS NOT NULL AND total_amount > 0
            ORDER BY created_at DESC
        ''') as cursor:
            orders = await cursor.fetchall()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ —Å total_amount > 0")
        
        total_revenue = 0
        for order in orders:
            order_id, status, total_amount, order_data_str, created_at = order
            total_revenue += total_amount
            
            # –ü–∞—Ä—Å–∏–º order_data –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
            product_type = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            if order_data_str:
                try:
                    order_data = json.loads(order_data_str)
                    product_type = order_data.get('product', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                except:
                    pass
            
            print(f"  - –ó–∞–∫–∞–∑ {order_id}: {status}, {total_amount}‚ÇΩ, {product_type}, {created_at}")
        
        print(f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue}‚ÇΩ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑—ã –±–µ–∑ total_amount
        async with db.execute('''
            SELECT id, status, order_data, created_at
            FROM orders 
            WHERE (total_amount IS NULL OR total_amount = 0)
            AND status IN ('paid', 'upsell_paid', 'waiting_draft', 'draft_sent', 'editing', 'ready', 'delivered', 'completed')
            ORDER BY created_at DESC
        ''') as cursor:
            orders_without_amount = await cursor.fetchall()
        
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {len(orders_without_amount)} –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ total_amount:")
        for order in orders_without_amount:
            order_id, status, order_data_str, created_at = order
            print(f"  - –ó–∞–∫–∞–∑ {order_id}: {status}, {created_at}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏
        async with db.execute('''
            SELECT order_id, amount, status, created_at
            FROM payments 
            WHERE status = 'succeeded'
            ORDER BY created_at DESC
        ''') as cursor:
            payments = await cursor.fetchall()
        
        print(f"üí≥ –ù–∞–π–¥–µ–Ω–æ {len(payments)} —É—Å–ø–µ—à–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π:")
        for payment in payments:
            order_id, amount, status, created_at = payment
            print(f"  - –ó–∞–∫–∞–∑ {order_id}: {amount}‚ÇΩ, {status}, {created_at}")

async def fix_missing_amounts():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ total_amount –∏–∑ –ø–ª–∞—Ç–µ–∂–µ–π"""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ total_amount...")
    
    async with aiosqlite.connect(DB_PATH) as db:
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã –±–µ–∑ total_amount, –Ω–æ —Å —É—Å–ø–µ—à–Ω—ã–º–∏ –ø–ª–∞—Ç–µ–∂–∞–º–∏
        async with db.execute('''
            SELECT o.id, o.status, p.amount, p.created_at
            FROM orders o
            JOIN payments p ON o.id = p.order_id
            WHERE (o.total_amount IS NULL OR o.total_amount = 0)
            AND o.status IN ('paid', 'upsell_paid', 'waiting_draft', 'draft_sent', 'editing', 'ready', 'delivered', 'completed')
            AND p.status = 'succeeded'
            ORDER BY o.id
        ''') as cursor:
            orders_to_fix = await cursor.fetchall()
        
        print(f"üîß –ù–∞–π–¥–µ–Ω–æ {len(orders_to_fix)} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        
        fixed_count = 0
        for order_id, status, amount, created_at in orders_to_fix:
            try:
                await db.execute('''
                    UPDATE orders 
                    SET total_amount = ?, updated_at = datetime('now')
                    WHERE id = ?
                ''', (amount, order_id))
                print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–∫–∞–∑ {order_id}: {amount}‚ÇΩ")
                fixed_count += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        
        await db.commit()
        print(f"‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {fixed_count} –∑–∞–∫–∞–∑–æ–≤")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –≤—ã—Ä—É—á–∫–µ")
    print("=" * 50)
    
    await check_revenue_data()
    print("\n" + "=" * 50)
    
    await fix_missing_amounts()
    print("\n" + "=" * 50)
    
    print("üîç –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π:")
    await check_revenue_data()

if __name__ == "__main__":
    asyncio.run(main())
