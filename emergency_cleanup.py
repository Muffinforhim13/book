#!/usr/bin/env python3
"""
–≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ß–ò–°–¢–ö–ê: –£–¥–∞–ª—è–µ–º –í–°–ï –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–∑ delayed_messages
"""

import asyncio
import aiosqlite

DB_PATH = 'bookai.db'

async def emergency_cleanup():
    """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
    print("üö® –≠–ö–°–¢–†–ï–ù–ù–ê–Ø –ß–ò–°–¢–ö–ê –î–£–ë–õ–ò–ö–ê–¢–û–í")
    print("=" * 50)
    
    async with aiosqlite.connect(DB_PATH) as db:
        # 1. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å
        cursor = await db.execute("SELECT COUNT(*) FROM delayed_messages WHERE is_automatic = 1")
        auto_count = await cursor.fetchone()
        
        cursor = await db.execute("SELECT COUNT(DISTINCT message_type) FROM delayed_messages WHERE is_automatic = 1")
        unique_types = await cursor.fetchone()
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {auto_count[0]}")
        print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤: {unique_types[0]}")
        
        # 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        cursor = await db.execute("""
            SELECT message_type, COUNT(*) as count
            FROM delayed_messages 
            WHERE is_automatic = 1
            GROUP BY message_type
            HAVING COUNT(*) > 1
            ORDER BY count DESC
            LIMIT 5
        """)
        duplicates = await cursor.fetchall()
        
        print(f"\nüî• –¢–æ–ø-5 –¥—É–±–ª–∏–∫–∞—Ç–æ–≤:")
        for dup in duplicates:
            print(f"   {dup[0]}: {dup[1]} –∫–æ–ø–∏–π")
        
        # 3. –£–î–ê–õ–Ø–ï–ú –í–°–ï –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ delayed_messages
        print(f"\nüóëÔ∏è –£–¥–∞–ª—è–µ–º –í–°–ï –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ delayed_messages...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ù–ï –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor = await db.execute("SELECT COUNT(*) FROM delayed_messages WHERE is_automatic != 1 OR is_automatic IS NULL")
        manual_count = await cursor.fetchone()
        print(f"   –û—Å—Ç–∞–≤–ª—è–µ–º —Ä—É—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {manual_count[0]}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ
        result = await db.execute("DELETE FROM delayed_messages WHERE is_automatic = 1")
        deleted_count = result.rowcount
        
        await db.commit()
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π: {deleted_count}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å
        cursor = await db.execute("SELECT COUNT(*) FROM delayed_messages")
        remaining = await cursor.fetchone()
        
        cursor = await db.execute("SELECT COUNT(*) FROM message_templates")
        templates = await cursor.fetchone()
        
        print(f"\nüìã –ò—Ç–æ–≥–æ:")
        print(f"   –í delayed_messages –æ—Å—Ç–∞–ª–æ—Å—å: {remaining[0]} –∑–∞–ø–∏—Å–µ–π")
        print(f"   –í message_templates: {templates[0]} —à–∞–±–ª–æ–Ω–æ–≤")
        print(f"   –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {deleted_count}")
        
        # 5. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤ delayed_messages
        if remaining[0] > 0:
            print(f"\nüìù –ß—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å –≤ delayed_messages:")
            cursor = await db.execute("""
                SELECT id, message_type, is_automatic, order_id
                FROM delayed_messages 
                ORDER BY id 
                LIMIT 10
            """)
            remaining_msgs = await cursor.fetchall()
            
            for msg in remaining_msgs:
                print(f"   ID {msg[0]}: {msg[1]} (auto: {msg[2]}, order: {msg[3]})")

async def main():
    try:
        await emergency_cleanup()
        print(f"\nüéâ –ì–û–¢–û–í–û! –¢–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        print(f"üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–¥–º–∏–Ω–∫–∏ (Ctrl+F5)")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        print(traceback.format_exc())

if __name__ == "__main__":
    asyncio.run(main())
