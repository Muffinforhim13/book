#!/usr/bin/env python3
"""
–ü–µ—Ä–µ–Ω–æ—Å —Ñ–∞–π–ª–æ–≤ –∏–∑ delayed_message_files –≤ message_template_files
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from db import DB_PATH
import aiosqlite

async def migrate_files_to_templates():
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ñ–∞–π–ª—ã –∏–∑ delayed_message_files –≤ message_template_files"""
    
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Ñ–∞–π–ª–æ–≤...")
    
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ delayed_message_files —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        cursor = await db.execute('''
            SELECT dmf.*, dm.message_type, dm.content, dm.status as message_status
            FROM delayed_message_files dmf
            JOIN delayed_messages dm ON dmf.delayed_message_id = dm.id
            WHERE dm.status = 'pending'
        ''')
        files_to_migrate = await cursor.fetchall()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(files_to_migrate)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞")
        
        migrated_count = 0
        skipped_count = 0
        
        for file_row in files_to_migrate:
            message_type = file_row['message_type']
            content = file_row['content']
            
            print(f"\nüîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª: {file_row['file_name']} (—Ç–∏–ø: {message_type})")
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω –≤ message_templates
            cursor = await db.execute('''
                SELECT id FROM message_templates 
                WHERE message_type = ? AND content = ? AND is_active = 1
            ''', (message_type, content))
            template = await cursor.fetchone()
            
            if template:
                template_id = template['id']
                print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω —à–∞–±–ª–æ–Ω ID: {template_id}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ message_template_files
                cursor = await db.execute('''
                    SELECT id FROM message_template_files 
                    WHERE template_id = ? AND file_name = ? AND file_path = ?
                ''', (template_id, file_row['file_name'], file_row['file_path']))
                existing = await cursor.fetchone()
                
                if existing:
                    print(f"  ‚ö†Ô∏è –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ message_template_files, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    skipped_count += 1
                else:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ message_template_files
                    await db.execute('''
                        INSERT INTO message_template_files 
                        (template_id, file_path, file_type, file_name, file_size, created_at)
                        VALUES (?, ?, ?, ?, ?, ?)
                    ''', (
                        template_id,
                        file_row['file_path'],
                        file_row['file_type'],
                        file_row['file_name'],
                        file_row['file_size'],
                        file_row['created_at']
                    ))
                    print(f"  ‚úÖ –§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ message_template_files")
                    migrated_count += 1
            else:
                print(f"  ‚ùå –®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è message_type: {message_type}")
                print(f"     –ö–æ–Ω—Ç–µ–Ω—Ç: {content[:50]}...")
                skipped_count += 1
        
        await db.commit()
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–Ω–æ—Å–∞:")
        print(f"  ‚úÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {migrated_count}")
        print(f"  ‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
        print(f"  üìÅ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(files_to_migrate)}")

if __name__ == "__main__":
    asyncio.run(migrate_files_to_templates())
