#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–∞–∑–∞–º
"""

import asyncio
import aiosqlite
from db import DB_PATH

async def cleanup_orphaned_pages():
    """
    –£–¥–∞–ª—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–∞–∑–∞–º
    """
    print("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–∞–∑–∞–º...")
    
    async with aiosqlite.connect(DB_PATH) as db:
        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–∞–∑–∞–º
        cursor = await db.execute('''
            SELECT op.id, op.order_id, op.page_number, op.filename, op.description, op.created_at
            FROM order_pages op
            LEFT JOIN orders o ON op.order_id = o.id
            WHERE o.id IS NULL
        ''')
        
        orphaned_pages = await cursor.fetchall()
        
        if not orphaned_pages:
            print("‚úÖ –í–∏—Å—è—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(orphaned_pages)} –≤–∏—Å—è—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü:")
        
        for page in orphaned_pages:
            print(f"  - ID: {page[0]}, Order ID: {page[1]}, Page: {page[2]}, File: {page[3]}, Desc: {page[4]}, Date: {page[5]}")
        
        # –£–¥–∞–ª—è–µ–º –≤–∏—Å—è—â–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        cursor = await db.execute('''
            DELETE FROM order_pages
            WHERE id IN (
                SELECT op.id
                FROM order_pages op
                LEFT JOIN orders o ON op.order_id = o.id
                WHERE o.id IS NULL
            )
        ''')
        
        deleted_count = cursor.rowcount
        await db.commit()
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –≤–∏—Å—è—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü")

async def show_pages_stats():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    """
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º:")
    
    async with aiosqlite.connect(DB_PATH) as db:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        cursor = await db.execute('SELECT COUNT(*) FROM order_pages')
        total_pages = (await cursor.fetchone())[0]
        print(f"  –í—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {total_pages}")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
        cursor = await db.execute('''
            SELECT COUNT(*)
            FROM order_pages op
            INNER JOIN orders o ON op.order_id = o.id
        ''')
        valid_pages = (await cursor.fetchone())[0]
        print(f"  –°—Ç—Ä–∞–Ω–∏—Ü —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏: {valid_pages}")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Å—è—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        cursor = await db.execute('''
            SELECT COUNT(*)
            FROM order_pages op
            LEFT JOIN orders o ON op.order_id = o.id
            WHERE o.id IS NULL
        ''')
        orphaned_pages = (await cursor.fetchone())[0]
        print(f"  –í–∏—Å—è—â–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü: {orphaned_pages}")

if __name__ == "__main__":
    async def main():
        await show_pages_stats()
        await cleanup_orphaned_pages()
        await show_pages_stats()
        print("\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    asyncio.run(main())
