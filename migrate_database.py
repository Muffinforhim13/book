#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª–µ–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —à–∞–±–ª–æ–Ω–æ–≤
"""

import asyncio
import aiosqlite

DB_PATH = 'bookai.db'

async def migrate_database():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É delayed_messages"""
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cursor = await db.execute("PRAGMA table_info(delayed_messages)")
        columns = await cursor.fetchall()
        existing_columns = [col[1] for col in columns]
        
        print(f"üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {existing_columns}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        new_fields = [
            ('is_active', 'BOOLEAN DEFAULT 1'),
            ('usage_count', 'INTEGER DEFAULT 0'),
            ('last_used', 'DATETIME')
        ]
        
        for field_name, field_type in new_fields:
            if field_name not in existing_columns:
                try:
                    await db.execute(f'ALTER TABLE delayed_messages ADD COLUMN {field_name} {field_type}')
                    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {field_name}")
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–æ–Ω–∫–∏ {field_name}: {e}")
            else:
                print(f"‚è≠Ô∏è –ö–æ–ª–æ–Ω–∫–∞ {field_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        await db.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        cursor = await db.execute("PRAGMA table_info(delayed_messages)")
        columns = await cursor.fetchall()
        final_columns = [col[1] for col in columns]
        
        print(f"\nüìã –§–∏–Ω–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: {final_columns}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è is_active = 1 –¥–ª—è –≤—Å–µ—Ö
        cursor = await db.execute('UPDATE delayed_messages SET is_active = 1 WHERE is_active IS NULL')
        updated_rows = cursor.rowcount
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_rows} –∑–∞–ø–∏—Å–µ–π (—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω is_active = 1)")
        
        await db.commit()
        
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

async def show_migration_status():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("\nüìä –°—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–∏:")
    print("=" * 50)
    
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        cursor = await db.execute('SELECT COUNT(*) FROM delayed_messages')
        total_count = (await cursor.fetchone())[0]
        
        cursor = await db.execute('SELECT COUNT(*) FROM delayed_messages WHERE order_id IS NULL')
        template_count = (await cursor.fetchone())[0]
        
        cursor = await db.execute('SELECT COUNT(*) FROM delayed_messages WHERE is_active = 1')
        active_count = (await cursor.fetchone())[0]
        
        print(f"üìù –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ delayed_messages: {total_count}")
        print(f"üìã –®–∞–±–ª–æ–Ω–æ–≤ (order_id IS NULL): {template_count}")
        print(f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {active_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤
        if template_count > 0:
            print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã —à–∞–±–ª–æ–Ω–æ–≤:")
            cursor = await db.execute('''
                SELECT message_type, is_active, usage_count, last_used
                FROM delayed_messages 
                WHERE order_id IS NULL
                LIMIT 5
            ''')
            templates = await cursor.fetchall()
            
            for template in templates:
                status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if template[1] else "‚ö´ –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                usage = f"üìä {template[2]} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π" if template[2] > 0 else "üìä –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è"
                last_used = f"üïí {template[3]}" if template[3] else "üïí –ù–∏–∫–æ–≥–¥–∞"
                print(f"   {template[0]} - {status} | {usage} | {last_used}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —à–∞–±–ª–æ–Ω–æ–≤")
    print("=" * 60)
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        await migrate_database()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
        await show_migration_status()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    exit(exit_code)
