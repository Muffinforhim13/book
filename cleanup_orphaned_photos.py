#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
"""

import asyncio
import aiosqlite
import os

DB_PATH = 'bookai.db'

async def cleanup_orphaned_photos():
    """–£–¥–∞–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏"""
    async with aiosqlite.connect(DB_PATH) as db:
        print("üßπ –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤...")
        
        # –ù–∞—Ö–æ–¥–∏–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
        async with db.execute('''
            SELECT u.id, u.filename, u.file_type, u.order_id
            FROM uploads u
            LEFT JOIN orders o ON u.order_id = o.id
            WHERE u.order_id IS NOT NULL AND o.id IS NULL
        ''') as cursor:
            orphaned_photos = await cursor.fetchall()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(orphaned_photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤")
        
        if orphaned_photos:
            deleted_count = 0
            for photo_id, filename, file_type, order_id in orphaned_photos:
                print(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º: {filename} (–∑–∞–∫–∞–∑ {order_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Ñ–∏–∑–∏—á–µ—Å–∫–∏
                file_path = os.path.join('uploads', filename)
                if os.path.exists(file_path):
                    try:
                        os.remove(file_path)
                        print(f"   ‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω: {filename}")
                    except Exception as e:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
                else:
                    print(f"   ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {filename}")
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
                await db.execute('DELETE FROM uploads WHERE id = ?', (photo_id,))
                deleted_count += 1
            
            await db.commit()
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤")
        else:
            print("‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –¥—Ä—É–≥–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
        tables_to_check = ['main_hero_photos', 'hero_photos', 'joint_photos']
        
        for table in tables_to_check:
            print(f"\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É {table}...")
            async with db.execute(f'''
                SELECT p.id, p.filename, p.order_id
                FROM {table} p
                LEFT JOIN orders o ON p.order_id = o.id
                WHERE p.order_id IS NOT NULL AND o.id IS NULL
            ''') as cursor:
                orphaned = await cursor.fetchall()
            
            if orphaned:
                print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(orphaned)} –∑–∞–ø–∏—Å–µ–π –≤ {table} –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤")
                for record_id, filename, order_id in orphaned:
                    print(f"üóëÔ∏è  –£–¥–∞–ª—è–µ–º: {filename} (–∑–∞–∫–∞–∑ {order_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)")
                    await db.execute(f'DELETE FROM {table} WHERE id = ?', (record_id,))
                await db.commit()
            else:
                print(f"‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ {table} –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ—Ç –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤")

async def main():
    await cleanup_orphaned_photos()

if __name__ == "__main__":
    asyncio.run(main())
