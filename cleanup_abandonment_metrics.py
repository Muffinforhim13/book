#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –º–µ—Ç—Ä–∏–∫ –æ—Ç–≤–∞–ª–æ–≤ –ø–æ —ç—Ç–∞–ø–∞–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã event_metrics
"""

import asyncio
import aiosqlite
from db import DB_PATH

async def cleanup_abandonment_metrics():
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç–≤–∞–ª–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã event_metrics"""
    async with aiosqlite.connect(DB_PATH) as db:
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫ –æ—Ç–≤–∞–ª–æ–≤ –ø–æ —ç—Ç–∞–ø–∞–º...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ event_metrics
        async with db.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='event_metrics'
        """) as cursor:
            table_exists = await cursor.fetchone()
        
        if not table_exists:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ event_metrics –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–æ –æ—á–∏—Å—Ç–∫–∏
        async with db.execute("""
            SELECT 
                event_type,
                COUNT(*) as count
            FROM event_metrics 
            GROUP BY event_type
            ORDER BY count DESC
        """) as cursor:
            before_stats = await cursor.fetchall()
        
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –î–û –æ—á–∏—Å—Ç–∫–∏:")
        for event_type, count in before_stats:
            print(f"  {event_type}: {count} —Å–æ–±—ã—Ç–∏–π")
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–≤–∞–ª–æ–≤
        async with db.execute("""
            DELETE FROM event_metrics 
            WHERE event_type IN ('step_abandoned', 'demo_abandoned_book')
        """) as cursor:
            deleted_count = cursor.rowcount
        
        await db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        async with db.execute("""
            SELECT 
                event_type,
                COUNT(*) as count
            FROM event_metrics 
            GROUP BY event_type
            ORDER BY count DESC
        """) as cursor:
            after_stats = await cursor.fetchall()
        
        print(f"\n‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–±—ã—Ç–∏–π –æ—Ç–≤–∞–ª–æ–≤")
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–û–°–õ–ï –æ—á–∏—Å—Ç–∫–∏:")
        for event_type, count in after_stats:
            print(f"  {event_type}: {count} —Å–æ–±—ã—Ç–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–∞–ª—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–µ–Ω—ã
        async with db.execute("""
            SELECT COUNT(*) FROM event_metrics 
            WHERE event_type IN ('step_abandoned', 'demo_abandoned_book')
        """) as cursor:
            remaining_abandonments = (await cursor.fetchone())[0]
        
        if remaining_abandonments == 0:
            print("\nüéâ –í—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç–≤–∞–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã!")
        else:
            print(f"\n‚ö†Ô∏è –û—Å—Ç–∞–ª–æ—Å—å {remaining_abandonments} —Å–æ–±—ã—Ç–∏–π –æ—Ç–≤–∞–ª–æ–≤")

async def show_abandonment_metrics():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç–≤–∞–ª–æ–≤"""
    async with aiosqlite.connect(DB_PATH) as db:
        print("üìä –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç–≤–∞–ª–æ–≤:")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
        async with db.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='event_metrics'
        """) as cursor:
            table_exists = await cursor.fetchone()
        
        if not table_exists:
            print("‚ùå –¢–∞–±–ª–∏—Ü–∞ event_metrics –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–∞–ª—ã –ø–æ —ç—Ç–∞–ø–∞–º
        async with db.execute("""
            SELECT 
                step_name,
                COUNT(*) as abandonment_count,
                COUNT(DISTINCT user_id) as unique_users
            FROM event_metrics 
            WHERE event_type = 'step_abandoned'
            GROUP BY step_name
            ORDER BY abandonment_count DESC
        """) as cursor:
            abandonment_data = await cursor.fetchall()
        
        if abandonment_data:
            print("\nüìà –û—Ç–≤–∞–ª—ã –ø–æ —ç—Ç–∞–ø–∞–º:")
            for step_name, count, unique_users in abandonment_data:
                print(f"  {step_name}: {count} –æ—Ç–≤–∞–ª–æ–≤ ({unique_users} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
        else:
            print("‚úÖ –°–æ–±—ã—Ç–∏–π –æ—Ç–≤–∞–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ –æ—Ç–≤–∞–ª—ã –¥–ª—è –∫–Ω–∏–≥
        async with db.execute("""
            SELECT 
                COUNT(*) as demo_abandoned_count,
                COUNT(DISTINCT user_id) as demo_abandoned_unique_users
            FROM event_metrics 
            WHERE event_type = 'demo_abandoned_book'
        """) as cursor:
            demo_result = await cursor.fetchone()
            demo_count, demo_unique = demo_result if demo_result else (0, 0)
        
        if demo_count > 0:
            print(f"\nüìö –î–µ–º–æ –æ—Ç–≤–∞–ª—ã –¥–ª—è –∫–Ω–∏–≥: {demo_count} –æ—Ç–≤–∞–ª–æ–≤ ({demo_unique} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")
        else:
            print("\nüìö –î–µ–º–æ –æ—Ç–≤–∞–ª—ã –¥–ª—è –∫–Ω–∏–≥: 0")

async def main():
    print("üßπ –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ –º–µ—Ç—Ä–∏–∫ –æ—Ç–≤–∞–ª–æ–≤ –ø–æ —ç—Ç–∞–ø–∞–º")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    await show_abandonment_metrics()
    
    print("\n" + "=" * 50)
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –í–°–ï –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç–≤–∞–ª–æ–≤!")
    print("   –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!")
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
    print("\nüîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
    await cleanup_abandonment_metrics()
    
    print("\nüéâ –û—á–∏—Å—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫ –æ—Ç–≤–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

if __name__ == "__main__":
    asyncio.run(main())
