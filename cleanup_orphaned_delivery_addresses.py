#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–∞–∑–∞–º
"""

import asyncio
import aiosqlite
from db import DB_PATH

async def cleanup_orphaned_delivery_addresses():
    """
    –£–¥–∞–ª—è–µ—Ç –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–∞–∑–∞–º
    """
    print("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∞–¥—Ä–µ—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã—Ö –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–∞–∑–∞–º...")
    
    async with aiosqlite.connect(DB_PATH) as db:
        # –ù–∞—Ö–æ–¥–∏–º –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–µ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–∞–∑–∞–º
        cursor = await db.execute('''
            SELECT da.id, da.order_id, da.address, da.recipient_name, da.created_at
            FROM delivery_addresses da
            LEFT JOIN orders o ON da.order_id = o.id
            WHERE o.id IS NULL
        ''')
        
        orphaned_addresses = await cursor.fetchall()
        
        if not orphaned_addresses:
            print("‚úÖ –í–∏—Å—è—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(orphaned_addresses)} –≤–∏—Å—è—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏:")
        
        for addr in orphaned_addresses:
            print(f"  - ID: {addr[0]}, Order ID: {addr[1]}, –ê–¥—Ä–µ—Å: {addr[2]}, –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {addr[3]}, –î–∞—Ç–∞: {addr[4]}")
        
        # –£–¥–∞–ª—è–µ–º –≤–∏—Å—è—â–∏–µ –∞–¥—Ä–µ—Å–∞
        cursor = await db.execute('''
            DELETE FROM delivery_addresses
            WHERE id IN (
                SELECT da.id
                FROM delivery_addresses da
                LEFT JOIN orders o ON da.order_id = o.id
                WHERE o.id IS NULL
            )
        ''')
        
        deleted_count = cursor.rowcount
        await db.commit()
        
        print(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –≤–∏—Å—è—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏")

async def show_delivery_addresses_stats():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞–¥—Ä–µ—Å–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏
    """
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–¥—Ä–µ—Å–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏:")
    
    async with aiosqlite.connect(DB_PATH) as db:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤
        cursor = await db.execute('SELECT COUNT(*) FROM delivery_addresses')
        total_addresses = (await cursor.fetchone())[0]
        print(f"  –í—Å–µ–≥–æ –∞–¥—Ä–µ—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏: {total_addresses}")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏
        cursor = await db.execute('''
            SELECT COUNT(*)
            FROM delivery_addresses da
            INNER JOIN orders o ON da.order_id = o.id
        ''')
        valid_addresses = (await cursor.fetchone())[0]
        print(f"  –ê–¥—Ä–µ—Å–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏: {valid_addresses}")
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Å—è—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤
        cursor = await db.execute('''
            SELECT COUNT(*)
            FROM delivery_addresses da
            LEFT JOIN orders o ON da.order_id = o.id
            WHERE o.id IS NULL
        ''')
        orphaned_addresses = (await cursor.fetchone())[0]
        print(f"  –í–∏—Å—è—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤: {orphaned_addresses}")

if __name__ == "__main__":
    async def main():
        await show_delivery_addresses_stats()
        await cleanup_orphaned_delivery_addresses()
        await show_delivery_addresses_stats()
        print("\nüéâ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    
    asyncio.run(main())
