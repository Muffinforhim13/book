import React, { useEffect, useState } from "react";
import { Button } from "../components/ui/button";
import { Card } from "../components/ui/card";
import { Input } from "../components/ui/input";
import { translateStatus } from "../utils/statusTranslations";

interface Photo {
  id: number;
  order_id: number;
  filename: string;
  type: string;
  created_at: string;
  path: string;  // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ path
  order_data?: string;
  user_id?: number;
}

interface Order {
  id: number;
  user_id: number;
  order_data: string;
  status: string;
  username?: string;
  created_at: string;
}

interface CoverTemplate {
  id: number;
  name: string;
  filename: string;
  category: string;
  created_at: string;
}

interface BookStyle {
  id: number;
  name: string;
  description: string;
  filename: string;
  category: string;
  created_at: string;
}

interface VoiceStyle {
  id: number;
  name: string;
  description: string;
  filename: string;
  gender: string;
  category: string;
  created_at: string;
}

const PhotosPage: React.FC = () => {
  const [activeTab, setActiveTab] = useState<'orders' | 'covers' | 'styles' | 'voices'>('orders');
  const [photos, setPhotos] = useState<Photo[]>([]);
  const [coverTemplates, setCoverTemplates] = useState<CoverTemplate[]>([]);
  const [bookStyles, setBookStyles] = useState<BookStyle[]>([]);
  const [voiceStyles, setVoiceStyles] = useState<VoiceStyle[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [selectedOrder, setSelectedOrder] = useState<number | null>(null);
  const [orders, setOrders] = useState<Order[]>([]);
  const [userPermissions, setUserPermissions] = useState<{is_super_admin: boolean} | null>(null);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±–ª–æ–∂–µ–∫
  const [showAddCoverForm, setShowAddCoverForm] = useState(false);
  const [newCover, setNewCover] = useState({
    name: '',
    category: '',
    file: null as File | null
  });
  const [addingCover, setAddingCover] = useState(false);
  const [addCoverError, setAddCoverError] = useState('');
  const [addCoverSuccess, setAddCoverSuccess] = useState('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª–µ–π
  const [showAddStyleForm, setShowAddStyleForm] = useState(false);
  const [newStyle, setNewStyle] = useState({
    name: 'Pixar üåà ‚Äî –¥–æ—Å—Ç—É–ø–µ–Ω',
    description: 'Pixar üåà\n\n¬´–°—Ç–∏–ª—å Pixar ‚Äî –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ-–º—É–ª—å—Ç—è—à–Ω—ã–π, —è—Ä–∫–∏–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π.\n–ö–Ω–∏–≥–∞ –ø–æ–ª—É—á–∏—Ç—Å—è –∫—Ä–∞—Å–æ—á–Ω–æ–π –∏ –∂–∏–≤–æ–π, —Å –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≥–µ—Ä–æ—è–º–∏ –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏. –ö–Ω–∏–≥–∞ –±—É–¥–µ—Ç –∫–∞–∫ –¥–æ–±—Ä—ã–π –º—É–ª—å—Ç—Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —É–ª—ã–±–∫—É –∏ —Å–ª—ë–∑—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–ª–µ–∑—ãü•≤¬ª',
    file: null as File | null
  });
  const [addingStyle, setAddingStyle] = useState(false);
  const [addStyleError, setAddStyleError] = useState('');
  const [addStyleSuccess, setAddStyleSuccess] = useState('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∏–ª–µ–π
  const [editingStyle, setEditingStyle] = useState<BookStyle | null>(null);
  const [showEditStyleForm, setShowEditStyleForm] = useState(false);
  const [editingStyleData, setEditingStyleData] = useState({
    name: '',
    description: '',
    file: null as File | null
  });
  const [editingStyleLoading, setEditingStyleLoading] = useState(false);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤
  const [showAddVoiceForm, setShowAddVoiceForm] = useState(false);
  const [newVoice, setNewVoice] = useState({
    gender: 'male',
    category: 'gentle',
    file: null as File | null
  });
  const [addingVoice, setAddingVoice] = useState(false);
  const [addVoiceError, setAddVoiceError] = useState('');
  const [addVoiceSuccess, setAddVoiceSuccess] = useState('');
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤
  const [editingVoice, setEditingVoice] = useState<VoiceStyle | null>(null);
  const [showEditVoiceForm, setShowEditVoiceForm] = useState(false);
  const [editingVoiceData, setEditingVoiceData] = useState({
    gender: 'male',
    file: null as File | null
  });
  const [editingVoiceLoading, setEditingVoiceLoading] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
  const [showCoverModal, setShowCoverModal] = useState(false);
  const [selectedCover, setSelectedCover] = useState<CoverTemplate | null>(null);
  const [showStyleModal, setShowStyleModal] = useState(false);
  const [selectedStyle, setSelectedStyle] = useState<BookStyle | null>(null);
  const [showVoiceModal, setShowVoiceModal] = useState(false);
  const [selectedVoice, setSelectedVoice] = useState<VoiceStyle | null>(null);

  useEffect(() => {
    fetchUserPermissions();
    fetchPhotos();
    fetchOrders();
    fetchCoverTemplates();
    fetchBookStyles();
    fetchVoiceStyles();
  }, []);

  const fetchUserPermissions = async () => {
    try {
      const token = localStorage.getItem("token");
      console.log("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...");
      const response = await fetch("/admin/profile/permissions", {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      console.log("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–∞–≤:", response.status, response.statusText);
      if (response.ok) {
        const data = await response.json();
        console.log("üë§ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", data);
        setUserPermissions(data);
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", response.status);
      }
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞:", err);
    }
  };

  const fetchPhotos = async () => {
    try {
      const token = localStorage.getItem("token");
      if (!token) {
        setError("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return;
      }
      
      console.log("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏...");
      const response = await fetch("/admin/photos", {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      
      console.log("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:", response.status, response.statusText);
      
      if (response.status === 401) {
        setError("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ —Å–Ω–æ–≤–∞.");
        // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—Ö–æ–¥–∞
        window.location.href = "/admin/login";
        return;
      }
      
      if (response.ok) {
        const data = await response.json();
        console.log("üì∏ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏:", data);
        setPhotos(data);
        setError(""); // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
      } else {
        const errorText = await response.text();
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:", response.status, errorText);
        setError(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: ${response.status}`);
      }
    } catch (err) {
      console.error("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π:", err);
      setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π");
    } finally {
      setLoading(false);
    }
  };

  const fetchOrders = async () => {
    try {
      const token = localStorage.getItem("token");
      const response = await fetch("/admin/orders", {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.ok) {
        const data = await response.json();
        setOrders(data);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤:", err);
    }
  };

  const fetchCoverTemplates = async () => {
    try {
      const token = localStorage.getItem("token");
      const response = await fetch("/admin/cover-templates", {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      if (response.ok) {
        const data = await response.json();
        setCoverTemplates(data);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ –æ–±–ª–æ–∂–µ–∫:", err);
    }
  };

  const fetchBookStyles = async () => {
    try {
      const token = localStorage.getItem("token");
      console.log("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–∏–≥...");
      const response = await fetch("/admin/book-styles", {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      console.log("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å—Ç–∏–ª–µ–π –∫–Ω–∏–≥:", response.status, response.statusText);
      if (response.ok) {
        const data = await response.json();
        console.log("üìä –ü–æ–ª—É—á–µ–Ω—ã —Å—Ç–∏–ª–∏ –∫–Ω–∏–≥:", data);
        setBookStyles(data);
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å—Ç–∏–ª–µ–π –∫–Ω–∏–≥:", response.status);
        setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–ª–µ–π –∫–Ω–∏–≥");
      }
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–ª–µ–π –∫–Ω–∏–≥:", err);
      setError("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–ª–µ–π –∫–Ω–∏–≥");
    }
  };

  const fetchVoiceStyles = async () => {
    try {
      const token = localStorage.getItem("token");
      console.log("üîç –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∏–ª–∏ –≥–æ–ª–æ—Å–∞...");
      const response = await fetch("/admin/voice-styles", {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      console.log("üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.status, response.statusText);
      if (response.ok) {
        const data = await response.json();
        console.log("‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Å—Ç–∏–ª–∏ –≥–æ–ª–æ—Å–∞:", data);
        setVoiceStyles(data);
      } else {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–ª–µ–π –≥–æ–ª–æ—Å–∞:", response.status, response.statusText);
      }
    } catch (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–ª–µ–π –≥–æ–ª–æ—Å–∞:", err);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏
  const deleteCover = async (template: CoverTemplate) => {
    if (!window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ–±–ª–æ–∂–∫—É "${template.name}"?`)) {
      return;
    }
    
    try {
      const token = localStorage.getItem("token");
      const response = await fetch(`/admin/covers/${template.id}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      
      if (response.ok) {
        setAddCoverSuccess(`‚úÖ –û–±–ª–æ–∂–∫–∞ "${template.name}" —É–¥–∞–ª–µ–Ω–∞!`);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–ª–æ–∂–µ–∫
        fetchCoverTemplates();
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => setAddCoverSuccess(''), 3000);
      } else {
        throw new Error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏");
      }
    } catch (error: any) {
      setAddCoverError(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  };

  const handleAddCover = async () => {
    if (!newCover.name || !newCover.category || !newCover.file) {
      setAddCoverError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    setAddingCover(true);
    setAddCoverError('');

    try {
      const token = localStorage.getItem("token");
      const formData = new FormData();
      formData.append('name', newCover.name);
      formData.append('category', newCover.category);
      formData.append('file', newCover.file);

      const response = await fetch("/admin/cover-templates", {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData,
      });

      if (response.ok) {
        setAddCoverSuccess('–û–±–ª–æ–∂–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
        setNewCover({ name: '', category: '', file: null });
        setShowAddCoverForm(false);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±–ª–æ–∂–µ–∫
        fetchCoverTemplates();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => setAddCoverSuccess(''), 3000);
      } else {
        const errorData = await response.json();
        setAddCoverError(errorData.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏');
      }
    } catch (err) {
      setAddCoverError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–±–ª–æ–∂–∫–∏');
    } finally {
      setAddingCover(false);
    }
  };

  const clearAddCoverForm = () => {
    setNewCover({ name: '', category: '', file: null });
    setAddCoverError('');
    setShowAddCoverForm(false);
  };

  const handleAddStyle = async () => {
    if (!newStyle.name || !newStyle.description || !newStyle.file) {
      setAddStyleError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      return;
    }

    setAddingStyle(true);
    setAddStyleError('');

    try {
      const token = localStorage.getItem("token");
      const formData = new FormData();
      formData.append('name', newStyle.name);
      formData.append('description', newStyle.description);
      formData.append('category', '–û—Å–Ω–æ–≤–Ω—ã–µ'); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      formData.append('file', newStyle.file);

      const response = await fetch("/admin/book-styles", {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData,
      });

      if (response.ok) {
        setAddStyleSuccess('–°—Ç–∏–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
        setNewStyle({ 
          name: 'Pixar üåà ‚Äî –¥–æ—Å—Ç—É–ø–µ–Ω', 
          description: 'Pixar üåà\n\n¬´–°—Ç–∏–ª—å Pixar ‚Äî –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ-–º—É–ª—å—Ç—è—à–Ω—ã–π, —è—Ä–∫–∏–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π.\n–ö–Ω–∏–≥–∞ –ø–æ–ª—É—á–∏—Ç—Å—è –∫—Ä–∞—Å–æ—á–Ω–æ–π –∏ –∂–∏–≤–æ–π, —Å –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≥–µ—Ä–æ—è–º–∏ –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏. –ö–Ω–∏–≥–∞ –±—É–¥–µ—Ç –∫–∞–∫ –¥–æ–±—Ä—ã–π –º—É–ª—å—Ç—Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —É–ª—ã–±–∫—É –∏ —Å–ª—ë–∑—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–ª–µ–∑—ãü•≤¬ª', 
          file: null 
        });
        setShowAddStyleForm(false);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–ª–µ–π
        fetchBookStyles();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => setAddStyleSuccess(''), 3000);
      } else {
        const errorData = await response.json();
        setAddStyleError(errorData.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–ª—è');
      }
    } catch (err) {
      setAddStyleError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–ª—è');
    } finally {
      setAddingStyle(false);
    }
  };

  const clearAddStyleForm = () => {
    setNewStyle({ 
      name: 'Pixar üåà ‚Äî –¥–æ—Å—Ç—É–ø–µ–Ω', 
      description: 'Pixar üåà\n\n¬´–°—Ç–∏–ª—å Pixar ‚Äî –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ-–º—É–ª—å—Ç—è—à–Ω—ã–π, —è—Ä–∫–∏–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π.\n–ö–Ω–∏–≥–∞ –ø–æ–ª—É—á–∏—Ç—Å—è –∫—Ä–∞—Å–æ—á–Ω–æ–π –∏ –∂–∏–≤–æ–π, —Å –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≥–µ—Ä–æ—è–º–∏ –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏. –ö–Ω–∏–≥–∞ –±—É–¥–µ—Ç –∫–∞–∫ –¥–æ–±—Ä—ã–π –º—É–ª—å—Ç—Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —É–ª—ã–±–∫—É –∏ —Å–ª—ë–∑—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–ª–µ–∑—ãü•≤¬ª', 
      file: null 
    });
    setAddStyleError('');
    setShowAddStyleForm(false);
  };

  const handleAddVoice = async () => {
    if (!newVoice.file) {
      setAddVoiceError('–í—ã–±–µ—Ä–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª');
      return;
    }

    setAddingVoice(true);
    setAddVoiceError('');

    try {
      const token = localStorage.getItem("token");
      const formData = new FormData();
      formData.append('name', newVoice.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π');
      formData.append('description', newVoice.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å' : '–ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å');
      formData.append('gender', newVoice.gender);
      formData.append('category', newVoice.category);
      formData.append('file', newVoice.file);

      const response = await fetch("/admin/voice-styles", {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData,
      });

      if (response.ok) {
        setAddVoiceSuccess('–ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!');
        setNewVoice({ gender: 'male', category: 'gentle', file: null });
        setShowAddVoiceForm(false);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤
        fetchVoiceStyles();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => setAddVoiceSuccess(''), 3000);
      } else {
        const errorData = await response.json();
        setAddVoiceError(errorData.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–∞');
      }
    } catch (err) {
      setAddVoiceError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–∞');
    } finally {
      setAddingVoice(false);
    }
  };

  const clearAddVoiceForm = () => {
    setNewVoice({ gender: 'male', category: 'gentle', file: null });
    setAddVoiceError('');
    setShowAddVoiceForm(false);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
  const startEditVoice = (voice: VoiceStyle) => {
    setEditingVoice(voice);
    setEditingVoiceData({
      gender: voice.gender,
      file: null
    });
    setShowEditVoiceForm(true);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
  const saveEditVoice = async () => {
    if (!editingVoice) return;

    setEditingVoiceLoading(true);
    setAddVoiceError('');

    try {
      const token = localStorage.getItem("token");
      const formData = new FormData();
      formData.append('name', editingVoiceData.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π');
      formData.append('description', editingVoiceData.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å' : '–ñ–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å');
      formData.append('gender', editingVoiceData.gender);
      if (editingVoiceData.file) {
        formData.append('file', editingVoiceData.file);
      }

      const response = await fetch(`/admin/voice-styles/${editingVoice.id}`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData,
      });

      if (response.ok) {
        setAddVoiceSuccess('–ì–æ–ª–æ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
        setShowEditVoiceForm(false);
        setEditingVoice(null);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤
        fetchVoiceStyles();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => setAddVoiceSuccess(''), 3000);
      } else {
        const errorData = await response.json();
        setAddVoiceError(errorData.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–∞');
      }
    } catch (err) {
      setAddVoiceError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ–ª–æ—Å–∞');
    } finally {
      setEditingVoiceLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
  const cancelEditVoice = () => {
    setShowEditVoiceForm(false);
    setEditingVoice(null);
    setEditingVoiceData({ gender: 'male', file: null });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞
  const deleteVoice = async (voice: VoiceStyle) => {
    if (!window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≥–æ–ª–æ—Å "${voice.name}"?`)) {
      return;
    }
    
    try {
      const token = localStorage.getItem("token");
      const response = await fetch(`/admin/voice-styles/${voice.id}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      
      if (response.ok) {
        setAddVoiceSuccess(`‚úÖ –ì–æ–ª–æ—Å "${voice.name}" —É–¥–∞–ª–µ–Ω!`);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≥–æ–ª–æ—Å–æ–≤
        fetchVoiceStyles();
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => setAddVoiceSuccess(''), 3000);
      } else {
        throw new Error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞");
      }
    } catch (error: any) {
      setAddVoiceError(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∏–ª—è
  const startEditStyle = (style: BookStyle) => {
    setEditingStyle(style);
    setEditingStyleData({
      name: style.name,
      description: style.description,
      file: null
    });
    setShowEditStyleForm(true);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å—Ç–∏–ª—è
  const saveEditStyle = async () => {
    if (!editingStyle || !editingStyleData.name || !editingStyleData.description) {
      setAddStyleError('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è');
      return;
    }

    setEditingStyleLoading(true);
    setAddStyleError('');

    try {
      const token = localStorage.getItem("token");
      const formData = new FormData();
      formData.append('name', editingStyleData.name);
      formData.append('description', editingStyleData.description);
      formData.append('category', '–û—Å–Ω–æ–≤–Ω—ã–µ'); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (editingStyleData.file) {
        formData.append('file', editingStyleData.file);
      }

      const response = await fetch(`/admin/book-styles/${editingStyle.id}`, {
        method: 'PUT',
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData,
      });

      if (response.ok) {
        setAddStyleSuccess('–°—Ç–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
        setShowEditStyleForm(false);
        setEditingStyle(null);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–ª–µ–π
        fetchBookStyles();
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => setAddStyleSuccess(''), 3000);
      } else {
        const errorData = await response.json();
        setAddStyleError(errorData.detail || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–ª—è');
      }
    } catch (err) {
      setAddStyleError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∏–ª—è');
    } finally {
      setEditingStyleLoading(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const cancelEditStyle = () => {
    setShowEditStyleForm(false);
    setEditingStyle(null);
    setEditingStyleData({ name: '', description: '', file: null });
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è
  const deleteStyle = async (style: BookStyle) => {
    if (!window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—Ç–∏–ª—å "${style.name}"?`)) {
      return;
    }
    
    try {
      const token = localStorage.getItem("token");
      const response = await fetch(`/admin/book-styles/${style.id}`, {
        method: "DELETE",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      
      if (response.ok) {
        setAddStyleSuccess(`‚úÖ –°—Ç–∏–ª—å "${style.name}" —É–¥–∞–ª–µ–Ω!`);
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∏–ª–µ–π
        fetchBookStyles();
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
        setTimeout(() => setAddStyleSuccess(''), 3000);
      } else {
        throw new Error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è");
      }
    } catch (error: any) {
      setAddStyleError(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  };

  const getOrderInfo = (orderId: number) => {
    const order = orders.find(o => o.id === orderId);
    if (order) {
      try {
        const orderData = JSON.parse(order.order_data);
        return {
          user_id: order.user_id,
          product: orderData.product || "–ù–µ —É–∫–∞–∑–∞–Ω",
          relation: orderData.relation || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
          status: translateStatus(order.status),
          created_at: order.created_at
        };
      } catch {
        return { 
          user_id: order.user_id, 
          product: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞", 
          relation: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞",
          status: translateStatus(order.status),
          created_at: order.created_at
        };
      }
    }
    return null;
  };

  const getPhotoTypeLabel = (type: string) => {
    switch (type) {
      case "main_face_1": return "–õ–∏—Ü–æ 1";
      case "main_face_2": return "–õ–∏—Ü–æ 2";
      case "main_full": return "–ü–æ–ª–Ω—ã–π —Ä–æ—Å—Ç";
      case "main_hero": return "–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π";
      case "main_hero_1": return "–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π - –§–æ—Ç–æ 1";
      case "main_hero_2": return "–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π - –§–æ—Ç–æ 2";
      case "main_hero_3": return "–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π - –§–æ—Ç–æ 3";
      case "joint_photo": return "–°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ";
      case "hero_photo": return "–î—Ä—É–≥–æ–π –≥–µ—Ä–æ–π";
      case "uploaded": return "–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª";
      default:
        if (type.startsWith("page_")) {
          return `–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${type.split("_")[1]}`;
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥—Ä—É–≥–∏—Ö –≥–µ—Ä–æ–µ–≤
        if (type.includes("_face_1")) {
          const heroName = type.split("_face_1")[0];
          return `${heroName} - –õ–∏—Ü–æ 1`;
        }
        if (type.includes("_face_2")) {
          const heroName = type.split("_face_2")[0];
          return `${heroName} - –õ–∏—Ü–æ 2`;
        }
        if (type.includes("_full")) {
          const heroName = type.split("_full")[0];
          return `${heroName} - –ü–æ–ª–Ω—ã–π —Ä–æ—Å—Ç`;
        }
        return type;
    }
  };

  // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ —Ñ–∞–π–ª–æ–≤
  const allowedImageTypes = [
    'image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/bmp', 'image/tiff', 'image/svg+xml'
  ];
  
  const allowedVideoTypes = [
    'video/mp4', 'video/mov', 'video/avi', 'video/mkv', 'video/flv', 'video/wmv', 
    'video/m4v', 'video/3gp', 'video/ogv', 'video/webm', 'video/quicktime'
  ];
  
  const allowedAudioTypes = [
    'audio/mpeg', 'audio/wav', 'audio/ogg', 'audio/mp4', 'audio/m4a', 'audio/wma', 
    'audio/aac', 'audio/flac', 'audio/opus', 'audio/amr', 'audio/midi', 'audio/mid',
    'audio/xmf', 'audio/rtttl', 'audio/smf', 'audio/imy', 'audio/rtx', 'audio/ota',
    'audio/jad', 'audio/jar'
  ];
  
  const allowedDocumentTypes = [
    'application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'text/plain', 'text/html', 'text/css', 'text/javascript', 'application/json',
    'application/xml', 'text/xml'
  ];
  
  const allAllowedTypes = [...allowedImageTypes, ...allowedVideoTypes, ...allowedAudioTypes, ...allowedDocumentTypes];

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º
  const photosByOrder = photos.reduce((acc, photo) => {
    if (!acc[photo.order_id]) {
      acc[photo.order_id] = [];
    }
    acc[photo.order_id].push(photo);
    return acc;
  }, {} as Record<number, Photo[]>);

  // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–∫–∞–∑—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
  const filteredOrders = userPermissions?.is_super_admin 
    ? orders 
    : orders.filter(order => {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞–∫–∞–∑—É
        // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        return true;
      });

  const filteredPhotos = selectedOrder 
    ? photos.filter(photo => photo.order_id === selectedOrder)
    : photos;


  if (loading) {
    return (
      <div className="container mx-auto p-6">
        <div className="text-center">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
      </div>
    );
  }

  const handleFileUpload = async (files: FileList | null, orderId: number) => {
    if (!files || files.length === 0) return;
    
    const formData = new FormData();
    formData.append('order_id', orderId.toString());
    
    for (let i = 0; i < files.length; i++) {
      const file = files[i];
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞
      if (!allAllowedTypes.includes(file.type)) {
        alert(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: ${file.name} (${file.type})`);
        continue;
      }
      
      formData.append('files', file);
    }
    
    try {
      const token = localStorage.getItem("token");
      const response = await fetch("/admin/photos/upload", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData,
      });
      
      if (response.ok) {
        alert("–§–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!");
        fetchPhotos();
      } else {
        const error = await response.json();
        alert(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.detail}`);
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤:", error);
      alert("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤");
    }
  };

  return (
    <div className="container mx-auto p-6">
      <div className="mb-6">
        <h1 className="text-2xl font-bold mb-4">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏/–∞—É–¥–∏–æ</h1>
        
        {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–∫–ª–∞–¥–æ–∫ */}
        <div className="flex space-x-4 mb-6">
          <button
            onClick={() => setActiveTab('orders')}
            className={`px-4 py-2 rounded-lg font-medium transition-colors ${
              activeTab === 'orders'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-600 text-gray-200 hover:bg-gray-500'
            }`}
          >
            üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º ({photos.length})
          </button>
          <button
            onClick={() => setActiveTab('covers')}
            className={`px-4 py-2 rounded-lg font-medium transition-colors ${
              activeTab === 'covers'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-600 text-gray-200 hover:bg-gray-500'
            }`}
          >
            üìö –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –æ–±–ª–æ–∂–µ–∫
          </button>
          <button
            onClick={() => setActiveTab('styles')}
            className={`px-4 py-2 rounded-lg font-medium transition-colors ${
              activeTab === 'styles'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-600 text-gray-200 hover:bg-gray-500'
            }`}
          >
            üé® –°—Ç–∏–ª–∏ –∫–Ω–∏–≥ ({bookStyles.length})
          </button>
          <button
            onClick={() => setActiveTab('voices')}
            className={`px-4 py-2 rounded-lg font-medium transition-colors ${
              activeTab === 'voices'
                ? 'bg-blue-600 text-white'
                : 'bg-gray-600 text-gray-200 hover:bg-gray-500'
            }`}
          >
            üé§ –°—Ç–∏–ª–∏ –≥–æ–ª–æ—Å–∞
          </button>
        </div>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}
      </div>

      {/* –í–∫–ª–∞–¥–∫–∞ "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º" */}
      {activeTab === 'orders' && (
        <div>
          {/* –§–∏–ª—å—Ç—Ä –ø–æ –∑–∞–∫–∞–∑—É */}
          <div className="mb-4">
            <label className="block text-sm font-medium mb-2">–§–∏–ª—å—Ç—Ä –ø–æ –∑–∞–∫–∞–∑—É:</label>
            <select
              value={selectedOrder || ""}
              onChange={(e) => setSelectedOrder(e.target.value ? Number(e.target.value) : null)}
              className="border border-gray-300 rounded px-3 py-2 w-full max-w-xs"
            >
              <option value="">–í—Å–µ –∑–∞–∫–∞–∑—ã</option>
              {filteredOrders.map(order => {
                const orderInfo = getOrderInfo(order.id);
                return (
                  <option key={order.id} value={order.id}>
                    –ó–∞–∫–∞–∑ #{order.id} - {orderInfo?.product} ({orderInfo?.relation})
                  </option>
                );
              })}
            </select>
          </div>

          {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ—à–∏–±–æ–∫ */}
          {loading && (
            <div className="text-center py-8">
              <div className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...</div>
            </div>
          )}
          
          {error && (
            <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
              {error}
            </div>
          )}
          
          {!loading && !error && photos.length === 0 && (
            <div className="text-center py-8">
              <div className="text-gray-600">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
              <div className="text-sm text-gray-500 mt-2">
                –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–∫–∞–∑—ã –µ—â–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
              </div>
            </div>
          )}

          {/* –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–æ –∑–∞–∫–∞–∑–∞–º */}
          {!loading && !error && selectedOrder ? (
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {filteredPhotos.map((photo) => {
                const orderInfo = getOrderInfo(photo.order_id);
                return (
                  <Card key={photo.id} className="p-4">
                    <div className="mb-3">
                      <img
                        src={`/${photo.path}`}
                        alt={`–§–æ—Ç–æ –∑–∞–∫–∞–∑–∞ ${photo.order_id}`}
                        className="w-full h-48 object-cover rounded"
                        onError={(e) => {
                          e.currentTarget.src = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='200' height='200' viewBox='0 0 200 200'%3E%3Crect width='200' height='200' fill='%23f3f4f6'/%3E%3Ctext x='50%25' y='50%25' text-anchor='middle' dy='.3em' fill='%236b7280'%3E–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ%3C/text%3E%3C/svg%3E";
                        }}
                      />
                    </div>
                    
                    <div className="space-y-2">
                      <div className="flex justify-between items-center">
                        <span className="text-sm font-medium">–ó–∞–∫–∞–∑ #{photo.order_id}</span>
                        <span className="text-xs text-gray-500">
                          {new Date(photo.created_at).toLocaleDateString('ru-RU', { timeZone: 'Europe/Moscow' })}
                        </span>
                      </div>
                      
                      <div className="text-sm">
                        <div><strong>–¢–∏–ø:</strong> {getPhotoTypeLabel(photo.type)}</div>
                        {orderInfo && (
                          <>
                            <div><strong>–ü—Ä–æ–¥—É–∫—Ç:</strong> {orderInfo.product}</div>
                            <div><strong>–û—Ç–Ω–æ—à–µ–Ω–∏–µ:</strong> {orderInfo.relation}</div>
                            <div><strong>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</strong> {orderInfo.user_id}</div>
                          </>
                        )}
                      </div>

                      <div className="flex space-x-2 mt-3">
                        <Button
                          onClick={() => window.open(`/${photo.path}`, '_blank')}
                          className="text-xs"
                        >
                          –û—Ç–∫—Ä—ã—Ç—å
                        </Button>
                        <Button
                          onClick={async () => {
                            try {
                              const response = await fetch(`/${photo.path}`);
                              if (!response.ok) {
                                throw new Error(`HTTP error! status: ${response.status}`);
                              }
                              
                              const blob = await response.blob();
                              const downloadUrl = window.URL.createObjectURL(blob);
                              
                              const link = document.createElement('a');
                              link.href = downloadUrl;
                              link.download = photo.filename;
                              document.body.appendChild(link);
                              link.click();
                              document.body.removeChild(link);
                              
                              // –û—á–∏—â–∞–µ–º URL –æ–±—ä–µ–∫—Ç
                              window.URL.revokeObjectURL(downloadUrl);
                            } catch (error) {
                              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', error);
                              // Fallback: –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                              window.open(`/${photo.path}`, '_blank');
                            }
                          }}
                          className="text-xs bg-blue-500 hover:bg-blue-600 text-white"
                        >
                          –°–∫–∞—á–∞—Ç—å
                        </Button>
                      </div>
                    </div>
                  </Card>
                );
              })}
            </div>
          ) : (
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–∫–∞–∑—ã —Å –∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
            <div className="space-y-6">
              {filteredOrders.map(order => {
                const orderInfo = getOrderInfo(order.id);
                const orderPhotos = photosByOrder[order.id] || [];
                console.log(`üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.id}:`, orderPhotos);
                
                if (orderPhotos.length === 0) return null;

                return (
                  <Card key={order.id} className="p-6">
                    <div className="mb-4">
                      <h3 className="text-lg font-semibold mb-2">
                        –ó–∞–∫–∞–∑ #{order.id} - {orderInfo?.product} ({orderInfo?.relation})
                      </h3>
                      <div className="text-sm text-gray-600">
                        <div>–°—Ç–∞—Ç—É—Å: {orderInfo?.status}</div>
                        <div>–°–æ–∑–¥–∞–Ω: {new Date(orderInfo?.created_at || '').toLocaleDateString('ru-RU', { timeZone: 'Europe/Moscow' })}</div>
                        <div>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {orderPhotos.length}</div>
                      </div>
                    </div>
                    
                    <div className="grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-3">
                      {orderPhotos.map((photo) => (
                        <div key={photo.id} className="relative group">
                          <img
                            src={`/${photo.path}`}
                            alt={`–§–æ—Ç–æ –∑–∞–∫–∞–∑–∞ ${photo.order_id}`}
                            className="w-full h-24 object-cover rounded cursor-pointer hover:opacity-80 transition-opacity"
                            onClick={() => window.open(`/${photo.path}`, '_blank')}
                            onError={(e) => {
                              console.log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ: ${photo.path}`);
                              e.currentTarget.src = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='200' height='200' viewBox='0 0 200 200'%3E%3Crect width='200' height='200' fill='%23f3f4f6'/%3E%3Ctext x='50%25' y='50%25' text-anchor='middle' dy='.3em' fill='%236b7280'%3E–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ%3C/text%3E%3C/svg%3E";
                            }}
                          />
                          <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 rounded flex items-center justify-center transition-all pointer-events-none">
                            <span className="text-white text-xs opacity-0 group-hover:opacity-100">üëÅÔ∏è</span>
                          </div>
                          <div className="text-xs text-gray-500 mt-1 text-center">
                            {getPhotoTypeLabel(photo.type)}
                          </div>
                        </div>
                      ))}
                    </div>
                  </Card>
                );
              })}
            </div>
          )}

          {filteredPhotos.length === 0 && selectedOrder && (
            <div className="text-center text-gray-500 mt-8">
              –ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            </div>
          )}
        </div>
      )}

      {/* –í–∫–ª–∞–¥–∫–∞ "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –æ–±–ª–æ–∂–µ–∫" */}
      {activeTab === 'covers' && (
        <div>
          <div className="mb-4">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">–ì–æ—Ç–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –æ–±–ª–æ–∂–µ–∫</h2>
              {userPermissions?.is_super_admin && (
                <Button
                  onClick={() => setShowAddCoverForm(!showAddCoverForm)}
                  className="bg-green-600 hover:bg-green-700 text-white"
                >
                  {showAddCoverForm ? '–û—Ç–º–µ–Ω–∞' : '‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ–±–ª–æ–∂–∫—É'}
                </Button>
              )}
            </div>
            <p className="text-gray-600 mb-4">
              –í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–æ–∂–∫—É –∏ –¥–æ–±–∞–≤—å—Ç–µ –µ—ë –≤ –∑–∞–∫–∞–∑ –æ–¥–Ω–∏–º –∫–ª–∏–∫–æ–º
            </p>
          </div>

          {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ */}
          {showAddCoverForm && userPermissions?.is_super_admin && (
            <Card className="p-6 mb-6 bg-gray-50">
              <h3 className="text-lg font-semibold mb-4">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –æ–±–ª–æ–∂–∫—É</h3>
              
              {addCoverError && (
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                  {addCoverError}
                </div>
              )}
              
              {addCoverSuccess && (
                <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
                  {addCoverSuccess}
                </div>
              )}

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                <div>
                  <label className="block text-sm font-medium mb-2">–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏</label>
                  <Input
                    type="text"
                    value={newCover.name}
                    onChange={(e) => setNewCover({ ...newCover, name: e.target.value })}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                    className="w-full"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-2">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                  <Input
                    type="text"
                    value={newCover.category}
                    onChange={(e) => setNewCover({ ...newCover, category: e.target.value })}
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –†–æ–º–∞–Ω—Ç–∏–∫–∞, –î–µ—Ç–µ–∫—Ç–∏–≤"
                    className="w-full"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-2">–§–∞–π–ª –æ–±–ª–æ–∂–∫–∏</label>
                  <Input
                    type="file"
                    accept="image/*"
                    onChange={(e) => setNewCover({ ...newCover, file: e.target.files?.[0] || null })}
                    className="w-full"
                  />
                </div>
              </div>

              <div className="flex space-x-3">
                <Button
                  onClick={handleAddCover}
                  disabled={addingCover}
                  className="bg-green-600 hover:bg-green-700 text-white"
                >
                  {addingCover ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å –æ–±–ª–æ–∂–∫—É'}
                </Button>
                <Button
                  onClick={clearAddCoverForm}
                  className="border border-gray-300 text-gray-700 hover:bg-gray-50 bg-white"
                >
                  –û—á–∏—Å—Ç–∏—Ç—å
                </Button>
              </div>
            </Card>
          )}


          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {coverTemplates.map((template) => (
              <Card key={template.id} className="p-4">
                <div className="mb-3">
                  <img
                    src={`/covers/${template.filename}`}
                    alt={template.name}
                    className="w-full h-48 object-cover rounded cursor-pointer hover:opacity-80 transition-opacity"
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      setSelectedCover(template);
                      setShowCoverModal(true);
                    }}
                    onError={(e) => {
                      e.currentTarget.src = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='200' height='200' viewBox='0 0 200 200'%3E%3Crect width='200' height='200' fill='%23f3f4f6'/%3E%3Ctext x='50%25' y='50%25' text-anchor='middle' dy='.3em' fill='%236b7280'%3E–û–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞%3C/text%3E%3C/svg%3E";
                    }}
                  />
                </div>
                
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="text-sm font-medium">{template.name}</span>
                    <span className="text-xs text-gray-500">
                      {template.category}
                    </span>
                  </div>
                  
                  <div className="text-sm text-gray-600">
                    {template.category}
                  </div>

                  <div className="flex space-x-2 mt-3">
                    <Button
                      onClick={(e) => {
                        e.preventDefault();
                        e.stopPropagation();
                        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ –≤–º–µ—Å—Ç–æ –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                        const modal = document.createElement('div');
                        modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
                        modal.innerHTML = `
                          <div class="bg-white p-6 rounded-lg max-w-4xl max-h-[90vh] w-[90vw]">
                            <div class="flex justify-between items-center mb-4">
                              <h3 class="text-xl font-semibold">${template.name}</h3>
                              <button onclick="this.closest('.fixed').remove()" class="text-gray-500 hover:text-gray-700 text-2xl">&times;</button>
                            </div>
                            <img src="/covers/${template.filename}" alt="${template.name}" class="w-full h-auto max-h-[70vh] object-contain" />
                          </div>
                        `;
                        document.body.appendChild(modal);
                        modal.addEventListener('click', (e) => {
                          if (e.target === modal) modal.remove();
                        });
                      }}
                      className="text-xs"
                    >
                      –ü—Ä–æ—Å–º–æ—Ç—Ä
                    </Button>
                    <Button
                      onClick={() => {
                        // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏
                        alert('–§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏ –≤ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ø–æ–∑–∂–µ');
                      }}
                      className="text-xs bg-green-500 hover:bg-green-600 text-white"
                    >
                      –î–æ–±–∞–≤–∏—Ç—å –≤ –∑–∞–∫–∞–∑
                    </Button>
                    <Button
                      onClick={() => deleteCover(template)}
                      className="text-xs bg-red-500 hover:bg-red-600 text-white"
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </Button>
                  </div>
                </div>
              </Card>
            ))}
          </div>

          {coverTemplates.length === 0 && (
            <div className="text-center text-gray-500 mt-8">
              –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –æ–±–ª–æ–∂–µ–∫
            </div>
          )}
        </div>
      )}

      {/* –í–∫–ª–∞–¥–∫–∞ "–°—Ç–∏–ª–∏ –∫–Ω–∏–≥" */}
      {activeTab === 'styles' && (
        <div>
          <div className="mb-4">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª–µ–π –∫–Ω–∏–≥</h2>
              <Button
                onClick={() => setShowAddStyleForm(!showAddStyleForm)}
                className="bg-green-600 hover:bg-green-700 text-white"
              >
                {showAddStyleForm ? '–û—Ç–º–µ–Ω–∞' : '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª—å'}
              </Button>
            </div>
            <p className="text-gray-600 mb-4">
              –°—Ç–∏–ª–∏ –∫–Ω–∏–≥, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
            </p>
          </div>

          {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∏–ª—è */}
          {showAddStyleForm && (
            <Card className="p-6 mb-6 bg-gray-50">
              <h3 className="text-lg font-semibold mb-4">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å –∫–Ω–∏–≥–∏</h3>
              
              {addStyleError && (
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                  {addStyleError}
                </div>
              )}
              
              {addStyleSuccess && (
                <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
                  {addStyleSuccess}
                </div>
              )}

              <div className="space-y-4 mb-4">
                <div>
                  <label className="block text-sm font-medium mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å</label>
                  <select
                    value={newStyle.name}
                    onChange={(e) => {
                      const selectedStyle = e.target.value;
                      let description = '';
                      
                      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å—Ç–∏–ª—è
                      switch (selectedStyle) {
                        case 'Pixar üåà ‚Äî –¥–æ—Å—Ç—É–ø–µ–Ω':
                          description = 'Pixar üåà\n\n¬´–°—Ç–∏–ª—å Pixar ‚Äî –∫–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–Ω–æ-–º—É–ª—å—Ç—è—à–Ω—ã–π, —è—Ä–∫–∏–π –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π.\n–ö–Ω–∏–≥–∞ –ø–æ–ª—É—á–∏—Ç—Å—è –∫—Ä–∞—Å–æ—á–Ω–æ–π –∏ –∂–∏–≤–æ–π, —Å –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º–∏ –≥–µ—Ä–æ—è–º–∏ –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏. –ö–Ω–∏–≥–∞ –±—É–¥–µ—Ç –∫–∞–∫ –¥–æ–±—Ä—ã–π –º—É–ª—å—Ç—Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç —É–ª—ã–±–∫—É –∏ —Å–ª—ë–∑—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å–ª–µ–∑—ãü•≤¬ª';
                          break;
                        case 'Love is üë©‚Äç‚ù§Ô∏è‚Äçüë® ‚Äî –∑–∞–≥–ª—É—à–∫–∞':
                          description = 'Love isüë©‚Äç‚ù§Ô∏è‚Äçüë®\n\n¬´–°—Ç–∏–ª—å Love is ‚Äî —ç—Ç–æ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –∏ –æ—Å–æ–±–∞—è –±–ª–∏–∑–æ—Å—Ç—å.\n–û–Ω –ø–µ—Ä–µ–¥–∞—ë—Ç —á—É–≤—Å—Ç–≤–æ –∑–∞–±–æ—Ç—ã, —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ–π –ª—é–±–≤–∏. –ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –±—É–¥—É—Ç —Å–≤–µ—Ç–ª—ã–º–∏ –∏ –¥—É—à–µ–≤–Ω—ã–º–∏, —Å–ª–æ–≤–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∫–∞ —Å –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ–ºüíò¬ª';
                          break;
                        case 'Ghibli üè° ‚Äî –∑–∞–≥–ª—É—à–∫–∞':
                          description = 'Ghibli üè°\n\n¬´–°—Ç–∏–ª—å Ghibli ‚Äî —Å–∫–∞–∑–æ—á–Ω—ã–π, –º–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π, —É—é—Ç–Ω—ã–π.\n–ö–Ω–∏–≥–∞ –ø–æ–ª—É—á–∏—Ç—Å—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–Ω–æ–π, —É–Ω–∏–∫–∞–ª—å–Ω–æ–π, –≤–æ–ª—à–µ–±–Ω–æ–π –ø—Ä–∏—Ä–æ–¥–æ–π, –º–∞–≥–∏–µ–π –≤ –º–µ–ª–æ—á–∞—Ö –∏ –æ—â—É—â–µ–Ω–∏–µ–º, —á—Ç–æ —á—É–¥–æ —Ä—è–¥–æ–º. –ö–Ω–∏–≥–∞ —Å—Ç–∞–Ω–µ—Ç —Å–∫–∞–∑–∫–æ–π –¥–ª—è –¥—É—à–∏, –≥–¥–µ –º–∞–≥–∏—è –ø–µ—Ä–µ–ø–ª–µ—Ç–∞–µ—Ç—Å—è —Å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å—é ‚ú®¬ª';
                          break;
                        default:
                          description = '';
                      }
                      
                      setNewStyle({ ...newStyle, name: selectedStyle, description });
                    }}
                    className="w-full border border-gray-300 rounded px-3 py-2"
                  >
                    <option value="Pixar">Pixar üåà ‚Äî –¥–æ—Å—Ç—É–ø–µ–Ω</option>
                    <option value="Ghibli">Ghibli üè° ‚Äî –∑–∞–≥–ª—É—à–∫–∞</option>
                    <option value="Love is">Love is üë©‚Äç‚ù§Ô∏è‚Äçüë® ‚Äî –∑–∞–≥–ª—É—à–∫–∞</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-2">–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è</label>
                  <textarea
                    value={newStyle.description}
                    onChange={(e) => setNewStyle({ ...newStyle, description: e.target.value })}
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏..."
                    className="w-full border border-gray-300 rounded px-3 py-2 h-20"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-2">–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å—Ç–∏–ª—è</label>
                  <Input
                    type="file"
                    accept="image/*"
                    onChange={(e) => setNewStyle({ ...newStyle, file: e.target.files?.[0] || null })}
                    className="w-full"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∏–ª—è
                  </p>
                </div>
              </div>

              <div className="flex space-x-3">
                <Button
                  onClick={handleAddStyle}
                  disabled={addingStyle}
                  className="bg-green-600 hover:bg-green-700 text-white"
                >
                  {addingStyle ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª—å'}
                </Button>
                <Button
                  onClick={clearAddStyleForm}
                  className="border border-gray-300 text-gray-700 hover:bg-gray-50 bg-white"
                >
                  –û—á–∏—Å—Ç–∏—Ç—å
                </Button>
              </div>
            </Card>
          )}

          {loading && (
            <div className="text-center py-8">
              <div className="text-gray-600">–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π –∫–Ω–∏–≥...</div>
            </div>
          )}
          
          {!loading && bookStyles.length === 0 && (
            <div className="text-center py-8">
              <div className="text-gray-600">–°—Ç–∏–ª–∏ –∫–Ω–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>
              <div className="text-sm text-gray-500 mt-2">
                –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Å—Ç–∏–ª—å —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∏–ª—å –∫–Ω–∏–≥–∏" –≤—ã—à–µ
              </div>
            </div>
          )}

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6" data-testid="styles-container">
            {!loading && bookStyles.map((style) => (
              <Card key={style.id} className="p-4">
                <div className="mb-3">
                  <img
                    src={`/styles/${style.filename}`}
                    alt={style.name}
                    className="w-full h-48 object-cover rounded"
                    onError={(e) => {
                      e.currentTarget.src = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='200' height='200' viewBox='0 0 200 200'%3E%3Crect width='200' height='200' fill='%23f3f4f6'/%3E%3Ctext x='50%25' y='50%25' text-anchor='middle' dy='.3em' fill='%236b7280'%3E–°—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω%3C/text%3E%3C/svg%3E";
                    }}
                  />
                </div>
                
                <div className="space-y-2">
                  <div className="flex justify-between items-center">
                    <span className="text-sm font-medium">{style.name}</span>
                    <span className="text-xs text-gray-500">
                      {style.category}
                    </span>
                  </div>
                  
                  <div className="text-sm text-gray-600">
                    {style.description}
                  </div>

                  <div className="flex space-x-2 mt-3">
                    <Button
                      onClick={() => {
                        setSelectedStyle(style);
                        setShowStyleModal(true);
                      }}
                      className="text-xs"
                    >
                      –ü—Ä–æ—Å–º–æ—Ç—Ä
                    </Button>
                    <Button
                      onClick={() => startEditStyle(style)}
                      className="text-xs bg-yellow-500 hover:bg-yellow-600 text-white"
                    >
                      –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                    </Button>
                    {userPermissions?.is_super_admin && (
                    <Button
                      onClick={() => deleteStyle(style)}
                      className="text-xs bg-red-500 hover:bg-red-600 text-white"
                    >
                      –£–¥–∞–ª–∏—Ç—å
                    </Button>
                    )}
                  </div>
                </div>
              </Card>
            ))}
          </div>

          {bookStyles.length === 0 && (
            <div className="text-center text-gray-500 mt-8">
              –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –∫–Ω–∏–≥
            </div>
          )}
        </div>
      )}

      {/* –í–∫–ª–∞–¥–∫–∞ "–°—Ç–∏–ª–∏ –≥–æ–ª–æ—Å–∞" */}
      {activeTab === 'voices' && (
        <div>
          <div className="mb-4">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold">–ü—Ä–∏–º–µ—Ä—ã —Å—Ç–∏–ª–µ–π –≥–æ–ª–æ—Å–∞</h2>
              {userPermissions?.is_super_admin && (
                <Button
                  onClick={() => setShowAddVoiceForm(!showAddVoiceForm)}
                  className="bg-green-600 hover:bg-green-700 text-white"
                >
                  {showAddVoiceForm ? '–û—Ç–º–µ–Ω–∞' : '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å'}
                </Button>
              )}
            </div>
            <p className="text-gray-600 mb-4">
              –°—Ç–∏–ª–∏ –≥–æ–ª–æ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –ø–µ—Å–Ω–∏
            </p>
          </div>

          {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ */}
          {showAddVoiceForm && userPermissions?.is_super_admin && (
            <Card className="p-6 mb-6 bg-gray-50">
              <h3 className="text-lg font-semibold mb-4">–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å –≥–æ–ª–æ—Å–∞</h3>
              
              {addVoiceError && (
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                  {addVoiceError}
                </div>
              )}
              
              {addVoiceSuccess && (
                <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
                  {addVoiceSuccess}
                </div>
              )}

              <div className="space-y-4 mb-4">
                <div>
                  <label className="block text-sm font-medium mb-2">–ü–æ–ª</label>
                  <select
                    value={newVoice.gender}
                    onChange={(e) => setNewVoice({ ...newVoice, gender: e.target.value })}
                    className="w-full border border-gray-300 rounded px-3 py-2"
                  >
                    <option value="male">–ú—É–∂—Å–∫–æ–π</option>
                    <option value="female">–ñ–µ–Ω—Å–∫–∏–π</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-2">–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–∫—Ä–∞—Å–∫–∞</label>
                  <select
                    value={newVoice.category}
                    onChange={(e) => setNewVoice({ ...newVoice, category: e.target.value })}
                    className="w-full border border-gray-300 rounded px-3 py-2"
                  >
                    <option value="gentle">–ù–µ–∂–Ω—ã–π / —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π</option>
                    <option value="bright">–Ø—Ä–∫–∏–π / –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π</option>
                    <option value="artist">–ù–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞—Ä—Ç–∏—Å—Ç–∞</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-2">–ü—Ä–∏–º–µ—Ä –≥–æ–ª–æ—Å–∞ (–∞—É–¥–∏–æ)</label>
                  <Input
                    type="file"
                    accept="audio/*"
                    onChange={(e) => setNewVoice({ ...newVoice, file: e.target.files?.[0] || null })}
                    className="w-full"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    –ó–∞–≥—Ä—É–∑–∏—Ç–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º –≥–æ–ª–æ—Å–∞ (MP3, WAV, OGG)
                  </p>
                </div>
              </div>

              <div className="flex space-x-3">
                <Button
                  onClick={handleAddVoice}
                  disabled={addingVoice}
                  className="bg-green-600 hover:bg-green-700 text-white"
                >
                  {addingVoice ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å'}
                </Button>
                <Button
                  onClick={clearAddVoiceForm}
                  className="border border-gray-300 text-gray-700 hover:bg-gray-50 bg-white"
                >
                  –û—á–∏—Å—Ç–∏—Ç—å
                </Button>
              </div>
            </Card>
          )}

          {/* –§–æ—Ä–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ */}
          {showEditVoiceForm && editingVoice && userPermissions?.is_super_admin && (
            <Card className="p-6 mb-6 bg-gray-50">
              <h3 className="text-lg font-semibold mb-4">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å</h3>
              
              {addVoiceError && (
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                  {addVoiceError}
                </div>
              )}
              
              {addVoiceSuccess && (
                <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
                  {addVoiceSuccess}
                </div>
              )}

              <div className="space-y-4 mb-4">
                <div>
                  <label className="block text-sm font-medium mb-2">–ü–æ–ª</label>
                  <select
                    value={editingVoiceData.gender}
                    onChange={(e) => setEditingVoiceData({ ...editingVoiceData, gender: e.target.value })}
                    className="w-full border border-gray-300 rounded px-3 py-2"
                  >
                    <option value="male">–ú—É–∂—Å–∫–æ–π</option>
                    <option value="female">–ñ–µ–Ω—Å–∫–∏–π</option>
                  </select>
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-2">–ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä –≥–æ–ª–æ—Å–∞ (–∞—É–¥–∏–æ)</label>
                  <Input
                    type="file"
                    accept="audio/*"
                    onChange={(e) => setEditingVoiceData({ ...editingVoiceData, file: e.target.files?.[0] || null })}
                    className="w-full"
                  />
                  <p className="text-xs text-gray-500 mt-1">
                    –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ñ–∞–π–ª
                  </p>
                </div>
              </div>

              <div className="flex space-x-3">
                <Button
                  onClick={saveEditVoice}
                  disabled={editingVoiceLoading}
                  className="bg-yellow-600 hover:bg-yellow-700 text-white"
                >
                  {editingVoiceLoading ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ...' : '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å'}
                </Button>
                <Button
                  onClick={cancelEditVoice}
                  className="border border-gray-300 text-gray-700 hover:bg-gray-50 bg-white"
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
              </div>
            </Card>
          )}

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {voiceStyles.map((voice) => (
              <Card key={voice.id} className="p-4">
                <div className="mb-3">
                  <div className="w-full h-48 bg-gray-200 rounded flex items-center justify-center">
                    <span className="text-gray-500 text-lg">üé§</span>
                  </div>
                </div>
                
                <div className="space-y-2">
                  <div className="flex justify-center">
                    <span className="text-lg font-medium">
                      {voice.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}
                    </span>
                  </div>
                  
                  <div className="flex justify-center">
                    <span className="text-sm text-gray-600">
                      {voice.category === 'gentle' ? '–ù–µ–∂–Ω—ã–π / —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π' :
                       voice.category === 'bright' ? '–Ø—Ä–∫–∏–π / –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π' :
                       voice.category === 'artist' ? '–ù–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞—Ä—Ç–∏—Å—Ç–∞' :
                       voice.category || '–ù–µ —É–∫–∞–∑–∞–Ω'}
                    </span>
                  </div>

                  <div className="flex space-x-2 mt-3">
                    <Button
                      onClick={() => {
                        setSelectedVoice(voice);
                        setShowVoiceModal(true);
                      }}
                      className="text-xs"
                    >
                      –ü—Ä–æ—Å–ª—É—à–∞—Ç—å
                    </Button>
                    {userPermissions?.is_super_admin && (
                      <Button
                        onClick={() => startEditVoice(voice)}
                        className="text-xs bg-yellow-500 hover:bg-yellow-600 text-white"
                      >
                        –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
                      </Button>
                    )}
                    {userPermissions?.is_super_admin && (
                      <Button
                        onClick={() => deleteVoice(voice)}
                        className="text-xs bg-red-500 hover:bg-red-600 text-white"
                      >
                        –£–¥–∞–ª–∏—Ç—å
                      </Button>
                    )}
                  </div>
                </div>
              </Card>
            ))}
          </div>

          {voiceStyles.length === 0 && (
            <div className="text-center text-gray-500 mt-8">
              –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –≥–æ–ª–æ—Å–∞
            </div>
          )}
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–ª–æ–∂–∫–∏ */}
      {showCoverModal && selectedCover && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
          <div className="modal-content bg-gray-900 rounded-lg max-w-4xl w-full">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-semibold text-white">{selectedCover.name}</h3>
              <button 
                onClick={() => setShowCoverModal(false)}
                className="text-gray-400 hover:text-white text-2xl"
              >
                &times;
              </button>
            </div>
            <div className="flex justify-center">
              <img 
                src={`/covers/${selectedCover.filename}`} 
                alt={selectedCover.name}
                className="file-preview-video max-h-[70vh] object-contain"
                onError={(e) => {
                  console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏: ${selectedCover.filename}`);
                  e.currentTarget.src = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='200' height='200' viewBox='0 0 200 200'%3E%3Crect width='200' height='200' fill='%23f3f4f6'/%3E%3Ctext x='50%25' y='50%25' text-anchor='middle' dy='.3em' fill='%236b7280'%3E–û–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞%3C/text%3E%3C/svg%3E";
                }}
              />
            </div>
            <div className="mt-4 text-sm text-gray-300">
              <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> {selectedCover.category}</p>
              <p><strong>–§–∞–π–ª:</strong> {selectedCover.filename}</p>
              <p><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> {new Date(selectedCover.created_at).toLocaleDateString('ru-RU', { timeZone: 'Europe/Moscow' })}</p>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∏–ª—è */}
      {showStyleModal && selectedStyle && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
          <div className="modal-content bg-gray-900 rounded-lg max-w-4xl w-full">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-semibold text-white">{selectedStyle.name}</h3>
              <button 
                onClick={() => setShowStyleModal(false)}
                className="text-gray-400 hover:text-white text-2xl"
              >
                &times;
              </button>
            </div>
            <div className="flex justify-center">
              <img 
                src={`/styles/${selectedStyle.filename}`} 
                alt={selectedStyle.name}
                className="file-preview-video max-h-[70vh] object-contain"
                onError={(e) => {
                  console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∏–ª—è: ${selectedStyle.filename}`);
                  e.currentTarget.src = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='200' height='200' viewBox='0 0 200 200'%3E%3Crect width='200' height='200' fill='%23f3f4f6'/%3E%3Ctext x='50%25' y='50%25' text-anchor='middle' dy='.3em' fill='%236b7280'%3E–°—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω%3C/text%3E%3C/svg%3E";
                }}
              />
            </div>
            <div className="mt-4 text-sm text-gray-300">
              <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {selectedStyle.description}</p>
              <p><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</strong> {selectedStyle.category}</p>
              <p><strong>–§–∞–π–ª:</strong> {selectedStyle.filename}</p>
              <p><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> {new Date(selectedStyle.created_at).toLocaleDateString('ru-RU', { timeZone: 'Europe/Moscow' })}</p>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –≥–æ–ª–æ—Å–∞ */}
      {showVoiceModal && selectedVoice && (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50 p-4">
          <div className="modal-content bg-gray-900 rounded-lg max-w-2xl w-full">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-xl font-semibold text-white">
                –ü—Ä–∏–º–µ—Ä –≥–æ–ª–æ—Å–∞: {selectedVoice.name}
              </h3>
              <button 
                onClick={() => setShowVoiceModal(false)}
                className="text-gray-400 hover:text-white text-2xl"
              >
                &times;
              </button>
            </div>
            <div className="flex flex-col items-center space-y-4">
              <div className="w-full">
                <audio 
                  controls 
                  className="w-full"
                  src={`/voices/${selectedVoice.filename}`}
                  onError={(e) => {
                    console.error(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞—É–¥–∏–æ: ${selectedVoice.filename}`);
                  }}
                >
                  –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ.
                </audio>
              </div>
              <div className="text-sm text-gray-300 text-center">
                <p><strong>–ü–æ–ª:</strong> {selectedVoice.gender === 'male' ? '–ú—É–∂—Å–∫–æ–π' : '–ñ–µ–Ω—Å–∫–∏–π'}</p>
                <p><strong>–°—Ç–∏–ª—å:</strong> {selectedVoice.category === 'gentle' ? '–ù–µ–∂–Ω—ã–π / —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π' :
                   selectedVoice.category === 'bright' ? '–Ø—Ä–∫–∏–π / –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π' :
                   selectedVoice.category === 'artist' ? '–ù–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∞—Ä—Ç–∏—Å—Ç–∞' :
                   selectedVoice.category || '–ù–µ —É–∫–∞–∑–∞–Ω'}</p>
                <p><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> {selectedVoice.description}</p>
                <p><strong>–§–∞–π–ª:</strong> {selectedVoice.filename}</p>
                <p><strong>–°–æ–∑–¥–∞–Ω–æ:</strong> {new Date(selectedVoice.created_at).toLocaleDateString('ru-RU', { timeZone: 'Europe/Moscow' })}</p>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∏–ª—è */}
      {showEditStyleForm && editingStyle && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-xl max-w-md w-full mx-4 max-h-[90vh] overflow-y-auto">
            <div className="flex justify-between items-center p-6 border-b">
              <h3 className="text-lg font-semibold text-gray-900">
                ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å
              </h3>
              <button 
                onClick={cancelEditStyle}
                className="text-gray-400 hover:text-gray-600 text-2xl"
              >
                &times;
              </button>
            </div>
            
            <div className="p-6">
              {addStyleError && (
                <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
                  {addStyleError}
                </div>
              )}
              
              {addStyleSuccess && (
                <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded mb-4">
                  {addStyleSuccess}
                </div>
              )}

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium mb-2 text-gray-700">
                    –ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è
                  </label>
                  <Input
                    type="text"
                    value={editingStyleData.name}
                    onChange={(e) => setEditingStyleData({ ...editingStyleData, name: e.target.value })}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è"
                    className="w-full"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-2 text-gray-700">
                    –û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è
                  </label>
                  <textarea
                    value={editingStyleData.description}
                    onChange={(e) => setEditingStyleData({ ...editingStyleData, description: e.target.value })}
                    placeholder="–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç–∏–ª—è..."
                    className="w-full border border-gray-300 rounded px-3 py-2 h-24 resize-none"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium mb-2 text-gray-700">
                    –ù–æ–≤–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                  </label>
                  <Input
                    type="file"
                    accept="image/*"
                    onChange={(e) => setEditingStyleData({ ...editingStyleData, file: e.target.files?.[0] || null })}
                    className="w-full"
                  />
                  <p className="text-sm text-gray-500 mt-1">
                    –û—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
                  </p>
                </div>
              </div>
            </div>
            
            <div className="flex space-x-3 p-6 border-t">
              <Button
                onClick={saveEditStyle}
                className="flex-1 bg-blue-600 hover:bg-blue-700 text-white"
              >
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
              </Button>
              <Button
                onClick={cancelEditStyle}
                className="flex-1 border border-gray-300 text-gray-700 hover:bg-gray-50 bg-white"
              >
                ‚ùå –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export { PhotosPage };
export default PhotosPage;