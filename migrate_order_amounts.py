#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö - –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ª—è total_amount –≤ —Ç–∞–±–ª–∏—Ü–µ orders
–¥–ª—è —É–∂–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã payments
"""

import asyncio
import aiosqlite
import json
from typing import Optional

DB_PATH = 'bookai.db'

async def migrate_order_amounts():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å—É–º–º—ã –∑–∞–∫–∞–∑–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã payments –≤ —Ç–∞–±–ª–∏—Ü—É orders"""
    
    print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å—É–º–º –∑–∞–∫–∞–∑–æ–≤...")
    
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –±–µ–∑ total_amount
        async with db.execute('''
            SELECT o.id, o.user_id, o.status, o.order_data, o.created_at
            FROM orders o
            WHERE o.status IN ('paid', 'upsell_paid', 'waiting_draft', 'draft_sent', 'editing', 'ready', 'delivered', 'completed')
            AND (o.total_amount IS NULL OR o.total_amount = 0)
            ORDER BY o.id
        ''') as cursor:
            orders = await cursor.fetchall()
        
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏")
        
        migrated_count = 0
        skipped_count = 0
        
        for order in orders:
            order_id, user_id, status, order_data_json, created_at = order
            
            try:
                # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
                order_data = json.loads(order_data_json) if order_data_json else {}
                
                # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏–∑ —Ç–∞–±–ª–∏—Ü—ã payments
                async with db.execute('''
                    SELECT amount, status as payment_status
                    FROM payments 
                    WHERE order_id = ? 
                    AND status = 'succeeded'
                    ORDER BY created_at DESC
                    LIMIT 1
                ''', (order_id,)) as cursor:
                    payment = await cursor.fetchone()
                
                if payment:
                    amount, payment_status = payment
                    print(f"‚úÖ –ó–∞–∫–∞–∑ {order_id}: –Ω–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ {amount} –∏–∑ –ø–ª–∞—Ç–µ–∂–∞")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º total_amount –≤ –∑–∞–∫–∞–∑–µ
                    await db.execute('''
                        UPDATE orders 
                        SET total_amount = ?, updated_at = datetime('now')
                        WHERE id = ?
                    ''', (amount, order_id))
                    
                    migrated_count += 1
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –ø–ª–∞—Ç–µ–∂–∞, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É–º–º—É –∏–∑ order_data
                    amount_from_data = order_data.get('amount') or order_data.get('price')
                    if amount_from_data:
                        try:
                            amount = float(amount_from_data)
                            print(f"‚úÖ –ó–∞–∫–∞–∑ {order_id}: –Ω–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ {amount} –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞")
                            
                            await db.execute('''
                                UPDATE orders 
                                SET total_amount = ?, updated_at = datetime('now')
                                WHERE id = ?
                            ''', (amount, order_id))
                            
                            migrated_count += 1
                        except (ValueError, TypeError):
                            print(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ {order_id}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Å—É–º–º—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞")
                            skipped_count += 1
                    else:
                        print(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ {order_id}: –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—É–º–º–∞ –Ω–∏ –≤ –ø–ª–∞—Ç–µ–∂–∞—Ö, –Ω–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞")
                        skipped_count += 1
                        
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
                skipped_count += 1
        
        await db.commit()
        
        print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {migrated_count}")
        print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}")
        print(f"üìä –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(orders)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        async with db.execute('''
            SELECT COUNT(*) as total_orders,
                   COUNT(CASE WHEN total_amount IS NOT NULL AND total_amount > 0 THEN 1 END) as orders_with_amount,
                   SUM(CASE WHEN total_amount IS NOT NULL AND total_amount > 0 THEN total_amount ELSE 0 END) as total_revenue
            FROM orders 
            WHERE status IN ('paid', 'upsell_paid', 'waiting_draft', 'draft_sent', 'editing', 'ready', 'delivered', 'completed')
        ''') as cursor:
            stats = await cursor.fetchone()
            
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print(f"–í—Å–µ–≥–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {stats[0]}")
        print(f"–ó–∞–∫–∞–∑–æ–≤ —Å —Å—É–º–º–æ–π: {stats[1]}")
        print(f"–û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {stats[2]:.2f} ‚ÇΩ")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        await migrate_order_amounts()
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())
