import sqlite3
import json
from datetime import datetime, timedelta

conn = sqlite3.connect('bookai.db')
cursor = conn.cursor()

# –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–∏–æ–¥ –∏–∑ –º–µ—Ç—Ä–∏–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π –∏–ª–∏ –≤—Å—ë –≤—Ä–µ–º—è)
# –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ—Å—Ç–æ –±–µ—Ä—ë–º –í–°–ï –∑–∞–∫–∞–∑—ã –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –¥–∞—Ç–µ
print("üîç –ò—â–µ–º –≤—Å–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è...\n")

PAID_STATUSES = [
    'paid', 'waiting_story_options', 'waiting_story_choice', 'story_selected', 
    'story_options_sent', 'pages_selected', 'covers_sent', 'waiting_cover_choice', 
    'cover_selected', 'waiting_draft', 'draft_sent', 'editing', 'waiting_feedback', 
    'feedback_processed', 'prefinal_sent', 'waiting_final', 'ready', 'waiting_delivery', 
    'print_delivery_pending', 'final_sent', 'delivered', 'completed', 'collecting_facts', 
    'questions_completed', 'waiting_plot_options', 'plot_selected', 'waiting_final_version',
    'upsell_payment_created', 'upsell_payment_pending', 'upsell_paid', 'additional_payment_paid'
]

placeholders = ','.join(['?' for _ in PAID_STATUSES])

# –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∑–∞–∫–∞–∑—ã
cursor.execute('SELECT COUNT(*) FROM orders')
total_orders = cursor.fetchone()[0]
print(f"üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ: {total_orders}")

cursor.execute(f'SELECT COUNT(*) FROM orders WHERE status IN ({placeholders})', PAID_STATUSES)
paid_orders = cursor.fetchone()[0]
print(f"üí∞ –û–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–ø–æ —Å—Ç–∞—Ç—É—Å—É): {paid_orders}\n")

cursor.execute(f'''
    SELECT 
        o.id, 
        o.status, 
        o.order_data, 
        o.total_amount,
        o.created_at,
        (SELECT COUNT(*) FROM event_metrics em 
         WHERE em.order_id = o.id AND em.event_type = "upsell_purchased") as is_upsell
    FROM orders o
    WHERE o.status IN ({placeholders})
    ORDER BY o.id
''', PAID_STATUSES)

rows = cursor.fetchall()
print(f'üìã –ù–∞–π–¥–µ–Ω–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {len(rows)}\n')

book_print = 0
book_electronic = 0
song = 0
upsells = 0
other = 0

for row in rows:
    order_id, status, order_data_str, total_amount, created_at, is_upsell = row
    is_upsell_flag = 'üî¥ –î–û–ü–†–û–î–ê–ñ–ê' if is_upsell > 0 else '‚úÖ –û–°–ù–û–í–ù–ê–Ø'
    
    try:
        if not order_data_str:
            print(f'#{order_id:04d} | {status:25s} | {"–ù–ï–¢ order_data":30s} | {total_amount or 0:6.0f}‚ÇΩ | ‚ö†Ô∏è  –ü–†–û–ü–£–©–ï–ù')
            continue
            
        order_data = json.loads(order_data_str)
        product = order_data.get('product', '')
        
        if not product:
            print(f'#{order_id:04d} | {status:25s} | {"–ù–ï–¢ product":30s} | {total_amount or 0:6.0f}‚ÇΩ | ‚ö†Ô∏è  –ü–†–û–ü–£–©–ï–ù')
            continue
        
        book_format = order_data.get('book_format', '')
        format_field = order_data.get('format', '')
        
        product_display = product
        
        if product == '–ö–Ω–∏–≥–∞':
            is_electronic = (
                '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è' in str(book_format) or 
                '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è' in str(format_field) or
                '—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è' in str(format_field).lower()
            )
            product_display = f'–ö–Ω–∏–≥–∞ ({"–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è" if is_electronic else "–ü–µ—á–∞—Ç–Ω–∞—è"})'
            
            if is_upsell == 0:
                if is_electronic:
                    book_electronic += 1
                else:
                    book_print += 1
        elif product == '–ü–µ—Å–Ω—è':
            if is_upsell == 0:
                song += 1
        else:
            other += 1
            product_display = f'{product} (–¥—Ä—É–≥–æ–µ)'
        
        if is_upsell > 0:
            upsells += 1
        
        amount_str = f'{total_amount:6.0f}‚ÇΩ' if total_amount else '     0‚ÇΩ'
        print(f'#{order_id:04d} | {status:25s} | {product_display:30s} | {amount_str} | {is_upsell_flag}')
    except Exception as e:
        print(f'#{order_id:04d} | {status:25s} | ERROR: {str(e)[:30]:30s} | {total_amount or 0:6.0f}‚ÇΩ | ‚ùå –û–®–ò–ë–ö–ê')

print(f'\nüìä –ò–¢–û–ì–û:')
print(f'–ö–Ω–∏–≥–∞ –ø–µ—á–∞—Ç–Ω–∞—è: {book_print}')
print(f'–ö–Ω–∏–≥–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è: {book_electronic}')
print(f'–ü–µ—Å–Ω—è: {song}')
print(f'–î—Ä—É–≥–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {other}')
print(f'–î–æ–ø—Ä–æ–¥–∞–∂–∏ (–∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –ø–æ–¥—Å—á—ë—Ç–∞): {upsells}')
print(f'\n‚úÖ –û–°–ù–û–í–ù–´–• –ü–û–ö–£–ü–û–ö: {book_print + book_electronic + song}')
print(f'   (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 30 —Å–æ–≥–ª–∞—Å–Ω–æ –º–µ—Ç—Ä–∏–∫–∞–º)')

conn.close()

