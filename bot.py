import asyncio

import json

import logging

import os

import re

from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types, F

from aiogram.filters import Command, StateFilter

from aiogram.fsm.context import FSMContext

from aiogram.fsm.state import State, StatesGroup

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.types import InputMediaPhoto, InputMediaAudio, InputMediaVideo, InputMediaDocument, FSInputFile

from aiogram.fsm.storage.memory import MemoryStorage

from db import init_db, save_user_profile, get_user_book, create_order, get_pending_outbox_tasks, update_outbox_task_status, increment_outbox_retry_count, update_order_status, add_outbox_task, get_order, get_user_active_order, update_order_data, save_selected_pages, save_main_hero_photo, save_hero_photo, save_joint_photo, save_uploaded_file, update_order_email, get_voice_styles, add_upload, update_order_field, track_event



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –æ—Ç–≤–∞–ª–æ–≤

async def track_abandonment(user_id: int, step_name: str, product_type: str = None, order_id: int = None):

    """–¢—Ä–µ–∫–∏–Ω–≥ –æ—Ç–≤–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —à–∞–≥–µ"""

    await track_event(

        user_id=user_id,

        event_type='step_abandoned',

        event_data={

            'step': step_name,

            'abandoned_at': datetime.now().isoformat()

        },

        step_name=step_name,

        product_type=product_type,

        order_id=order_id

    )



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –æ—Ç–≤–∞–ª–æ–≤ –ø—Ä–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

async def track_inactivity_abandonment(user_id: int, last_step: str, product_type: str = None, order_id: int = None):

    """–¢—Ä–µ–∫–∏–Ω–≥ –æ—Ç–≤–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑-–∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""

    await track_event(

        user_id=user_id,

        event_type='step_abandoned',

        event_data={

            'step': last_step,

            'abandoned_at': datetime.now().isoformat(),

            'reason': 'inactivity'

        },

        step_name=last_step,

        product_type=product_type,

        order_id=order_id

    )

from aiogram.utils.markdown import hcode

import aiohttp

import dotenv



# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤

async def send_file_by_type(bot: Bot, user_id: int, file_path: str, file_type: str, caption: str = None, reply_markup=None):

    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞"""

    try:

        if not os.path.exists(file_path):

            logging.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")

            return False

        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(file_path)
        file_size_mb = file_size / (1024 * 1024)
        
        # –õ–∏–º–∏—Ç—ã Telegram Bot API
        max_sizes = {
            'photo': 10 * 1024 * 1024,  # 10 –ú–ë
            'video': 50 * 1024 * 1024,  # 50 –ú–ë
            'audio': 50 * 1024 * 1024,  # 50 –ú–ë
            'document': 50 * 1024 * 1024,  # 50 –ú–ë
            'gif': 50 * 1024 * 1024,  # 50 –ú–ë
        }
        
        max_size = max_sizes.get(file_type, 50 * 1024 * 1024)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 50 –ú–ë
        
        if file_size > max_size:
            logging.error(f"‚ùå –§–∞–π–ª {file_path} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size_mb:.1f} –ú–ë (–ª–∏–º–∏—Ç –¥–ª—è {file_type}: {max_size / (1024*1024):.0f} –ú–ë)")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
            error_message = f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ ({file_size_mb:.1f} –ú–ë). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è {file_type}: {max_size / (1024*1024):.0f} –ú–ë"
            await bot.send_message(user_id, error_message)
            return False

        input_file = FSInputFile(file_path)
        
        logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é {file_type} —Ñ–∞–π–ª {file_path} ({file_size_mb:.1f} –ú–ë) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        

        if file_type == 'photo':

            await bot.send_photo(user_id, input_file, caption=caption, reply_markup=reply_markup)

            logging.info(f"üì∏ –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        elif file_type == 'audio':

            await bot.send_audio(user_id, input_file, caption=caption, reply_markup=reply_markup)

            logging.info(f"üéµ –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        elif file_type == 'video':

            await bot.send_video(user_id, input_file, caption=caption, reply_markup=reply_markup)

            logging.info(f"üé¨ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        elif file_type == 'gif':

            await bot.send_animation(user_id, input_file, caption=caption, reply_markup=reply_markup)

            logging.info(f"üé≠ GIF –∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        elif file_type in ['document', 'archive']:

            await bot.send_document(user_id, input_file, caption=caption, reply_markup=reply_markup)

            logging.info(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        else:

            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç

            await bot.send_document(user_id, input_file, caption=caption, reply_markup=reply_markup)

            logging.info(f"üìÑ –§–∞–π–ª (—Ç–∏–ø: {file_type}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        

        return True

    except Exception as e:

        error_msg = str(e)
        if "Request Entity Too Large" in error_msg or "413" in error_msg:
            logging.error(f"‚ùå –§–∞–π–ª {file_path} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Telegram Bot API")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await bot.send_message(user_id, f"‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞.")
            except:
                pass  # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_path} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –∏–∑ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤

async def create_mixed_media_group(files: list, content: str = None):

    """–°–æ–∑–¥–∞–µ—Ç –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∏–∑ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤"""

    media_group = []

    

    for i, file_info in enumerate(files):

        file_path = file_info['file_path']

        file_type = file_info['file_type']

        

        if not os.path.exists(file_path):

            logging.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")

            continue

        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        try:
            file_size = os.path.getsize(file_path)
            file_size_mb = file_size / (1024 * 1024)
            
            # –õ–∏–º–∏—Ç—ã Telegram Bot API
            max_sizes = {
                'photo': 10 * 1024 * 1024,  # 10 –ú–ë
                'video': 50 * 1024 * 1024,  # 50 –ú–ë
                'audio': 50 * 1024 * 1024,  # 50 –ú–ë
                'document': 50 * 1024 * 1024,  # 50 –ú–ë
                'gif': 50 * 1024 * 1024,  # 50 –ú–ë
            }
            
            max_size = max_sizes.get(file_type, 50 * 1024 * 1024)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 50 –ú–ë
            
            if file_size > max_size:
                logging.error(f"‚ùå –§–∞–π–ª {file_path} —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã: {file_size_mb:.1f} –ú–ë (–ª–∏–º–∏—Ç –¥–ª—è {file_type}: {max_size / (1024*1024):.0f} –ú–ë)")
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ñ–∞–π–ª
                
            logging.info(f"üì§ –î–æ–±–∞–≤–ª—è—é {file_type} —Ñ–∞–π–ª {file_path} ({file_size_mb:.1f} –ú–ë) –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É")
            
        except Exception as size_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ {file_path}: {size_error}")
            continue

        input_file = FSInputFile(file_path)

        caption = content if i == 0 else None  # –ü–æ–¥–ø–∏—Å—å —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–∞–π–ª—É

        

        if file_type == 'photo':

            media_group.append(InputMediaPhoto(media=input_file, caption=caption))

        elif file_type == 'audio':

            media_group.append(InputMediaAudio(media=input_file, caption=caption))

        elif file_type == 'video':

            media_group.append(InputMediaVideo(media=input_file, caption=caption))

        elif file_type == 'gif':

            # GIF –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—é –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ

            media_group.append(InputMediaVideo(media=input_file, caption=caption))

        else:

            # –î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –∞—Ä—Ö–∏–≤—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã

            media_group.append(InputMediaDocument(media=input_file, caption=caption))

    

    return media_group

from yookassa_integration import (

    init_payments_table, create_payment, get_payment_status, 

    get_product_price, get_product_price_async, format_payment_description, process_payment_webhook,

    update_payment_status, get_payment_by_payment_id, get_upgrade_price_difference

)

from db import aiosqlite, DB_PATH



dotenv.load_dotenv()



# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —É BotFather

API_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN', '–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê')

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
ADMIN_IDS = [int(x.strip()) for x in os.getenv('ADMIN_IDS', '').split(',') if x.strip()]



# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

print(f"üîë –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–∫–µ–Ω: {API_TOKEN}")

print(f"üìè –î–ª–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞: {len(API_TOKEN) if API_TOKEN else 0}")



logging.basicConfig(level=logging.INFO)



WELCOME_TEXT = (

    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–µ—Ä–≤–∏—Å ¬´–ö–Ω–∏–≥–∞ –æ —Ç–µ—Ö –∫—Ç–æ –¥–æ—Ä–æ–≥¬ª!\n\n"

    "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–Ω–∏–≥—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –±–ª–∏–∑–∫–∏—Ö –ª—é–¥—è—Ö. "

    "–°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–Ω–∏–≥–∏."

)



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞

bot = Bot(token=API_TOKEN)

storage = MemoryStorage()

dp = Dispatcher(storage=storage)







async def safe_edit_message(message, text: str, **kwargs):

    """

    –ë–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ. –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 

    —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —ç—Ç–æ –∞—É–¥–∏–æ/—Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

    """

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

        if hasattr(message, 'text') and message.text:

            await message.edit_text(text, **kwargs)

        else:

            # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞ (–∞—É–¥–∏–æ, —Ñ–æ—Ç–æ –∏ —Ç.–¥.), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ

            await message.answer(text, **kwargs)

    except Exception as e:

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        await message.answer(text, **kwargs)



class ProductStates(StatesGroup):

    choosing_product = State()

    product_selected = State()



class RelationStates(StatesGroup):

    choosing_relation = State()

    relation_selected = State()



class CharacterStates(StatesGroup):

    intro_text = State()

    main_photos = State()

    add_more_heroes = State()

    hero_name = State()

    hero_intro = State()

    hero_photos = State()

    done = State()

    gift_reason = State()



class CoverStates(StatesGroup):

    choosing_style = State()

    waiting_for_covers = State()

    choosing_cover = State()

    cover_selected = State()  # –û–±–ª–æ–∂–∫–∞ –≤—ã–±—Ä–∞–Ω–∞

    done = State()



class UserDataStates(StatesGroup):

    waiting_first_name = State()

    waiting_last_name = State()

    waiting_phone = State()

    waiting_email = State()

    waiting_personal_data_consent = State()







class GenderStates(StatesGroup):

    choosing_gender = State()

    gender_selected = State()



class PhotoStates(StatesGroup):

    main_face_1 = State()

    main_face_2 = State()

    main_full = State()

    hero_face_1 = State()

    hero_face_2 = State()

    hero_full = State()

    joint_photo = State()



class StoryQuestionsStates(StatesGroup):

    q1 = State()

    q2 = State()

    q3 = State()



# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

class ManagerContentStates(StatesGroup):

    waiting_demo_content = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞

    waiting_story_options = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—é–∂–µ—Ç–æ–≤

    waiting_draft = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞

    waiting_final = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏



# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ì–ª–∞–≤—ã 11 - –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è —Å—é–∂–µ—Ç–æ–≤ (–£–î–ê–õ–ï–ù–´ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)

# –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ManagerContentStates.waiting_story_options –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ-—Å—Ç—Ä–∞–Ω–∏—Ü



class AdditionsStates(StatesGroup):

    choosing_addition = State()  # –í—ã–±–æ—Ä –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è

    uploading_photos = State()  # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

    choosing_inserts = State()  # –í—ã–±–æ—Ä –≤–∫–ª–∞–¥—ã—à–µ–π

    waiting_insert_text = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤–∫–ª–∞–¥—ã—à–∞

    done = State()  # –ó–∞–≤–µ—Ä—à–µ–Ω–æ



class EditBookStates(StatesGroup):

    waiting_for_draft = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

    reviewing_draft = State()  # –ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ—Ä–Ω–æ–≤–∏–∫–∞

    adding_comments = State()  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

    done = State()  # –ó–∞–≤–µ—Ä—à–µ–Ω–æ



class DeliveryStates(StatesGroup):

    waiting_for_delivery_choice = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏

    waiting_for_address = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞

    waiting_for_recipient = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è

    waiting_for_phone = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    done = State()  # –ó–∞–≤–µ—Ä—à–µ–Ω–æ



# –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥–ª–∞–≤ 12-18

class BookFinalStates(StatesGroup):

    # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü

    choosing_pages = State()  # –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü (–≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã + –≤–∫–ª–∞–¥—ã—à–∏ –æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º)

    choosing_first_last_design = State()  # –í—ã–±–æ—Ä –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏

    entering_first_page_text = State()  # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    entering_last_page_text = State()  # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    uploading_first_last_photos = State()  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏

    uploading_custom_photos = State()  # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

    waiting_for_cover_options = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–±–ª–æ–∂–µ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

    

    # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    uploading_first_page_photo = State()  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    entering_first_page_text_after_photo = State()  # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ

    uploading_last_page_photo = State()  # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    entering_last_page_text_after_photo = State()  # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ

    

    # –ì–ª–∞–≤–∞ 14 - –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏

    waiting_for_book_draft = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

    reviewing_book_draft = State()  # –ü—Ä–æ—Å–º–æ—Ç—Ä —á–µ—Ä–Ω–æ–≤–∏–∫–∞

    adding_draft_comments = State()  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —á–µ—Ä–Ω–æ–≤–∏–∫—É

    

    # –ì–ª–∞–≤–∞ 15 - –ü–µ—Ä–µ–¥–∞—á–∞ –∫–Ω–∏–≥–∏

    waiting_for_final_book = State()  # –û–∂–∏–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏

    choosing_delivery_method = State()  # –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏

    entering_delivery_address = State()  # –í–≤–æ–¥ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏

    

    # –ì–ª–∞–≤–∞ 17 - –ê–ø—Å–µ–π–ª (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞)

    upsell_options = State()  # –ü–æ–∫–∞–∑ –∞–ø—Å–µ–π–ª –æ–ø—Ü–∏–π

    processing_upsell_payment = State()  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–ª–∞—Ç—ã

    

    # –ì–ª–∞–≤–∞ 18 - –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

    collecting_feedback = State()  # –°–±–æ—Ä –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏

    offering_song_creation = State()  # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Å–Ω–∏

    order_completed = State()  # –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω



# --- –°—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –ü–µ—Å–Ω–∏ ---



# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è –ø–µ—Å–Ω–∏

class SongGenderStates(StatesGroup):

    choosing_gender = State()

    gender_selected = State()



class SongRelationStates(StatesGroup):

    choosing_relation = State()

    waiting_recipient_name = State()

    waiting_gift_reason = State()



class SongStyleStates(StatesGroup):

    choosing_style = State()



class SongVoiceStates(StatesGroup):

    choosing_voice = State()



class SongQuizStates(StatesGroup):

    quiz_q2 = State()

    quiz_q3 = State()



class SongFactsStates(StatesGroup):

    collecting_facts = State()



class SongDraftStates(StatesGroup):

    waiting_for_demo = State()  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∞—É–¥–∏–æ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

    demo_received = State()     # –î–µ–º–æ –ø–æ–ª—É—á–µ–Ω–æ, –æ–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã

    waiting_for_draft = State()

    draft_received = State()



class SongWaitingStates(StatesGroup):

    waiting_and_warming = State()



class SongFinalStates(StatesGroup):

    waiting_for_final = State()

    final_received = State()

    collecting_feedback = State()

    collecting_final_feedback = State()



class SongDemoStates(StatesGroup):

    demo_ready = State()

    demo_received = State()



# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ —Å—Ç–∞—Ç—É—Å–∞ ---

async def update_order_progress(state: FSMContext, status: str = None):

    data = await state.get_data()

    order_id = data.get('order_id')

    if not order_id:

        return

    # –û—Å–Ω–æ–≤–Ω–æ–π –≥–µ—Ä–æ–π

    main_hero_photos = []

    if data.get('main_face_1'):

        main_hero_photos.append(data['main_face_1'])

    if data.get('main_face_2'):

        main_hero_photos.append(data['main_face_2'])

    if data.get('main_full'):

        main_hero_photos.append(data['main_full'])

    # –ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π - —ç—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å (first_name)
    main_hero_name = data.get('first_name') or "-"

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ first_name –∏ last_name

    first_name = data.get('first_name', '')

    last_name = data.get('last_name', '')

    sender_name = ""

    if first_name and first_name != 'None':

        sender_name = first_name

    if last_name and last_name != 'None':

        if sender_name:

            sender_name += f" {last_name}"

        else:

            sender_name = last_name

    

    # –û—Ç–≤–µ—Ç—ã

    answers = []

    if data.get('story_q1'):

        answers.append(data['story_q1'])

        print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç q1: {data['story_q1']}")

    if data.get('story_q2'):

        answers.append(data['story_q2'])

        print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç q2: {data['story_q2']}")

    if data.get('story_q3'):

        answers.append(data['story_q3'])

        print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç q3: {data['story_q3']}")

    

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –í—Å–µ –æ—Ç–≤–µ—Ç—ã: {answers}")

    # –î—Ä—É–≥–∏–µ –≥–µ—Ä–æ–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º name, intro, face_1, face_2, full)

    other_heroes = []

    for hero in data.get('other_heroes', []):

        other_heroes.append({

            'name': hero.get('name'),

            'intro': hero.get('intro'),

            'face_1': hero.get('face_1'),

            'face_2': hero.get('face_2'),

            'full': hero.get('full')

        })

    # –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ

    joint_photo = data.get('joint_photo')

    # –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º order_data
    current_hero_name = data.get('current_hero_name')  # –ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–≤—Ç–æ—Ä–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂)
    recipient_name_fallback = data.get('recipient_name') 
    first_name_fallback = data.get('first_name')  # –ò–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–≥–ª–∞–≤–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂)
    
    # –ü–æ–ª—É—á–∞—Ç–µ–ª—å - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: recipient_name (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è), –∑–∞—Ç–µ–º current_hero_name, –∑–∞—Ç–µ–º fallback
    final_recipient_name = recipient_name_fallback or current_hero_name or "–ü–æ–ª—É—á–∞—Ç–µ–ª—å"
    
    # –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º recipient_name –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –æ–Ω–æ –Ω–µ —Ç–µ—Ä—è–ª–æ—Å—å
    if final_recipient_name and final_recipient_name != "–ü–æ–ª—É—á–∞—Ç–µ–ª—å":
        await state.update_data(recipient_name=final_recipient_name)
        logging.info(f"üíæ –°–û–•–†–ê–ù–ï–ù–û recipient_name –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: '{final_recipient_name}'")
    
    logging.info(f"üîç –û–¢–õ–ê–î–ö–ê update_order_progress: current_hero_name='{current_hero_name}', recipient_name='{recipient_name_fallback}', first_name='{first_name_fallback}', final_recipient='{final_recipient_name}', main_hero='{main_hero_name}'")

    order_data = {

        'user_id': data.get('user_id'),

        'username': data.get('username'),

        'first_name': data.get('first_name'),

        'last_name': data.get('last_name'),

        'phone': data.get('phone'),

        'product': data.get('product'),

        'gender': data.get('gender'),

        'relation': data.get('relation'),

        'recipient_name': final_recipient_name,

        'sender_name': sender_name,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

        'main_hero_intro': data.get('main_hero_intro'),

        'gift_reason': data.get('gift_reason'),

        'style': data.get('style'),

        'main_hero_name': main_hero_name,

        'hero_name': main_hero_name,  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∞–¥–º–∏–Ω–∫–æ–π

        'main_hero_photos': main_hero_photos,

        'other_heroes': other_heroes,

        'joint_photo': joint_photo,

        'answers': answers,

        'book_format': data.get('book_format'),  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç –∫–Ω–∏–≥–∏

        'format': data.get('format')  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)

    }

    

    print(f"üîç –û–¢–õ–ê–î–ö–ê –ö–ù–ò–ì–ò: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}:")

    print(f"üìä –î–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏: {order_data}")

    

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º thread-safe —Ñ—É–Ω–∫—Ü–∏—é update_order_data –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ë–î

    await update_order_data(order_id, order_data)

    

    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    from db import save_main_hero_photo, save_hero_photo, save_joint_photo

    

    try:

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è

        if data.get('main_face_1'):

            await save_main_hero_photo(order_id, data['main_face_1'])

        if data.get('main_face_2'):

            await save_main_hero_photo(order_id, data['main_face_2'])

        if data.get('main_full'):

            await save_main_hero_photo(order_id, data['main_full'])

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è: {e}")

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å

    

    try:

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥—Ä—É–≥–∏—Ö –≥–µ—Ä–æ–µ–≤

        for hero in data.get('other_heroes', []):

            hero_name = hero.get('name', 'hero')

            if hero.get('face_1'):

                await save_hero_photo(order_id, hero['face_1'], 'face_1', hero_name)

            if hero.get('face_2'):

                await save_hero_photo(order_id, hero['face_2'], 'face_2', hero_name)

            if hero.get('full'):

                await save_hero_photo(order_id, hero['full'], 'full', hero_name)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ

        if data.get('joint_photo'):

            await save_joint_photo(order_id, data['joint_photo'])

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥—Ä—É–≥–∏—Ö –≥–µ—Ä–æ–µ–≤: {e}")

        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –¥–∞–∂–µ –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å

    

    print(f"üì∏ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å

    from db import get_order_data_debug

    saved_data = await get_order_data_debug(order_id)

    print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {saved_data}")

    

    if status:

        await update_order_status(order_id, status)



async def remove_cover_buttons_for_user(user_id: int, selected_template_id: int = None):

    """–£–±–∏—Ä–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å –¥—Ä—É–≥–∏—Ö –æ–±–ª–æ–∂–µ–∫ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–π"""

    try:

        # –ü–æ–ª—É—á–∞–µ–º message_id –æ–±–ª–æ–∂–µ–∫ –∏–∑ state –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        from aiogram.fsm.context import FSMContext

        from aiogram.fsm.storage.base import StorageKey

        

        # –°–æ–∑–¥–∞–µ–º FSMContext –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        storage_key = StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id)

        user_state = FSMContext(storage=dp.storage, key=storage_key)

        

        data = await user_state.get_data()

        cover_message_ids = data.get('cover_message_ids', [])

        

        logging.info(f"üîç –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å {len(cover_message_ids)} –æ–±–ª–æ–∂–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥—Ä—É–≥–∏—Ö –æ–±–ª–æ–∂–µ–∫

        for message_id in cover_message_ids:

            try:

                # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏

                await bot.edit_message_reply_markup(

                    chat_id=user_id,

                    message_id=message_id,

                    reply_markup=None

                )

                logging.info(f"‚úÖ –£–±—Ä–∞–Ω—ã –∫–Ω–æ–ø–∫–∏ —Å –æ–±–ª–æ–∂–∫–∏ message_id={message_id}")

            except Exception as e:

                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–±–∏—Ä–∞–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫ —Å –æ–±–ª–æ–∂–∫–∏ message_id={message_id}: {e}")

        

        # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ message_id –æ–±–ª–æ–∂–µ–∫

        await user_state.update_data(cover_message_ids=[])

        logging.info(f"‚úÖ –ö–Ω–æ–ø–∫–∏ —É–±—Ä–∞–Ω—ã —Å–æ –≤—Å–µ—Ö –æ–±–ª–æ–∂–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                

    except Exception as e:

        logging.error(f"–û—à–∏–±–∫–∞ –≤ remove_cover_buttons_for_user: {e}")



async def log_state(message, state):

    current_state = await state.get_state()

    

    # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state

    data = await state.get_data()

    state_user_id = data.get('user_id')

    logging.info(f"üîç –û–¢–õ–ê–î–ö–ê log_state: message.from_user.id={message.from_user.id}, state user_id={state_user_id}")

    if state_user_id != message.from_user.id:

        logging.error(f"‚ùå –û–¢–õ–ê–î–ö–ê log_state: –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï! message.from_user.id={message.from_user.id}, state user_id={state_user_id}")

    

    logging.info(f"User {message.from_user.id} state: {current_state}")

    if hasattr(message, 'photo') and message.photo:

        logging.info(f"User {message.from_user.id} sent a photo. File ID: {message.photo[-1].file_id}")

    elif hasattr(message, 'text'):

        logging.info(f"User {message.from_user.id} sent: {message.text}")

    elif hasattr(message, 'data'):

        logging.info(f"User {message.from_user.id} callback data: {message.data}")

    else:

        logging.info(f"User {message.from_user.id} sent unknown type: {type(message)}")



async def request_phone_number(message, state):

    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="–Ø –≥–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", callback_data="send_phone")],

        [InlineKeyboardButton(text="–ù–µ —Ö–æ—á—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–º–µ—Ä", callback_data="decline_phone")]

    ])

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –≤—Ä—É—á–Ω—É—é.", reply_markup=keyboard)

    await state.set_state(UserDataStates.waiting_phone)

    await log_state(message, state)



def parse_utm_parameters(message: types.Message) -> dict:

    """–ü–∞—Ä—Å–∏—Ç UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ startapp —Å—Å—ã–ª–∫–∏"""

    utm_params = {

        'utm_source': None,

        'utm_medium': None,

        'utm_campaign': None,
        
        'utm_content': None

    }

    

    if message.text and len(message.text.split()) > 1:

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start

        params = message.text.split()[1:]

        

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞

        full_params = ' '.join(params)

        logging.info(f"üîç –û–¢–õ–ê–î–ö–ê UTM: –ü–æ–ª–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: '{full_params}'")

        

        # –ü–∞—Ä—Å–∏–º UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        if 'utm_source=' in full_params:

            try:

                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ --, –ø–æ—Ç–æ–º –ø–æ &
                utm_source = full_params.split('utm_source=')[1].split('--')[0].split('&')[0]

                utm_params['utm_source'] = utm_source
                logging.info(f"üîç –û–¢–õ–ê–î–ö–ê UTM: utm_source = '{utm_source}'")

            except:

                pass

                

        if 'utm_medium=' in full_params:

            try:

                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ --, –ø–æ—Ç–æ–º –ø–æ &
                utm_medium = full_params.split('utm_medium=')[1].split('--')[0].split('&')[0]

                utm_params['utm_medium'] = utm_medium
                logging.info(f"üîç –û–¢–õ–ê–î–ö–ê UTM: utm_medium = '{utm_medium}'")

            except:

                pass

                

        if 'utm_campaign=' in full_params:

            try:

                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ --, –ø–æ—Ç–æ–º –ø–æ &
                utm_campaign = full_params.split('utm_campaign=')[1].split('--')[0].split('&')[0]

                utm_params['utm_campaign'] = utm_campaign
                logging.info(f"üîç –û–¢–õ–ê–î–ö–ê UTM: utm_campaign = '{utm_campaign}'")

            except:

                pass

                
        if 'utm_content=' in full_params:

            try:

                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç—å –ø–æ --, –ø–æ—Ç–æ–º –ø–æ &
                utm_content = full_params.split('utm_content=')[1].split('--')[0].split('&')[0]

                utm_params['utm_content'] = utm_content
                logging.info(f"üîç –û–¢–õ–ê–î–ö–ê UTM: utm_content = '{utm_content}'")

            except:

                pass

    

    return utm_params



def detect_source_from_message(message: types.Message) -> str:

    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ç–µ–∫—Å—Ç–µ –∫–æ–º–∞–Ω–¥—ã

    if message.text and len(message.text.split()) > 1:

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã /start

        params = message.text.split()[1:]

        

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã

        for param in params:

            param_lower = param.lower()

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

            if any(keyword in param_lower for keyword in ['landing', '–ª–µ–Ω–¥–∏–Ω–≥', 'site', '—Å–∞–π—Ç']):

                return '–õ–µ–Ω–¥–∏–Ω–≥'

            elif any(keyword in param_lower for keyword in ['ads', '—Ä–µ–∫–ª–∞–º–∞', 'ad', 'yandex', 'google', 'vk', 'facebook', 'instagram']):

                return '–†–µ–∫–ª–∞–º–∞'

            elif any(keyword in param_lower for keyword in ['channel', '–∫–∞–Ω–∞–ª', 'telegram', 'tg']):

                return 'Telegram-–∫–∞–Ω–∞–ª'

            elif any(keyword in param_lower for keyword in ['organic', '–æ—Ä–≥–∞–Ω–∏–∫–∞', 'search', '–ø–æ–∏—Å–∫']):

                return '–û—Ä–≥–∞–Ω–∏–∫–∞'

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã

            if 'utm_source=' in param_lower:

                source_value = param_lower.split('utm_source=')[1].split('&')[0]

                if 'landing' in source_value or '–ª–µ–Ω–¥–∏–Ω–≥' in source_value:

                    return '–õ–µ–Ω–¥–∏–Ω–≥'

                elif 'ads' in source_value or '—Ä–µ–∫–ª–∞–º–∞' in source_value:

                    return '–†–µ–∫–ª–∞–º–∞'

                elif 'channel' in source_value or '–∫–∞–Ω–∞–ª' in source_value:

                    return 'Telegram-–∫–∞–Ω–∞–ª'

                elif 'organic' in source_value or '–æ—Ä–≥–∞–Ω–∏–∫–∞' in source_value:

                    return '–û—Ä–≥–∞–Ω–∏–∫–∞'

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ –∫–∞–Ω–∞–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–æ—Ä–≤–∞—Ä–¥–µ)

    if message.forward_from_chat:

        return 'Telegram-–∫–∞–Ω–∞–ª'

    

    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–º —Ç—Ä–∞—Ñ–∏–∫–æ–º

    return '–û—Ä–≥–∞–Ω–∏–∫–∞'



@dp.message(Command("start"))

async def send_welcome(message: types.Message, state: FSMContext):
    
    logging.info(f"üöÄ –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    logging.info(f"üöÄ –û–¢–õ–ê–î–ö–ê: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: '{message.text}'")
    logging.info(f"üöÄ –û–¢–õ–ê–î–ö–ê: –ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
    
    user = message.from_user

    user_data = {

        "user_id": user.id,

        "username": user.username,

        "first_name": user.first_name,

        "last_name": user.last_name

    }

    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_data}")



    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã

    source = detect_source_from_message(message)

    utm_params = parse_utm_parameters(message)

    logging.info(f"üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {source}")

    logging.info(f"üîç UTM-–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {utm_params}")



    # –¢—Ä–µ–∫–∏–Ω–≥: –≤—Ö–æ–¥ –≤ –±–æ—Ç–∞

    await track_event(

        user_id=user.id,

        event_type='bot_entry',

        event_data={

            'username': user.username,

            'first_name': user.first_name,

            'last_name': user.last_name,

            'source': source,

            'utm_source': utm_params['utm_source'],

            'utm_medium': utm_params['utm_medium'],

            'utm_campaign': utm_params['utm_campaign']

        },

        source=source,

        utm_source=utm_params['utm_source'],

        utm_medium=utm_params['utm_medium'],

        utm_campaign=utm_params['utm_campaign']

    )



    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await state.clear()

    logging.info(f"üßπ –û—á–∏—â–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")



    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await state.update_data(

        user_id=user.id, 

        username=user.username,  # Username –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∏–∑ Telegram

        # first_name –∏ last_name –ù–ï –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é

        consent_given=True,  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–∞–µ–º —Å–æ–≥–ª–∞—Å–∏–µ

        source=source,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫

        utm_source=utm_params['utm_source'],

        utm_medium=utm_params['utm_medium'],

        utm_campaign=utm_params['utm_campaign']

    )

    

    # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –≤ state

    debug_data = await state.get_data()

    logging.info(f"üîç –û–¢–õ–ê–î–ö–ê /start: –°–æ—Ö—Ä–∞–Ω–∏–ª–∏ –≤ state user_id={debug_data.get('user_id')}, username={debug_data.get('username')}")

    logging.info(f"üîç –û–¢–õ–ê–î–ö–ê /start: message.from_user.id={user.id}, message.from_user.username={user.username}")

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    user_data = {

        "user_id": user.id,

        "username": user.username,  # Username –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∏–∑ Telegram

        # first_name –∏ last_name –ù–ï –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

        "first_name": None,

        "last_name": None

    }

    await save_user_profile(user_data, None)

    

    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    await show_welcome_message(message, state)





# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

async def get_order_summary_data(order_id: int, state: FSMContext = None) -> dict:

    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏"""

    from db import get_order_data_debug

    order_data = await get_order_data_debug(order_id)

    order_data['order_id'] = order_id  # –î–æ–±–∞–≤–ª—è–µ–º ID –∑–∞–∫–∞–∑–∞

    

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω state, –¥–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ state (–æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏)

    if state:

        state_data = await state.get_data()

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ, –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É state

        order_data.update(state_data)

        

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ state, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å

        if 'first_page_text' in state_data:

            order_data['first_page_text'] = state_data['first_page_text']

        if 'last_page_text' in state_data:

            order_data['last_page_text'] = state_data['last_page_text']

    

    return order_data



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞

async def format_order_summary(data: dict, product_type: str) -> str:

    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

    print(f"üîç –û–¢–õ–ê–î–ö–ê –°–í–û–î–ö–ò –ó–ê–ö–ê–ó–ê: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ: {data}")

    print(f"üîç –û–¢–õ–ê–î–ö–ê –°–í–û–î–ö–ò –ó–ê–ö–ê–ó–ê: –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞: {product_type}")

    

    summary = f"üìã <b>–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞ ({product_type}):</b>\n\n"

    

    if product_type == "–ö–Ω–∏–≥–∞":

        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–∏–≥–∏

        summary += f"üë§ <b>–ü–æ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:</b> {data.get('gender', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

        summary += f"üìù <b>–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:</b> {data.get('recipient_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

        summary += f"üéØ <b>–ü–æ–≤–æ–¥:</b> {data.get('gift_reason', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–≤–æ–¥–∫–µ
        relation = data.get('relation', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        gender = data.get('gender', '')
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –ø–æ–ª–∞
        if relation != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –≤ get_questions_for_relation
            def get_mapped_relation_for_summary(relation, gender):
                if relation == "–ü–æ–¥—Ä—É–≥–µ":
                    return "–ü–æ–¥—Ä—É–≥–∞ - –ø–æ–¥—Ä—É–≥–µ"
                elif relation == "–î–µ–≤—É—à–∫–µ":
                    if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                        return "–ü–∞—Ä–µ–Ω—å - –¥–µ–≤—É—à–∫–µ"
                    else:
                        return "–î–µ–≤—É—à–∫–∞ - –ø–∞—Ä–Ω—é"
                elif relation == "–ü–∞—Ä–Ω—é":
                    if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                        return "–ü–∞—Ä–µ–Ω—å - –¥–µ–≤—É—à–∫–µ"
                    else:
                        return "–î–µ–≤—É—à–∫–∞ - –ø–∞—Ä–Ω—é"
                elif relation == "–ú–∞–º–µ":
                    if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                        return "–°—ã–Ω ‚Äì –º–∞–º–µ"
                    else:
                        return "–î–æ—á–∫–∞- –º–∞–º–µ"
                elif relation == "–ü–∞–ø–µ":
                    if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                        return "–°—ã–Ω ‚Äì –ø–∞–ø–µ"
                    else:
                        return "–î–æ—á–∫–∞- –ø–∞–ø–µ"
                elif relation == "–ë–∞–±—É—à–∫–µ":
                    # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                        return "–í–Ω—É–∫ - –±–∞–±—É—à–∫–µ"
                    else:
                        return "–í–Ω—É—á–∫–∞ - –±–∞–±—É—à–∫–µ"
                elif relation == "–î–µ–¥—É—à–∫–µ":
                    # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                        return "–í–Ω—É–∫ - –¥–µ–¥—É—à–∫–µ"
                    else:
                        return "–í–Ω—É—á–∫–∞ - –¥–µ–¥—É—à–∫–µ"
                elif relation == "–°–µ—Å—Ç—Ä–µ":
                    if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                        return "–ë—Ä–∞—Ç ‚Äì —Å–µ—Å—Ç—Ä–µ"
                    else:
                        return "–°–µ—Å—Ç—Ä–∞ - —Å–µ—Å—Ç—Ä–µ"
                elif relation == "–ë—Ä–∞—Ç—É":
                    if gender == "–¥–µ–≤—É—à–∫–∞":
                        return "–°–µ—Å—Ç—Ä–∞ - –±—Ä–∞—Ç—É"
                    else:
                        return "–ë—Ä–∞—Ç - –±—Ä–∞—Ç—É"
                elif relation == "–°—ã–Ω—É":
                    return "–ú–∞–º–∞ - —Å—ã–Ω—É"
                elif relation == "–î–æ—á–∫–µ" or relation == "–î–æ—á–µ—Ä–∏":
                    return "–ú–∞–º–∞ - –¥–æ—á–∫–µ"
                elif relation == "–ú—É–∂—É":
                    return "–ñ–µ–Ω–∞ - –º—É–∂—É"
                elif relation == "–ñ–µ–Ω–µ":
                    return "–ú—É–∂ - –∂–µ–Ω–µ"
                else:
                    return relation
            
            relation = get_mapped_relation_for_summary(relation, gender)

        summary += f"üíù <b>–û—Ç–Ω–æ—à–µ–Ω–∏–µ:</b> {relation}\n"

        summary += f"üé® <b>–°—Ç–∏–ª—å:</b> {data.get('style', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

        summary += f"üìñ <b>–§–æ—Ä–º–∞—Ç:</b> {data.get('format', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

        summary += f"üë§ <b>–û—Ç –∫–æ–≥–æ:</b> {data.get('sender_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

        

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

        if data.get('additional_info'):

            summary += f"üìù <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b> {data.get('additional_info', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

        

    elif product_type == "–ü–µ—Å–Ω—è":

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Å–Ω–∏

        summary = "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—åüôèüèª\n"

        summary += "–ú—ã –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è —Ç–µ–±—è —Å–∞–º—ã–π —Ç—ë–ø–ª—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"

        summary += "‚ú® –ê–≤—Ç–æ—Ä—Å–∫–∞—è –ø–µ—Å–Ω—è –ø–æ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 3 –º–∏–Ω—É—Ç—ã —Å —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –æ—Ç —Ç–µ–±—è –∑–∞ 2900 —Ä—É–±–ª–µ–π.\n\n"

        summary += "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –º—É–∑—ã–∫–∞, –∞ –ø–æ–¥–∞—Ä–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–∂–∏–≤–∞—é—Ç —Ç–≤–æ–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏ —á—É–≤—Å—Ç–≤–∞.\n"

        summary += "–û–Ω –ø–µ—Ä–µ–¥–∞—Å—Ç —Ç–æ, —á—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å - –∏—Å–∫—Ä–µ–Ω–Ω—é—é –ª—é–±–æ–≤—å‚ù§Ô∏è\n"

        summary += "–¢–∞–∫–∞—è –ø–µ—Å–Ω—è —Ç—Ä–æ–Ω–µ—Ç –¥–æ –º—É—Ä–∞—à–µ–∫ –∏ —Å—Ç–∞–Ω–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"

        summary += "–ú—ã –±–µ—Ä–µ–∂–Ω–æ —Å–æ–±–µ—Ä—ë–º —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –∏—Ö –≤ —Ç—ë–ø–ª—ã–π —Ç–µ–∫—Å—Ç.\n"

        summary += "–î–∞–ª–µ–µ –º—ã –¥–æ–±–∞–≤–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∞—Ä–∞–Ω–∂–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –ø–µ—Å–Ω—è –∑–≤—É—á–∞–ª–∞ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ –≤–∞—Å üé∂\n"

        summary += "–ò –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–±–µ –≤–µ—Ä—Å–∏—é –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –ø–æ–ø–∞–ª–æ \"–í —Å–∞–º–æ–µ —Å–µ—Ä–¥—Ü–µ\"‚ù§Ô∏è"

        

        return summary

    

    # –û–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ

    summary += f"üÜî <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> #{data.get('order_id', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"

    

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–º—è+—Ñ–∞–º–∏–ª–∏—é (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º username –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)

    first_name = data.get('first_name')

    last_name = data.get('last_name')

    

    # –£–±–∏—Ä–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

    name_parts = []

    if first_name and first_name != 'None':

        name_parts.append(first_name)

    if last_name and last_name != 'None':

        name_parts.append(last_name)

    

    if name_parts:

        full_name = ' '.join(name_parts)

        summary += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {full_name}\n"

    else:

        summary += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> –ù–µ —É–∫–∞–∑–∞–Ω\n"

    

    return summary





async def check_and_request_user_name(message, state, next_action="welcome"):

    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"""

    data = await state.get_data()

    first_name = data.get('first_name')

    

    # –ï—Å–ª–∏ –Ω–µ—Ç –∏–º–µ–Ω–∏ - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è

    if not first_name:

        await message.answer("–ü–æ–¥–µ–ª–∏—Å—å, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç üíå –ù–∞–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ–±—ã –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –ª–∏—á–Ω–æ")

        await state.set_state(UserDataStates.waiting_first_name)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏

        await state.update_data(after_name_input=next_action)

        return False  # –ò–º—è –µ—â–µ –Ω–µ –≤–≤–µ–¥–µ–Ω–æ

    else:

        return True  # –ò–º—è —É–∂–µ –µ—Å—Ç—å



async def start_book_creation_flow(callback_or_message, state):

    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–∏–≥–∏"""

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å

    data = await state.get_data()

    

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback –∏–ª–∏ message

    if hasattr(callback_or_message, 'message'):

        # –≠—Ç–æ callback

        user_id = callback_or_message.from_user.id

        message = callback_or_message.message

    else:

        # –≠—Ç–æ message

        user_id = callback_or_message.from_user.id

        message = callback_or_message

    

    product = "–ö–Ω–∏–≥–∞"

    

    # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ

    logging.info(f"üîç –û–¢–õ–ê–î–ö–ê start_book_creation_flow: user_id={user_id}, state user_id={data.get('user_id')}")

    logging.info(f"üîç –û–¢–õ–ê–î–ö–ê start_book_creation_flow: message.chat.id={message.chat.id}")

    

    await state.update_data(product=product)

    

    # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    from db import get_last_order_username

    last_username = await get_last_order_username(user_id)

    

    order_data = {

        "product": product,

        "user_id": user_id,

        "username": last_username or data.get('username') or message.from_user.username,

        "first_name": data.get('first_name'),

        "last_name": data.get('last_name'),
        
        # –î–æ–±–∞–≤–ª—è–µ–º UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        "source": data.get('source'),
        "utm_source": data.get('utm_source'),
        "utm_medium": data.get('utm_medium'),
        "utm_campaign": data.get('utm_campaign')

    }

    order_id = await create_order(user_id, order_data)

    await state.update_data(order_id=order_id)

    await update_order_status(order_id, "product_selected")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    from db import create_or_update_user_timer
    await create_or_update_user_timer(user_id, order_id, "product_selected", product)
    logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {product}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∑–∞–∫–∞–∑ {order_id}")

    

    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ä–∞–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

    from db import transfer_early_messages_to_order

    await transfer_early_messages_to_order(user_id, order_id)

    

    # –¢—Ä–µ–∫–∏–Ω–≥: —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞

    source = data.get('source', '–û—Ä–≥–∞–Ω–∏–∫–∞')

    await track_event(

        user_id=user_id,

        event_type='order_created',

        event_data={

            'product': '–ö–Ω–∏–≥–∞',

            'username': last_username or data.get('username') or message.from_user.username

        },

        product_type='–ö–Ω–∏–≥–∞',

        order_id=order_id,

        source=source

    )

    

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–∞—Ä–¥–∫–æ–¥ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –≤—ã–±–æ—Ä–µ –ø–æ–ª–∞

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π üë©üèº", callback_data="gender_female")],

        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π üßëüèº", callback_data="gender_male")],

    ])

    await message.answer(

        "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä ‚ú®\n–ú—ã –ø–æ–∑–∞–±–æ—Ç–∏–º—Å—è –æ —Ç–æ–º, —á—Ç–æ–±—ã —Ç–≤–æ—è –∫–Ω–∏–≥–∞ –ø–æ–ª—É—á–∏–ª–∞—Å—å –¥—É—à–µ–≤–Ω–æ–π –∏ –±–µ—Ä–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –º—ã –Ω–∞—á–Ω—ë–º —Å–æ–±–∏—Ä–∞—Ç—å —Ç–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é üìñ\n\nüë§ –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",

        reply_markup=keyboard

    )

    await state.set_state(GenderStates.choosing_gender)



async def start_song_creation_flow(callback_or_message, state):

    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Å–Ω–∏"""

    # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å

    data = await state.get_data()

    

    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback –∏–ª–∏ message

    if hasattr(callback_or_message, 'message'):

        # –≠—Ç–æ callback

        user_id = callback_or_message.from_user.id

        message = callback_or_message.message

    else:

        # –≠—Ç–æ message

        user_id = callback_or_message.from_user.id

        message = callback_or_message

    

    product = "–ü–µ—Å–Ω—è"

    

    await state.update_data(product=product)

    

    # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    from db import get_last_order_username

    last_username = await get_last_order_username(user_id)

    

    order_data = {

        "product": product,

        "user_id": user_id,

        "username": last_username or data.get('username') or message.from_user.username,

        "first_name": data.get('first_name'),

        "last_name": data.get('last_name'),
        
        # –î–æ–±–∞–≤–ª—è–µ–º UTM –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        "source": data.get('source'),
        "utm_source": data.get('utm_source'),
        "utm_medium": data.get('utm_medium'),
        "utm_campaign": data.get('utm_campaign')

    }

    order_id = await create_order(user_id, order_data)

    await state.update_data(order_id=order_id)

    await update_order_status(order_id, "product_selected")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    from db import create_or_update_user_timer
    await create_or_update_user_timer(user_id, order_id, "product_selected", product)
    logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {product}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∑–∞–∫–∞–∑ {order_id}")

    

    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º —Ä–∞–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

    from db import transfer_early_messages_to_order

    await transfer_early_messages_to_order(user_id, order_id)

    

    # –¢—Ä–µ–∫–∏–Ω–≥: —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞

    source = data.get('source', '–û—Ä–≥–∞–Ω–∏–∫–∞')

    await track_event(

        user_id=user_id,

        event_type='order_created',

        event_data={

            'product': '–ü–µ—Å–Ω—è',

            'username': last_username or data.get('username') or message.from_user.username

        },

        product_type='–ü–µ—Å–Ω—è',

        order_id=order_id,

        source=source

    )

    

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π üë©üèº", callback_data="song_gender_female")],

        [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π üßëüèº", callback_data="song_gender_male")],

    ])

    await message.answer(

        "–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–∞‚ú®\n–ú—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ, —á—Ç–æ–±—ã —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—É—á–∏–ª—Å—è —Ç—ë–ø–ª—ã–º –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º ü´∂üèª\n\n–û—Ç–≤–µ—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —Ç–≤–æ—è –ø–µ—Å–Ω—è –ø–æ–ø–∞–ª–∞ –≤ —Å–∞–º–æ–µ —Å–µ—Ä–¥—Ü–µ \n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",

        reply_markup=keyboard

    )

    await state.set_state(SongGenderStates.choosing_gender)



async def show_welcome_message(message, state):

    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    try:

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ state

        data = await state.get_data()

        user_id = data.get('user_id')

        

        # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state

        logging.info(f"üîç –û–¢–õ–ê–î–ö–ê show_welcome_message: state user_id={user_id}")

        logging.info(f"üîç –û–¢–õ–ê–î–ö–ê show_welcome_message: message.from_user.id={message.from_user.id}")

        logging.info(f"üîç –û–¢–õ–ê–î–ö–ê show_welcome_message: message.from_user.username={message.from_user.username}")

        logging.info(f"üîç –û–¢–õ–ê–î–ö–ê show_welcome_message: –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ state={data}")

        

        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        from bot_messages_cache import get_welcome_message, get_message_content

        WELCOME_TEXT = await get_welcome_message()

        

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–æ–∫ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        book_text = await get_message_content("product_book", "–ü—Ä–æ–±–Ω–∞—è –∫–Ω–∏–≥–∞ üìï")

        song_text = await get_message_content("product_song", "–ü—Ä–æ–±–Ω–∞—è –ø–µ—Å–Ω—è üé∂")

        

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text=book_text, callback_data="product_book")],

            [InlineKeyboardButton(text=song_text, callback_data="product_song")]

        ])

        

        logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

        logging.info(f"üîç –û–¢–õ–ê–î–ö–ê: message.chat.id={message.chat.id}, message.from_user.id={message.from_user.id}")

        await message.answer(WELCOME_TEXT, reply_markup=keyboard)

        

        # –¢—Ä–µ–∫–∏–Ω–≥: –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç"

        data = await state.get_data()

        source = data.get('source', '–û—Ä–≥–∞–Ω–∏–∫–∞')

        await track_event(

            user_id=message.from_user.id,

            event_type='start_clicked',

            event_data={

                'username': message.from_user.username,

                'first_name': message.from_user.first_name

            },

            source=source

        )

        

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞

        await state.set_state(ProductStates.choosing_product)

        

        # –ù–ï –æ—á–∏—â–∞–µ–º state, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        logging.info(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

        await log_state(message, state)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ show_welcome_message: {e}")

        import traceback

        logging.error(f"‚ùå Traceback: {traceback.format_exc()}")

        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

        try:

            WELCOME_TEXT = (

                "üëã –ü—Ä–∏–≤–µ—Ç!\n\n"

                "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–Ω–∏–≥—É –∏–ª–∏ –ø–µ—Å–Ω—é —Å —Ç–≤–æ–∏–º –≥–æ–ª–æ—Å–æ–º, –ª–∏—Ü–æ–º –∏ —Ç–µ–ø–ª–æ–º ‚Äî –¥–ª—è –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.\n\n"

                "–≠—Ç–æ –±—É–¥–µ—Ç –∏—Å—Ç–æ—Ä–∏—è –∏–ª–∏ –º–µ–ª–æ–¥–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã ‚Äî –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π.\n\n"

                "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?\n\n"

                "–ù–∞–ø–∏—à–∏—Ç–µ '–ö–Ω–∏–≥–∞' –∏–ª–∏ '–ü–µ—Å–Ω—è' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."

            )

            await message.answer(WELCOME_TEXT)

            await state.set_state(ProductStates.choosing_product)

        except Exception as e2:

            logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e2}")

            try:

                await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞?")

            except:

                logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–∂–µ –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

        await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏

@dp.message(StateFilter(UserDataStates.waiting_first_name))

async def process_first_name(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await save_user_message_to_history(message, state, "–ò–º—è: ")

    await state.update_data(first_name=message.text)

    data = await state.get_data()

    

    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ (–Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ñ–∞–º–∏–ª–∏—é)

    after_action = data.get('after_name_input', 'welcome')

    if after_action == 'welcome':

        await show_welcome_message(message, state)

    elif after_action == 'book':

        await start_book_creation_flow(message, state)

    elif after_action == 'song':

        await start_song_creation_flow(message, state)

    elif after_action == 'book_relation':

        # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –∫–Ω–∏–≥–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Å–≤—è–∑–∏

        gender = data.get('gender')

        if gender:

            await show_relation_choice_after_name(message, state, gender)

        else:

            await show_welcome_message(message, state)

    elif after_action == 'song_relation':

        # –ü–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –¥–ª—è –ø–µ—Å–Ω–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è

        gender = data.get('song_gender')

        if gender:

            await show_song_relation_choice_after_name(message, state, gender)

        else:

            await show_welcome_message(message, state)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–º–∏–ª–∏–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º)

@dp.message(StateFilter(UserDataStates.waiting_last_name))

async def process_last_name(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await save_user_message_to_history(message, state, "–§–∞–º–∏–ª–∏—è: ")

    await state.update_data(last_name=message.text)

    data = await state.get_data()

    

    # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ —Ñ–∞–º–∏–ª–∏–∏

    after_action = data.get('after_name_input', 'welcome')

    if after_action == 'welcome':

        await show_welcome_message(message, state)

    elif after_action == 'book':

        await start_book_creation_flow(message, state)

    elif after_action == 'song':

        await start_song_creation_flow(message, state)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç

@dp.message(StateFilter(UserDataStates.waiting_phone), F.contact)

async def process_phone_contact(message: types.Message, state: FSMContext):

    phone = message.contact.phone_number

    await state.update_data(phone=phone)

    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await save_user_profile(data, None)

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    await message.answer("–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=types.ReplyKeyboardRemove())

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—é –∏ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–∞

    await show_welcome_message(message, state)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ —Ä—É—á–Ω–æ–º –≤–≤–æ–¥–µ

@dp.message(StateFilter(UserDataStates.waiting_phone))

async def process_phone_manual(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await save_user_message_to_history(message, state, "–¢–µ–ª–µ—Ñ–æ–Ω: ")

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    phone = message.text.strip()

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ –∑–Ω–∞–∫ +

    if not re.match(r'^\+?[\d\s\(\)\-]+$', phone):

        await message.answer(

            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!</b>\n\n"

            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"

            "‚Ä¢ +dytc (999) 123-45-67\n"

            "‚Ä¢ 89991234567\n"

            "‚Ä¢ 9991234567\n\n"

            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º'",

            parse_mode="HTML"

        )

        return

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä)

    digits_only = re.sub(r'[^\d]', '', phone)

    if len(digits_only) < 10:

        await message.answer(

            "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 11 —Ü–∏—Ñ—Ä.\n"

            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üíå",

            parse_mode="HTML"

        )

        return

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É (–Ω–µ –±–æ–ª–µ–µ 15 —Ü–∏—Ñ—Ä)

    if len(digits_only) > 15:

        await message.answer(

            "‚ùå <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!</b>\n\n"

            "–ù–æ–º–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 15 —Ü–∏—Ñ—Ä.\n"

            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",

            parse_mode="HTML"

        )

        return

    

    await state.update_data(phone=phone)

    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await save_user_profile(data, None)

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    await message.answer("–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", reply_markup=types.ReplyKeyboardRemove())

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—é –∏ –≤—ã–±–æ—Ä—É –ø—Ä–æ–¥—É–∫—Ç–∞

    await show_welcome_message(message, state)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ email

@dp.message(StateFilter(UserDataStates.waiting_email))

async def process_email(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await save_user_message_to_history(message, state, "Email: ")

    try:

        email = message.text.strip()

        

        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email

        if '@' not in email or '.' not in email:

            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.")

            return

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º email –≤ state

        await state.update_data(email=email)

        

        # –ü–æ–ª—É—á–∞–µ–º order_id –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É

        data = await state.get_data()

        order_id = data.get('order_id')

        

        if order_id:

            await update_order_email(order_id, email)

        

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞

        product = data.get('product', '–ö–Ω–∏–≥–∞')

        

        # Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É

        if product == "–ü–µ—Å–Ω—è":

            await message.answer("‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–π –ø–µ—Å–Ω–∏.")

            

            # –î–ª—è –ø–µ—Å–Ω–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∞–Ω–∫–µ—Ç–µ

            await state.set_state(SongFactsStates.collecting_facts)

            await update_order_status(order_id, "collecting_facts")

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ "collecting_facts"
            from db import create_or_update_user_timer, get_order
            user_id = message.from_user.id
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            order = await get_order(order_id)
            if order and order.get('order_data'):
                import json
                order_data = order['order_data']
                if isinstance(order_data, str):
                    order_data = json.loads(order_data)
                product_type = order_data.get('product', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            else:
                product_type = data.get('product', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            
            await create_or_update_user_timer(user_id, order_id, "collecting_facts", product_type)
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ collecting_facts, –ø—Ä–æ–¥—É–∫—Ç {product_type}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∑–∞–∫–∞–∑ {order_id}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ "answering_questions" (–æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ collecting_facts)
            await create_or_update_user_timer(user_id, order_id, "answering_questions", product_type)
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ answering_questions, –ø—Ä–æ–¥—É–∫—Ç {product_type}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∑–∞–∫–∞–∑ {order_id}")

            # –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã
            try:
                from db import add_delayed_message
                
                # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
                if product_type == "–ü–µ—Å–Ω—è":
                    # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø–µ—Å–Ω–∏
                    await add_delayed_message(
                        order_id=order_id,
                        user_id=user_id,
                        message_type="song_filling_reminder_20m",
                        content="–ü—Ä–∏–≤–µ—Ç! ‚ú® –í–∏–∂—É, –∞–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–æ –∫–æ–Ω—Ü–∞, –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–±—è —á—Ç–æ-—Ç–æ –æ—Ç–≤–ª–µ–∫–ª–æ. –¢–∞–∫ –±—ã–≤–∞–µ—Ç - –∂–∏–∑–Ω—å –ø–æ–ª–Ω–∞ –¥–µ–ª –∏ –∑–∞–±–æ—Ç. –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –∂–¥–µ—Ç, –∫–æ–≥–¥–∞ —Ç—ã –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –µ—ë —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å. –í—Å–µ–≥–æ –ø–∞—Ä–∞ –º–∏–Ω—É—Ç, –∏ –º—ã —Å–º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –æ—Å–æ–±–µ–Ω–Ω–æ–µ. –í–µ–¥—å —Ü–µ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∂–∏–∑–Ω–∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –¥–≤–∞–∂–¥—ã üíï",
                        delay_minutes=20,
                        order_step="song_collecting_facts"
                    )
                    
                    await add_delayed_message(
                        order_id=order_id,
                        user_id=user_id,
                        message_type="song_filling_reminder_1h",
                        content="–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–∞",
                        delay_minutes=60,
                        order_step="song_collecting_facts"
                    )
                    
                    await add_delayed_message(
                        order_id=order_id,
                        user_id=user_id,
                        message_type="song_filling_reminder_2h",
                        content="–ö–∞–∂–¥–∞—è –∏—Å—Ç–æ—Ä–∏—è –ª—é–±–≤–∏ —É–Ω–∏–∫–∞–ª—å–Ω–∞ üíï –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è —Å —ç—Ç–∏–º –æ—Å–æ–±–µ–Ω–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º –±–æ–ª—å—à–µ –Ω–∏ —É –∫–æ–≥–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è. –≠—Ç–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –º–æ–º–µ–Ω—Ç—ã, —á—É–≤—Å—Ç–≤–∞ - –æ–Ω–∏ –±–µ—Å—Ü–µ–Ω–Ω—ã.",
                        delay_minutes=120,
                        order_step="song_collecting_facts"
                    )
                    
                    await add_delayed_message(
                        order_id=order_id,
                        user_id=user_id,
                        message_type="song_filling_reminder_4h",
                        content="–í—Ä–µ–º—è –ª–µ—Ç–∏—Ç, –∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞. –ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ –¥–ª—è —Ç–æ–≥–æ, –∫—Ç–æ –¥–æ—Ä–æ–≥ —Ç–≤–æ–µ–º—É —Å–µ—Ä–¥—Ü—É.",
                        delay_minutes=240,
                        order_step="song_collecting_facts"
                    )
                    
                    await add_delayed_message(
                        order_id=order_id,
                        user_id=user_id,
                        message_type="song_filling_reminder_8h",
                        content="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∞—Ä–æ–∫, —ç—Ç–æ —á–∞—Å—Ç–∏—á–∫–∞ —Ç–≤–æ–µ–π –¥—É—à–∏, –ø–æ–¥–∞—Ä–µ–Ω–Ω–∞—è —Ç–æ–º—É, –∫–æ–≥–æ —Ç—ã –ª—é–±–∏—à—å.",
                        delay_minutes=480,
                        order_step="song_collecting_facts"
                    )
                elif product_type == "–ö–Ω–∏–≥–∞":
                    # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –∫–Ω–∏–≥–∏
                    await add_delayed_message(
                        order_id=order_id,
                        user_id=user_id,
                        message_type="book_filling_reminder_20m",
                        content="–ü—Ä–∏–≤–µ—Ç! ‚ú® –í–∏–∂—É, –∞–Ω–∫–µ—Ç–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –¥–æ –∫–æ–Ω—Ü–∞, –≤–æ–∑–º–æ–∂–Ω–æ, —Ç–µ–±—è —á—Ç–æ-—Ç–æ –æ—Ç–≤–ª–µ–∫–ª–æ. –¢–∞–∫ –±—ã–≤–∞–µ—Ç - –∂–∏–∑–Ω—å –ø–æ–ª–Ω–∞ –¥–µ–ª –∏ –∑–∞–±–æ—Ç. –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –∂–¥–µ—Ç, –∫–æ–≥–¥–∞ —Ç—ã –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤ –µ—ë —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å. –í—Å–µ–≥–æ –ø–∞—Ä–∞ –º–∏–Ω—É—Ç, –∏ –º—ã —Å–º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –æ—Å–æ–±–µ–Ω–Ω–æ–µ. –í–µ–¥—å —Ü–µ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∂–∏–∑–Ω–∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—Ç—Å—è –¥–≤–∞–∂–¥—ã üíï",
                        delay_minutes=20,
                        order_step="book_collecting_facts"
                    )
                    
                    await add_delayed_message(
                        order_id=order_id,
                        user_id=user_id,
                        message_type="book_filling_reminder_1h",
                        content="–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–∞",
                        delay_minutes=60,
                        order_step="book_collecting_facts"
                    )
                    
                    await add_delayed_message(
                        order_id=order_id,
                        user_id=user_id,
                        message_type="book_filling_reminder_2h",
                        content="–ö–∞–∂–¥–∞—è –∏—Å—Ç–æ—Ä–∏—è –ª—é–±–≤–∏ —É–Ω–∏–∫–∞–ª—å–Ω–∞ üíï –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è —Å —ç—Ç–∏–º –æ—Å–æ–±–µ–Ω–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º –±–æ–ª—å—à–µ –Ω–∏ —É –∫–æ–≥–æ –Ω–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—Å—è. –≠—Ç–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –º–æ–º–µ–Ω—Ç—ã, —á—É–≤—Å—Ç–≤–∞ - –æ–Ω–∏ –±–µ—Å—Ü–µ–Ω–Ω—ã.",
                        delay_minutes=120,
                        order_step="book_collecting_facts"
                    )
                    
                    await add_delayed_message(
                        order_id=order_id,
                        user_id=user_id,
                        message_type="book_filling_reminder_4h",
                        content="–í—Ä–µ–º—è –ª–µ—Ç–∏—Ç, –∞ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞. –ù–µ —É–ø—É—Å—Ç–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ –¥–ª—è —Ç–æ–≥–æ, –∫—Ç–æ –¥–æ—Ä–æ–≥ —Ç–≤–æ–µ–º—É —Å–µ—Ä–¥—Ü—É.",
                        delay_minutes=240,
                        order_step="book_collecting_facts"
                    )
                    
                    await add_delayed_message(
                        order_id=order_id,
                        user_id=user_id,
                        message_type="book_filling_reminder_8h",
                        content="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–Ω–∏–≥–∞ - —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∞—Ä–æ–∫, —ç—Ç–æ —á–∞—Å—Ç–∏—á–∫–∞ —Ç–≤–æ–µ–π –¥—É—à–∏, –ø–æ–¥–∞—Ä–µ–Ω–Ω–∞—è —Ç–æ–º—É, –∫–æ–≥–æ —Ç—ã –ª—é–±–∏—à—å.",
                        delay_minutes=480,
                        order_step="book_collecting_facts"
                    )
                
                logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
            await add_outbox_task(
                order_id=order_id,
                user_id=message.from_user.id,
                type_="manager_notification",
                content=f"–ó–∞–∫–∞–∑ #{order_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª email. –ì–æ—Ç–æ–≤ –∫ —Å–±–æ—Ä—É —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è –ø–µ—Å–Ω–∏."
            )

            # –ì–ª–∞–≤–∞ 2.8. –ê–Ω–∫–µ—Ç–∞ –¥–ª—è –ø–µ—Å–Ω–∏ ‚Äî –∑–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å—ã
            relation = data.get("song_relation", "–ø–æ–ª—É—á–∞—Ç–µ–ª—è")
            song_gender = data.get("song_gender", "")

            song_questions = await get_song_questions_for_relation(relation, song_gender)

            # –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏
            logging.info(f"üîç –û–¢–õ–ê–î–ö–ê: relation='{relation}', song_gender='{song_gender}'")
            logging.info(f"üîç –û–¢–õ–ê–î–ö–ê: song_questions={song_questions}")

            # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã
            sender_name = data.get("first_name", "") or data.get("username", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            recipient_name = data.get("song_recipient_name", "–ø–æ–ª—É—á–∞—Ç–µ–ª—å")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—É—á–µ–Ω—ã
            if not song_questions:
                logging.error(f"‚ùå –û–®–ò–ë–ö–ê: song_questions –ø—É—Å—Ç–æ–π –¥–ª—è relation='{relation}', song_gender='{song_gender}'")
                await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            intro_text = ""
            
            for question in song_questions:
                # –ó–∞–º–µ–Ω—è–µ–º –∏–º–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ
                question_with_names = question.replace("(–∏–º—è)", sender_name)
                question_with_names = question_with_names.replace("(–∏–º—è)", recipient_name)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å (–≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–±–∑–∞—Ü–µ–≤)
                intro_text += f"{question_with_names}\n"
            
            await message.answer(intro_text, parse_mode="HTML")

        else:

            await message.answer("‚úÖ Email —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–Ω–∏–≥–∏.")

            

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø

            await update_order_status(order_id, "waiting_story_options")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ "waiting_story_options"
            from db import create_or_update_user_timer
            product_type = data.get('product', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            user_id = message.from_user.id
            await create_or_update_user_timer(user_id, order_id, "waiting_story_options", product_type)
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_story_options, –ø—Ä–æ–¥—É–∫—Ç {product_type}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∑–∞–∫–∞–∑ {order_id}")

            

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—é–∂–µ—Ç–æ–≤ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

            await state.set_state(ManagerContentStates.waiting_story_options)

            

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É

            await add_outbox_task(

                order_id=order_id,

                user_id=message.from_user.id,

                type_="manager_notification",

                content=f"–ó–∞–∫–∞–∑ #{order_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–ª email. –ì–æ—Ç–æ–≤ –∫ –≤—ã–±–æ—Ä—É —Å—é–∂–µ—Ç–æ–≤."

            )

            

            await message.answer(

                "‚ú® –£–∂–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –º—ã –Ω–∞–ø—Ä–∞–≤–∏–º —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–µ —Å—é–∂–µ—Ç—ã, –Ω–æ –ø–æ–∫–∞ –±–µ–∑ —Ç–≤–æ–∏—Ö –≥–µ—Ä–æ–µ–≤.\n\n"

                "–¢–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–±—Ä–∞—Ç—å 24 —Å—é–∂–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞—é—Ç —É —Ç–µ–±—è —Ç—ë–ø–ª—ã–µ —ç–º–æ—Ü–∏–∏ –∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã –≤–∏–¥–∏—à—å —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é. –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ–Ω–∏ —Å–¥–µ–ª–∞—é—Ç –∫–Ω–∏–≥—É –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –ª–∏—á–Ω–æ–π üíñ\n\n"

                "–ü–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—É–¥—É—Ç —Å —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º ‚Äî –º—ã –∑–∞–º–µ—Ç–∏–ª–∏, —á—Ç–æ —ç—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Å–æ–±—É—é —Ç–µ–ø–ª–æ—Ç—É.\n\n"

                "–ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å —Å—é–∂–µ—Ç—ã, –Ω–∞—à–∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä—ã –¥–æ–±–∞–≤—è—Ç —Ç–≤–æ–∏—Ö –≥–µ—Ä–æ–µ–≤, –∫–æ—Ç–æ—Ä—ã—Ö –º—ã —Å–æ–∑–¥–∞–ª–∏ —Ä–∞–Ω–µ–µ. –ê –∫–æ–≥–¥–∞ –≤—Å—ë –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–±–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —Ç—ã —Å–º–æ–∂–µ—à—å –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –≤—Å—ë –±—ã–ª–æ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫, –∫–∞–∫ —Ö–æ—á–µ—Ç—Å—è —Ç–µ–±–µ ü´∂üèª"

            )
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ story_selection (–ì–ª–∞–≤–∞ 5: –í—ã–±–æ—Ä —Å—é–∂–µ—Ç–æ–≤)
            from db import create_or_update_user_timer
            await create_or_update_user_timer(message.from_user.id, order_id, "story_selection", "–ö–Ω–∏–≥–∞")
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ story_selection (–ì–ª–∞–≤–∞ 5), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}, –∑–∞–∫–∞–∑ {order_id}")

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_email: {e}")

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

@dp.callback_query(F.data.in_(["personal_data_consent_yes", "personal_data_consent_no"]))

async def personal_data_consent_handler(callback: types.CallbackQuery, state: FSMContext):

    try:

        data = await state.get_data()

        order_id = data.get('order_id')

        product = data.get('product', '–ö–Ω–∏–≥–∞')

        

        if callback.data == "personal_data_consent_yes":

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ

            await state.update_data(personal_data_consent=True, personal_data_consent_date=datetime.now().isoformat())

            

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞

            if order_id:

                order_data = data.get('order_data', {})

                order_data.update({

                    'personal_data_consent': True,

                    'personal_data_consent_date': datetime.now().isoformat()

                })

                await update_order_data(order_id, order_data)

            

            await callback.message.edit_text(

                "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –ø–æ–ª—É—á–µ–Ω–æ.\n\n"

                "–û—Å—Ç–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤–æ–π email –∞–¥—Ä–µ—Å. üì© ‚ú® –≠—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Å –¢–µ–ª–µ–≥—Ä–∞–º–æ–º —á—Ç–æ-—Ç–æ —Å–ª—É—á–∏—Ç—Å—è, –º—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ–º —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è ü©∑"

            )

            

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–¥—É–∫—Ç–∞

            if product == "–ö–Ω–∏–≥–∞":

                # –î–ª—è –∫–Ω–∏–≥–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É email

                await state.set_state(UserDataStates.waiting_email)

            else:

                # –î–ª—è –ø–µ—Å–Ω–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–ø—Ä–æ—Å—É email

                await state.set_state(UserDataStates.waiting_email)

        

        else:

            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª—Å—è

            await state.update_data(personal_data_consent=False, personal_data_consent_date=datetime.now().isoformat())

            

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞

            if order_id:

                order_data = data.get('order_data', {})

                order_data.update({

                    'personal_data_consent': False,

                    'personal_data_consent_date': datetime.now().isoformat()

                })

                await update_order_data(order_id, order_data)

            

            await callback.message.edit_text(

                "üìã –ü–æ–Ω–∏–º–∞–µ–º —Ç–≤–æ–∏ –æ–ø–∞—Å–µ–Ω–∏—è ‚Äî –¥–æ–≤–µ—Ä–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ ‚ù§Ô∏è\n"

                "–ú—ã —Ö—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ —Ç–∞–∫ –∂–µ –±–µ—Ä–µ–∂–Ω–æ, –∫–∞–∫ —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–∞—Ä–∫–∏. ‚ú® –ó–∞ –≤—Å–µ –≥–æ–¥—ã —Ä–∞–±–æ—Ç—ã –Ω–∏ –æ–¥–Ω–∞ –ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –±—ã–ª–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º ‚Äî –º—ã –¥–æ—Ä–æ–∂–∏–º –∫–∞–∂–¥–æ–π —Å–µ–º—å–µ–π, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞–º –¥–æ–≤–µ—Ä—è–µ—Ç –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ üíï\n"

                "–ú–æ–∂–µ—Ç, –≤—Å–µ –∂–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ –≤–º–µ—Å—Ç–µ? –ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ —Ç—Ä–æ–Ω–µ—Ç –¥–æ –º—É—Ä–∞—à–µ–∫üìñ",

                reply_markup=InlineKeyboardMarkup(inline_keyboard=[

                    [InlineKeyboardButton(text="–°–æ–≥–ª–∞—Å–∏—Ç—å—Å—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="personal_data_consent_yes")],

                    [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="restart_bot")]

                ])

            )

            

            # –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é, –∞ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è

            await state.set_state(UserDataStates.waiting_personal_data_consent)

        

        await callback.answer()

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ personal_data_consent_handler: {e}")

        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –æ—Ç–∫–∞–∑–∞ –æ—Ç —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

@dp.callback_query(F.data == "restart_bot")

async def restart_bot_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ

    await state.clear()

    

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    await show_welcome_message(callback.message, state)







@dp.callback_query(F.data == "ask_support")

async def ask_support_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    await callback.message.edit_text(

        "üí¨ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º\n\n"

        "–ú—ã –ø–æ–Ω–∏–º–∞–µ–º –≤–∞—à–∏ –æ–ø–∞—Å–µ–Ω–∏—è –∏ –≥–æ—Ç–æ–≤—ã –Ω–∞–π—Ç–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ!\n\n"

        "üìû –ö–∞–∫ —Å–≤—è–∑–∞—Ç—å—Å—è:\n"

        "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @BookAI_Support\n"

        "‚Ä¢ Email: support@bookai.ru\n"

        "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (800) 555-35-35\n\n"

        "üéØ –ß—Ç–æ –æ–±—Å—É–¥–∏–º:\n"

        "‚Ä¢ –í–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è –ø–æ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n"

        "‚Ä¢ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–∏–≥–∏\n"

        "‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è\n\n"

        "–ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ–º –ø–æ–¥—Ö–æ–¥—è—â–µ–µ —Ä–µ—à–µ–Ω–∏–µ! üôè"

    )





# –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ ‚Äî —Å–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ state

@dp.callback_query(F.data.in_(["product_book", "product_song"]))

async def product_chosen_callback(callback: types.CallbackQuery, state: FSMContext):

    try:

        # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç –∫–æ–≥–æ –ø—Ä–∏—à–µ–ª callback

        logging.info(f"üîç –û–¢–õ–ê–î–ö–ê product_chosen_callback: callback.from_user.id={callback.from_user.id}, callback.message.chat.id={callback.message.chat.id}")

        

        await callback.answer()

        data = await state.get_data()

        print(f"üîç –û–¢–õ–ê–î–ö–ê: product_chosen_callback - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤—ã–±—Ä–∞–ª –ø—Ä–æ–¥—É–∫—Ç: {callback.data}")

        print(f"üîç –û–¢–õ–ê–î–ö–ê: –¢–µ–∫—É—â–∏–π order_id –≤ state: {data.get('order_id')}")

        

        # –¢—Ä–µ–∫–∏–Ω–≥: –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞

        product_type = "–ö–Ω–∏–≥–∞" if callback.data == "product_book" else "–ü–µ—Å–Ω—è"

        source = data.get('source', '–û—Ä–≥–∞–Ω–∏–∫–∞')

        await track_event(

            user_id=callback.from_user.id,

            event_type='product_selected',

            event_data={

                'product': product_type,

                'username': callback.from_user.username

            },

            product_type=product_type,

            source=source

        )

        

        if callback.data == "product_book":

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–º–µ–Ω–∏

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º callback –≤–º–µ—Å—Ç–æ callback.message, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id

            await start_book_creation_flow(callback, state)

        else:

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–º–µ–Ω–∏

            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º callback –≤–º–µ—Å—Ç–æ callback.message, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id

            await start_song_creation_flow(callback, state)

        

        await log_state(callback.message, state)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ product_chosen_callback: {e}")

        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

        try:

            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

        except:

            pass



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞

@dp.callback_query(F.data.in_(["gender_female", "gender_male"]))

async def gender_chosen_callback(callback: types.CallbackQuery, state: FSMContext):

    try:

        await callback.answer()

        gender = "–¥–µ–≤—É—à–∫–∞" if callback.data == "gender_female" else "–ø–∞—Ä–µ–Ω—å"

        await state.update_data(gender=gender)

        await update_order_progress(state, status="character_created")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

        data = await state.get_data()

        if not data.get('first_name'):

            await callback.message.edit_text("–ü–æ–¥–µ–ª–∏—Å—å, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç üíå –ù–∞–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ–±—ã –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –ª–∏—á–Ω–æ")

            await state.set_state(UserDataStates.waiting_first_name)

            await state.update_data(after_name_input="book_relation")

            await log_state(callback.message, state)

            return

        

        # –ï—Å–ª–∏ –∏–º—è –µ—Å—Ç—å - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Å–≤—è–∑–∏

        await show_relation_choice(callback.message, state, gender)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ gender_chosen_callback: {e}")

        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        try:

            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

        except:

            pass



async def show_relation_choice(message, state, gender):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–≤—è–∑–∏ –¥–ª—è –∫–Ω–∏–≥–∏ (–¥–ª—è callback)"""

    # –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–≤—è–∑–∏

    if gender == "–¥–µ–≤—É—à–∫–∞":

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="–ú—É–∂—É", callback_data="rel_to_husband")],

            [InlineKeyboardButton(text="–ü–∞—Ä–Ω—é", callback_data="rel_to_boyfriend")],

            [InlineKeyboardButton(text="–ú–∞–º–µ", callback_data="rel_to_mom")],

            [InlineKeyboardButton(text="–ü–∞–ø–µ", callback_data="rel_to_dad")],

            [InlineKeyboardButton(text="–ü–æ–¥—Ä—É–≥–µ", callback_data="rel_to_girlfriend")],

            [InlineKeyboardButton(text="–ë–∞–±—É—à–∫–µ", callback_data="rel_to_grandma")],

            [InlineKeyboardButton(text="–î–µ–¥—É—à–∫–µ", callback_data="rel_to_grandpa")],

            [InlineKeyboardButton(text="–°–µ—Å—Ç—Ä–µ", callback_data="rel_to_sister")],

            [InlineKeyboardButton(text="–ë—Ä–∞—Ç—É", callback_data="rel_to_brother")],

            [InlineKeyboardButton(text="–°—ã–Ω—É", callback_data="rel_to_son")],

            [InlineKeyboardButton(text="–î–æ—á–µ—Ä–∏", callback_data="rel_to_daughter")],

        ])

    else:

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="–ñ–µ–Ω–µ", callback_data="rel_to_wife")],

            [InlineKeyboardButton(text="–î–µ–≤—É—à–∫–µ", callback_data="rel_to_girlfriend")],

            [InlineKeyboardButton(text="–ú–∞–º–µ", callback_data="rel_to_mom")],

            [InlineKeyboardButton(text="–ü–∞–ø–µ", callback_data="rel_to_dad")],

            [InlineKeyboardButton(text="–ë–∞–±—É—à–∫–µ", callback_data="rel_to_grandma")],

            [InlineKeyboardButton(text="–î–µ–¥—É—à–∫–µ", callback_data="rel_to_grandpa")],

            [InlineKeyboardButton(text="–°–µ—Å—Ç—Ä–µ", callback_data="rel_to_sister")],

            [InlineKeyboardButton(text="–ë—Ä–∞—Ç—É", callback_data="rel_to_brother")],

            [InlineKeyboardButton(text="–°—ã–Ω—É", callback_data="rel_to_son")],

            [InlineKeyboardButton(text="–î–æ—á–µ—Ä–∏", callback_data="rel_to_daughter")],

        ])

    

    await message.edit_text(

        "–ö–∞–∂–¥—É—é –∫–Ω–∏–≥—É –º—ã —Å–æ–∑–¥–∞—ë–º —Å –ª—é–±–æ–≤—å—é –∏ –∑–∞–±–æ—Ç–æ–π –æ —Ç–æ–º, –∫—Ç–æ –±—É–¥–µ—Ç –µ—ë —á–∏—Ç–∞—Ç—å üíå\n–í—ã–±–µ—Ä–∏ –¥–ª—è –∫–æ–≥–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º —Ç–≤–æ—é –∫–Ω–∏–≥—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π:",

        reply_markup=keyboard

    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ book_collecting_facts (–ì–ª–∞–≤–∞ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∫–Ω–∏–≥–∏)
    data = await state.get_data()
    order_id = data.get('order_id')
    if order_id:
        from db import create_or_update_user_timer
        await create_or_update_user_timer(message.from_user.id, order_id, "book_collecting_facts", "–ö–Ω–∏–≥–∞")
        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ book_collecting_facts (–ì–ª–∞–≤–∞ 1), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}, –∑–∞–∫–∞–∑ {order_id}")

    await state.set_state(RelationStates.choosing_relation)

    await log_state(message, state)



async def show_relation_choice_after_name(message, state, gender):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Å–≤—è–∑–∏ –¥–ª—è –∫–Ω–∏–≥–∏ (–ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏)"""

    # –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–≤—è–∑–∏

    if gender == "–¥–µ–≤—É—à–∫–∞":

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="–ú—É–∂—É", callback_data="rel_to_husband")],

            [InlineKeyboardButton(text="–ü–∞—Ä–Ω—é", callback_data="rel_to_boyfriend")],

            [InlineKeyboardButton(text="–ú–∞–º–µ", callback_data="rel_to_mom")],

            [InlineKeyboardButton(text="–ü–∞–ø–µ", callback_data="rel_to_dad")],

            [InlineKeyboardButton(text="–ü–æ–¥—Ä—É–≥–µ", callback_data="rel_to_girlfriend")],

            [InlineKeyboardButton(text="–ë–∞–±—É—à–∫–µ", callback_data="rel_to_grandma")],

            [InlineKeyboardButton(text="–î–µ–¥—É—à–∫–µ", callback_data="rel_to_grandpa")],

            [InlineKeyboardButton(text="–°–µ—Å—Ç—Ä–µ", callback_data="rel_to_sister")],

            [InlineKeyboardButton(text="–ë—Ä–∞—Ç—É", callback_data="rel_to_brother")],

            [InlineKeyboardButton(text="–°—ã–Ω—É", callback_data="rel_to_son")],

            [InlineKeyboardButton(text="–î–æ—á–µ—Ä–∏", callback_data="rel_to_daughter")],

        ])

    else:

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="–ñ–µ–Ω–µ", callback_data="rel_to_wife")],

            [InlineKeyboardButton(text="–î–µ–≤—É—à–∫–µ", callback_data="rel_to_girlfriend")],

            [InlineKeyboardButton(text="–ú–∞–º–µ", callback_data="rel_to_mom")],

            [InlineKeyboardButton(text="–ü–∞–ø–µ", callback_data="rel_to_dad")],

            [InlineKeyboardButton(text="–ë–∞–±—É—à–∫–µ", callback_data="rel_to_grandma")],

            [InlineKeyboardButton(text="–î–µ–¥—É—à–∫–µ", callback_data="rel_to_grandpa")],

            [InlineKeyboardButton(text="–°–µ—Å—Ç—Ä–µ", callback_data="rel_to_sister")],

            [InlineKeyboardButton(text="–ë—Ä–∞—Ç—É", callback_data="rel_to_brother")],

            [InlineKeyboardButton(text="–°—ã–Ω—É", callback_data="rel_to_son")],

            [InlineKeyboardButton(text="–î–æ—á–µ—Ä–∏", callback_data="rel_to_daughter")],

        ])

    

    await message.answer(

        "–ö–∞–∂–¥—É—é –∫–Ω–∏–≥—É –º—ã —Å–æ–∑–¥–∞—ë–º —Å –ª—é–±–æ–≤—å—é –∏ –∑–∞–±–æ—Ç–æ–π –æ —Ç–æ–º, –∫—Ç–æ –±—É–¥–µ—Ç –µ—ë —á–∏—Ç–∞—Ç—å üíå\n–í—ã–±–µ—Ä–∏ –¥–ª—è –∫–æ–≥–æ –º—ã —Å–æ–±–∏—Ä–∞–µ–º —Ç–≤–æ—é –∫–Ω–∏–≥—É –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π:",

        reply_markup=keyboard

    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ book_collecting_facts (–ì–ª–∞–≤–∞ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∫–Ω–∏–≥–∏)
    data = await state.get_data()
    order_id = data.get('order_id')
    if order_id:
        from db import create_or_update_user_timer
        await create_or_update_user_timer(message.from_user.id, order_id, "book_collecting_facts", "–ö–Ω–∏–≥–∞")
        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ book_collecting_facts (–ì–ª–∞–≤–∞ 1), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}, –∑–∞–∫–∞–∑ {order_id}")

    await state.set_state(RelationStates.choosing_relation)

    await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å–≤—è–∑–∏ (–∫–∞—Å—Ç–æ–º–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã)

@dp.callback_query(F.data.in_([

    "rel_to_man", "rel_to_mom", "rel_to_dad", "rel_to_girlfriend", "rel_to_grandma",

    "rel_to_woman", "rel_to_grandpa", "rel_to_sister", "rel_to_brother", "rel_to_son", "rel_to_daughter",

    "rel_to_boyfriend", "rel_to_husband", "rel_to_wife"

]))

async def relation_chosen_custom_callback(callback: types.CallbackQuery, state: FSMContext):

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
    data = await state.get_data()
    gender = data.get('gender', '')

    relations = {

        "rel_to_man": "–õ—é–±–∏–º–æ–º—É",

        "rel_to_mom": "–ú–∞–º–µ",

        "rel_to_dad": "–ü–∞–ø–µ",

        "rel_to_girlfriend": "–î–µ–≤—É—à–∫–µ" if gender == "–ø–∞—Ä–µ–Ω—å" else "–ü–æ–¥—Ä—É–≥–µ",  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        "rel_to_grandma": "–ë–∞–±—É—à–∫–µ",

        "rel_to_woman": "–õ—é–±–∏–º–æ–π",

        "rel_to_grandpa": "–î–µ–¥—É—à–∫–µ",

        "rel_to_sister": "–°–µ—Å—Ç—Ä–µ",

        "rel_to_brother": "–ë—Ä–∞—Ç—É",

        "rel_to_son": "–°—ã–Ω—É",

        "rel_to_daughter": "–î–æ—á–µ—Ä–∏",

        "rel_to_boyfriend": "–ü–∞—Ä–Ω—é",

        "rel_to_husband": "–ú—É–∂—É",

        "rel_to_wife": "–ñ–µ–Ω–µ"

    }

    relation = relations.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å —É—á–µ—Ç–æ–º –ø–æ–ª–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    def get_mapped_relation_for_save(relation, gender):
        if relation == "–î–µ–¥—É—à–∫–µ":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–í–Ω—É–∫ - –¥–µ–¥—É—à–∫–µ"
            else:
                return "–í–Ω—É—á–∫–∞ - –¥–µ–¥—É—à–∫–µ"
        elif relation == "–ë–∞–±—É—à–∫–µ":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–í–Ω—É–∫ - –±–∞–±—É—à–∫–µ"
            else:
                return "–í–Ω—É—á–∫–∞ - –±–∞–±—É—à–∫–µ"
        elif relation == "–ú–∞–º–µ":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–°—ã–Ω ‚Äì –º–∞–º–µ"
            else:
                return "–î–æ—á–∫–∞- –º–∞–º–µ"
        elif relation == "–ü–∞–ø–µ":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–°—ã–Ω ‚Äì –ø–∞–ø–µ"
            else:
                return "–î–æ—á–∫–∞- –ø–∞–ø–µ"
        elif relation == "–°—ã–Ω—É":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–ü–∞–ø–∞ - —Å—ã–Ω—É"
            else:
                return "–ú–∞–º–∞ - —Å—ã–Ω—É"
        elif relation == "–î–æ—á–∫–µ" or relation == "–î–æ—á–µ—Ä–∏":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–ü–∞–ø–∞ - –¥–æ—á–∫–µ"
            else:
                return "–ú–∞–º–∞ - –¥–æ—á–∫–µ"
        elif relation == "–ë—Ä–∞—Ç—É":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–ë—Ä–∞—Ç - –±—Ä–∞—Ç—É"
            else:
                return "–°–µ—Å—Ç—Ä–∞ - –±—Ä–∞—Ç—É"
        elif relation == "–°–µ—Å—Ç—Ä–µ":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–ë—Ä–∞—Ç ‚Äì —Å–µ—Å—Ç—Ä–µ"
            else:
                return "–°–µ—Å—Ç—Ä–∞ - —Å–µ—Å—Ç—Ä–µ"
        elif relation == "–ü–∞—Ä–Ω—é":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–ü–∞—Ä–µ–Ω—å - –¥–µ–≤—É—à–∫–µ"
            else:
                return "–î–µ–≤—É—à–∫–∞ - –ø–∞—Ä–Ω—é"
        elif relation == "–î–µ–≤—É—à–∫–µ":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–ü–∞—Ä–µ–Ω—å - –¥–µ–≤—É—à–∫–µ"
            else:
                return "–î–µ–≤—É—à–∫–∞ - –ø–∞—Ä–Ω—é"
        elif relation == "–ú—É–∂—É":
            return "–ñ–µ–Ω–∞ - –º—É–∂—É"
        elif relation == "–ñ–µ–Ω–µ":
            return "–ú—É–∂ - –∂–µ–Ω–µ"
        else:
            return relation

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å —É—á–µ—Ç–æ–º –ø–æ–ª–∞
    mapped_relation = get_mapped_relation_for_save(relation, gender)
    
    await state.update_data(relation=mapped_relation)

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É

    await update_order_progress(state)

    

    # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)

    from bot_messages_cache import get_book_intro

    intro_message = await get_book_intro()

    await callback.message.edit_text(intro_message)

    await state.set_state(CharacterStates.intro_text)

    await callback.answer()

    await log_state(callback.message, state)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è

@dp.message(StateFilter(RelationStates.relation_selected))

async def recipient_name_input(message: types.Message, state: FSMContext):

    await state.update_data(recipient_name=message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î

    await update_order_progress(state)

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    from bot_messages_cache import get_book_intro

    intro_message = await get_book_intro()

    await message.answer(intro_message)

    await state.set_state(CharacterStates.intro_text)

    await log_state(message, state)



# –ò–∑–º–µ–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ CharacterStates.intro_text

@dp.message(StateFilter(CharacterStates.intro_text), F.text)

async def save_intro_text(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    order_id = data.get('order_id')
    if order_id:
        from db import add_message_history, create_or_update_order_notification
        await add_message_history(order_id, "user", message.text)
        await create_or_update_order_notification(order_id)
        logging.info(f"‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞ {order_id}: {message.text[:50]}...")

    await state.update_data(main_hero_intro=message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î

    await update_order_progress(state)

    await message.answer("–ù–∞–ø–∏—à–∏ –ø–æ –∫–∞–∫–æ–º—É –ø–æ–≤–æ–¥—É –º—ã —Å–æ–∑–¥–∞—ë–º –∫–Ω–∏–≥—É üìî\n–ò–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –±–µ–∑ –ø–æ–≤–æ–¥–∞?")

    await state.set_state(CharacterStates.gift_reason)

    await log_state(message, state)



@dp.message(StateFilter(CharacterStates.intro_text), F.photo)

async def not_text_intro_text(message: types.Message, state: FSMContext):

    await message.answer(

        "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b>\n\n"

        "–ù–∞–º –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: –≤–æ–∑—Ä–∞—Å—Ç, —Ü–≤–µ—Ç –≥–ª–∞–∑, –æ—Å–æ–±–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏. "

        "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º—ã –ø–æ–ø—Ä–æ—Å–∏–º –ø–æ–∑–∂–µ üìù",

        parse_mode="HTML"

    )

    

    await log_state(message, state)



# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–∞–ø–∞ –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è (–ø–æ–≤–æ–¥–∞ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞): –∂–¥—ë–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç

@dp.message(StateFilter(CharacterStates.gift_reason), F.text)

async def save_gift_reason(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

    await save_user_message_to_history(message, state, "–ü–æ–≤–æ–¥ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞: ")

    

    await state.update_data(gift_reason=message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î

    await update_order_progress(state)

    await message.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ —Ç–≤–æ–µ —Ñ–æ—Ç–æ, –≤–∞–∂–Ω–æ, —á—Ç–æ–±—ã –Ω–∞ –Ω—ë–º —Ö–æ—Ä–æ—à–æ –±—ã–ª–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ.\n–¢–∞–∫ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—É—á–∏—Ç—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–µ–π üíØ")

    await state.set_state(PhotoStates.main_face_1)

    await log_state(message, state)



# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —ç—Ç–∞–ø–µ –≤—ã–±–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è

@dp.message(StateFilter(CharacterStates.gift_reason), F.photo)

async def photo_instead_of_gift_reason(message: types.Message, state: FSMContext):

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –ø–æ –∫–∞–∫–æ–º—É –ø–æ–≤–æ–¥—É –º—ã —Å–æ–∑–¥–∞—ë–º –ø–µ—Å–Ω—éüé∂\n–ò–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –±–µ–∑ –ø–æ–≤–æ–¥–∞? –ê –ø–æ—Ç–æ–º –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ.")

    await log_state(message, state)



# –ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è (–ª–∏—Ü–æ–º)

@dp.message(StateFilter(PhotoStates.main_face_1), F.photo)

async def main_face_1_photo(message: types.Message, state: FSMContext):

    file_id = message.photo[-1].file_id

    data = await state.get_data()

    order_id = data.get('order_id')

    filename = f"order_{order_id}_main_face_1.jpg"

    await download_and_save_photo(message.bot, file_id, "uploads", filename)

    await state.update_data(main_face_1=filename)

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

    first_name = data.get('first_name', '')

    sender_name = first_name if first_name and first_name != 'None' else '–î—Ä—É–≥'

    

    await message.answer(f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º üôèüèª\n{sender_name}, –æ—Ç–ø—Ä–∞–≤—å –µ—â—ë –æ–¥–Ω–æ —Ñ–æ—Ç–æ –ª–∏—Ü–∞, –º–æ–∂–Ω–æ —Å –¥—Ä—É–≥–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞ ‚Äî —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é –µ—â—ë —Ç–æ—á–Ω–µ–µ üéØ")

    await state.set_state(PhotoStates.main_face_2)

    await log_state(message, state)



@dp.message(StateFilter(PhotoStates.main_face_1), F.document)

async def main_face_1_document(message: types.Message, state: FSMContext):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    if not message.document.mime_type or not message.document.mime_type.startswith('image/'):

        await message.answer(

            "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚ùå\n"

            "–°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"

            "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑",

            parse_mode="HTML"

        )

        return

    

    file_id = message.document.file_id

    data = await state.get_data()

    order_id = data.get('order_id')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

    file_ext = os.path.splitext(message.document.file_name)[1] if message.document.file_name else '.jpg'

    filename = f"order_{order_id}_main_face_1{file_ext}"

    await download_and_save_photo(message.bot, file_id, "uploads", filename)

    await state.update_data(main_face_1=filename)

    

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

    first_name = data.get('first_name', '')

    sender_name = first_name if first_name and first_name != 'None' else '–î—Ä—É–≥'

    

    await message.answer(f"–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º üôèüèª\n{sender_name}, –æ—Ç–ø—Ä–∞–≤—å –µ—â—ë –æ–¥–Ω–æ —Ñ–æ—Ç–æ –ª–∏—Ü–∞, –º–æ–∂–Ω–æ —Å –¥—Ä—É–≥–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞ ‚Äî —ç—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é –µ—â—ë —Ç–æ—á–Ω–µ–µ üéØ")

    await state.set_state(PhotoStates.main_face_2)

    await log_state(message, state)



@dp.message(StateFilter(PhotoStates.main_face_1), F.text)

async def not_photo_main_face_1(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    await save_user_message_to_history(message, state, "–¢–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ: ")

    await message.answer(

        "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚ùå\n"

        "–°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"

        "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑",

        parse_mode="HTML"

    )

    

    await log_state(message, state)



# –í—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è (–ª–∏—Ü–æ–º)

@dp.message(StateFilter(PhotoStates.main_face_2), F.photo)

async def main_face_2_photo(message: types.Message, state: FSMContext):

    file_id = message.photo[-1].file_id

    order_id = (await state.get_data()).get('order_id')

    filename = f"order_{order_id}_main_face_2.jpg"

    await download_and_save_photo(message.bot, file_id, "uploads", filename)

    await state.update_data(main_face_2=filename)

    

    await message.answer("–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ —Ç–≤–æ–µ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç.")

    await state.set_state(PhotoStates.main_full)

    await log_state(message, state)



@dp.message(StateFilter(PhotoStates.main_face_2), F.document)

async def main_face_2_document(message: types.Message, state: FSMContext):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    if not message.document.mime_type or not message.document.mime_type.startswith('image/'):

        await message.answer(

            "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚ùå\n"

            "–°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"

            "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑",

            parse_mode="HTML"

        )

        return

    

    file_id = message.document.file_id

    order_id = (await state.get_data()).get('order_id')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

    file_ext = os.path.splitext(message.document.file_name)[1] if message.document.file_name else '.jpg'

    filename = f"order_{order_id}_main_face_2{file_ext}"

    await download_and_save_photo(message.bot, file_id, "uploads", filename)

    await state.update_data(main_face_2=filename)

    

    await message.answer("–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, —Ç–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ —Ç–≤–æ–µ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç.")

    await state.set_state(PhotoStates.main_full)

    await log_state(message, state)



@dp.message(StateFilter(PhotoStates.main_face_2), F.text)

async def not_photo_main_face_2(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    await save_user_message_to_history(message, state, "–¢–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ: ")

    await message.answer(

        "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚ùå\n"

        "–°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"

        "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑",

        parse_mode="HTML"

    )

    

    await log_state(message, state)



# –§–æ—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç

@dp.message(StateFilter(PhotoStates.main_full), F.photo)

async def main_full_photo(message: types.Message, state: FSMContext):

    try:

        logging.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–µ—Ç—å–µ —Ñ–æ—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        

        file_id = message.photo[-1].file_id

        order_id = (await state.get_data()).get('order_id')

        filename = f"order_{order_id}_main_full.jpg"

        

        logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ: {filename}")

        await download_and_save_photo(message.bot, file_id, "uploads", filename)

        await state.update_data(main_full=filename)

        

        logging.info(f"üìä –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–∫–∞–∑–∞ {order_id}")

        await update_order_progress(state, status="character_created")

        

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è

        logging.info(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        await message.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É:\n"

                            "–ú—ã —Å–æ–±—Ä–∞–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ.\n"

                            "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–º —Å–∞–º–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ–º —á–µ–ª–æ–≤–µ–∫–µ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã —Å–æ–∑–¥–∞—ë–º –∫–Ω–∏–≥—É ‚ù§Ô∏è")

        await message.answer("–ù–∞–ø–∏—à–∏ –∏–º—è —Ç–æ–≥–æ, –∫–æ–º—É –±—É–¥–µ—Ç –ø–æ—Å–≤—è—â–µ–Ω–∞ —Ç–≤–æ—è –∫–Ω–∏–≥–∞ üíå\n"

                            "–û–Ω–æ —Å—Ç–∞–Ω–µ—Ç –≥–ª–∞–≤–Ω—ã–º –Ω–∞ –µ—ë —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∏ –ø—Ä–æ–∑–≤—É—á–∏—Ç –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–µ–ø–ª–æ.")

        await state.set_state(CharacterStates.hero_name)

        

        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–µ—Ç—å–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

        await log_state(message, state)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main_full_photo: {e}")

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

        await log_state(message, state)



@dp.message(StateFilter(PhotoStates.main_full), F.document)

async def main_full_document(message: types.Message, state: FSMContext):

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        if not message.document.mime_type or not message.document.mime_type.startswith('image/'):

            await message.answer(

                "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚ùå\n"

                "–°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"

                "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑",

                parse_mode="HTML"

            )

            return

        

        logging.info(f"üì∏ –ü–æ–ª—É—á–µ–Ω–æ —Ç—Ä–µ—Ç—å–µ —Ñ–æ—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è (–∫–∞–∫ —Ñ–∞–π–ª) –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        

        file_id = message.document.file_id

        order_id = (await state.get_data()).get('order_id')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

        file_ext = os.path.splitext(message.document.file_name)[1] if message.document.file_name else '.jpg'

        filename = f"order_{order_id}_main_full{file_ext}"

        

        logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ: {filename}")

        await download_and_save_photo(message.bot, file_id, "uploads", filename)

        await state.update_data(main_full=filename)

        

        logging.info(f"üìä –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–∫–∞–∑–∞ {order_id}")

        await update_order_progress(state, status="character_created")

        

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è

        logging.info(f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        await message.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É:\n"

                            "–ú—ã —Å–æ–±—Ä–∞–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–±–µ.\n"

                            "–¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–º —Å–∞–º–æ–º –æ—Å–æ–±–µ–Ω–Ω–æ–º —á–µ–ª–æ–≤–µ–∫–µ, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –º—ã —Å–æ–∑–¥–∞—ë–º –∫–Ω–∏–≥—É ‚ù§Ô∏è")

        await message.answer("–ù–∞–ø–∏—à–∏ –∏–º—è —Ç–æ–≥–æ, –∫–æ–º—É –±—É–¥–µ—Ç –ø–æ—Å–≤—è—â–µ–Ω–∞ —Ç–≤–æ—è –∫–Ω–∏–≥–∞ üíå\n"

                            "–û–Ω–æ —Å—Ç–∞–Ω–µ—Ç –≥–ª–∞–≤–Ω—ã–º –Ω–∞ –µ—ë —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∏ –ø—Ä–æ–∑–≤—É—á–∏—Ç –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–µ–ø–ª–æ.")

        await state.set_state(CharacterStates.hero_name)

        

        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ç—Ä–µ—Ç—å–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

        await log_state(message, state)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ main_full_document: {e}")

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

        await log_state(message, state)



@dp.message(StateFilter(PhotoStates.main_full), F.text)

async def not_photo_main_full(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    await save_user_message_to_history(message, state, "–¢–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ: ")

    await message.answer(

        "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚ùå\n"

        "–°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"

        "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑",

        parse_mode="HTML"

    )

    

    await log_state(message, state)



# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

@dp.message(F.photo)

async def universal_photo_handler(message: types.Message, state: FSMContext):

    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""

    try:

        current_state = await state.get_state()

        logging.info(f"üì∏ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –ø–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

        

        # –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ç—Ä–µ—Ç—å–µ–≥–æ —Ñ–æ—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–≥–æ

        if current_state == "PhotoStates:main_full":

            logging.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ main_full_photo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

            await main_full_photo(message, state)

        # –ï—Å–ª–∏ –º—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è, –ø–µ—Ä–µ–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º

        elif current_state == "PhotoStates:hero_face_1":

            logging.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ hero_face_1_photo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

            await hero_face_1_photo(message, state)

        elif current_state == "PhotoStates:hero_face_2":

            logging.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ hero_face_2_photo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

            await hero_face_2_photo(message, state)

        elif current_state == "PhotoStates:hero_full":

            logging.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ hero_full_photo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

            await hero_full_photo(message, state)

        elif current_state == "PhotoStates:main_face_1":

            logging.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ main_face_1_photo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

            await main_face_1_photo(message, state)

        elif current_state == "PhotoStates:main_face_2":

            logging.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ main_face_2_photo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

            await main_face_2_photo(message, state)

        elif current_state == "PhotoStates:joint_photo":

            logging.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ joint_photo_handler –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

            await joint_photo_handler(message, state)

        elif current_state == "AdditionsStates:uploading_photos":

            logging.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ upload_custom_photo –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

            await upload_custom_photo(message, state)

        elif current_state == "BookFinalStates:uploading_custom_photos":

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø–æ–π

            if message.media_group_id:

                logging.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –≤ handle_media_group_custom_photos –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

                await handle_media_group_custom_photos(message, state)

            else:

                logging.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ upload_custom_photo_book_final –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

                await upload_custom_photo_book_final(message, state)

        elif current_state == "BookFinalStates:uploading_first_last_photos":

            logging.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ handle_first_last_photo_upload –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

            await handle_first_last_photo_upload(message, state)

        elif current_state == "BookFinalStates:uploading_first_page_photo":

            logging.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ handle_first_page_photo_upload –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

            await handle_first_page_photo_upload(message, state)

        elif current_state == "BookFinalStates:uploading_last_page_photo":

            logging.info(f"üîÑ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤ handle_last_page_photo_upload –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

            await handle_last_page_photo_upload(message, state)

        elif current_state == "SongRelationStates:waiting_recipient_name":

            logging.info(f"üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")

            await message.answer("–ù–∞–ø–∏—à–∏ –∏–º—è —Ç–æ–≥–æ –∫–æ–º—É –±—É–¥–µ—Ç –ø–æ—Å–≤—è—â–µ–Ω–∞ —Ç–≤–æ—è –ø–µ—Å–Ω—è üéµ\n–û–Ω–æ —Å—Ç–∞–Ω–µ—Ç –≥–ª–∞–≤–Ω—ã–º, –∏ –ø–µ—Å–Ω—è –ø—Ä–æ–∑–≤—É—á–∏—Ç –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–µ–ø–ª–æ ‚ù§Ô∏è\n–¢–µ–∫—Å—Ç–æ–º, –∞ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π.")

        elif current_state == "SongRelationStates:waiting_gift_reason":

            logging.info(f"üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–≤–æ–¥–∞ –ø–æ–¥–∞—Ä–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º")

            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –ø–æ –∫–∞–∫–æ–º—É –ø–æ–≤–æ–¥—É –º—ã —Å–æ–∑–¥–∞—ë–º –ø–µ—Å–Ω—éüé∂\n–ò–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –±–µ–∑ –ø–æ–≤–æ–¥–∞? –¢–µ–∫—Å—Ç–æ–º, –∞ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π.")

        else:

            logging.info(f"üì∏ –§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}, –Ω–æ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞")

            await message.answer("–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.")

            

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ universal_photo_handler: {e}")

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



# –ù–æ–≤—ã–π –≥–µ—Ä–æ–π: –∏–º—è

@dp.callback_query(F.data == "add_hero")

async def add_hero(callback: types.CallbackQuery, state: FSMContext):

    await callback.message.edit_text("–ù–∞–ø–∏—à–∏ –∏–º—è —Ç–æ–≥–æ –∫–æ–º—É –±—É–¥–µ—Ç –ø–æ—Å–≤—è—â–µ–Ω–∞ —Ç–≤–æ—è –∫–Ω–∏–≥–∞ üíå\n"

                                   "–û–Ω–æ —Å—Ç–∞–Ω–µ—Ç –≥–ª–∞–≤–Ω—ã–º –Ω–∞ –µ—ë —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∏ –ø—Ä–æ–∑–≤—É—á–∏—Ç –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–µ–ø–ª–æ")

    await state.set_state(CharacterStates.hero_name)

    await callback.answer()

    await log_state(callback.message, state)



# –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–µ—Ä–æ—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å

@dp.callback_query(F.data == "skip_add_hero")

async def skip_add_hero(callback: types.CallbackQuery, state: FSMContext):

    try:

        logging.info(f"üîò –ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")

        await callback.answer()

        

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        from db import get_book_styles

        styles = await get_book_styles()

        

        if styles:

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

            header_text = "üé® <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≤–∞—à–µ–π –∫–Ω–∏–≥–∏:</b>\n\n"

            await callback.message.edit_text(header_text, parse_mode="HTML")

            

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–∏–ª—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —Ñ–æ—Ç–æ

            for i, style in enumerate(styles):

                photo_path = f"styles/{style['filename']}"

                caption = f"<b>{i+1}. {style['name']}</b>\n{style['description']}"

                

                if os.path.exists(photo_path):

                    await callback.message.answer_photo(

                        types.FSInputFile(photo_path),

                        caption=caption,

                        parse_mode="HTML"

                    )

                else:

                    # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç

                    await callback.message.answer(caption, parse_mode="HTML")

            

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

            keyboard = InlineKeyboardMarkup(inline_keyboard=[

                [InlineKeyboardButton(

                    text=style['name'] if '‚Äî' in style['name'] else f"{style['name']} {'üè° ‚Äî –±—É–¥–µ—Ç –ø–æ–∑–∂–µ' if 'Ghibli' in style['name'] else 'üë©‚Äç‚ù§Ô∏è‚Äçüë® ‚Äî –±—É–¥–µ—Ç –ø–æ–∑–∂–µ' if 'Love' in style['name'] else ''}",

                    callback_data="style_pixar" if 'Pixar' in style['name'] else "style_ghibli_placeholder" if 'Ghibli' in style['name'] else "style_loveis_placeholder" if 'Love' in style['name'] else f"style_{style['id']}"

                )]

                for style in styles

            ])

            

            await callback.message.answer(

                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:",

                reply_markup=keyboard

            )

        else:

            # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ —Å—Ç–∏–ª–∏, –µ—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç

            keyboard = InlineKeyboardMarkup(inline_keyboard=[

                [InlineKeyboardButton(text="Pixar üåà", callback_data="style_pixar")],

                [InlineKeyboardButton(text="Ghibli üè°", callback_data="style_ghibli_placeholder")],

                [InlineKeyboardButton(text="Love is üë©‚Äç‚ù§Ô∏è‚Äçüë®", callback_data="style_loveis_placeholder")],

            ])

            

            await callback.message.edit_text(

                "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≤–∞—à–µ–π –∫–Ω–∏–≥–∏:",

                reply_markup=keyboard

            )

        

        await state.set_state(CoverStates.choosing_style)

        

        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")

        await log_state(callback.message, state)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ skip_add_hero: {e}")

        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        await log_state(callback.message, state)



# –ù–æ–≤—ã–π –≥–µ—Ä–æ–π: —Ñ–æ—Ç–æ –ª–∏—Ü–æ–º 1

@dp.message(StateFilter(CharacterStates.hero_name))

async def save_hero_name(message: types.Message, state: FSMContext):

    await state.update_data(current_hero_name=message.text, current_hero_photos=[])
    
    # –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è –≥–µ—Ä–æ—è —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å
    data = await state.get_data()
    logging.info(f"üîç –û–¢–õ–ê–î–ö–ê save_hero_name: current_hero_name={data.get('current_hero_name')}, first_name={data.get('first_name')}")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    await update_order_progress(state)

    await message.answer(f"–ù–∞–º –≤–∞–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ –æ —Ç–æ–º, –∫–æ–º—É –±—É–¥–µ—Ç –ø–æ—Å–≤—è—â–µ–Ω–∞ –∫–Ω–∏–≥–∞ ‚ù§Ô∏è\n"

                        f"–ß—Ç–æ–±—ã –ø–µ—Ä—Å–æ–Ω–∞–∂ –±—ã–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂, —Ä–∞—Å—Å–∫–∞–∂–∏: —Å–∫–æ–ª—å–∫–æ –µ–º—É –ª–µ—Ç, –∫–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ —É –Ω–µ–≥–æ –≥–ª–∞–∑–∞ –∏ –µ—Å—Ç—å –ª–∏ –æ—Å–æ–±–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ü©∑\n"

                        f"–≠—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–º–æ–≥—É—Ç —Ö—É–¥–æ–∂–Ω–∏–∫—É –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∫–Ω–∏–≥–∏ üíû")

    await state.set_state(CharacterStates.hero_intro)

    await log_state(message, state)



@dp.message(StateFilter(CharacterStates.hero_intro), F.text)

async def save_hero_intro(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    order_id = data.get('order_id')
    if order_id:
        from db import add_message_history, create_or_update_order_notification
        await add_message_history(order_id, "user", message.text)
        await create_or_update_order_notification(order_id)
        logging.info(f"‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞ {order_id}: {message.text[:50]}...")

    await state.update_data(current_hero_intro=message.text)

    hero_name = (await state.get_data()).get('current_hero_name')

    await message.answer(f"–ù–∞–º –Ω—É–∂–Ω–æ –µ–≥–æ —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã –Ω–∞ –Ω—ë–º —Ö–æ—Ä–æ—à–æ –±—ã–ª–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ  üì∑\n"

                        f"–ë–ª–∞–≥–æ–¥–∞—Ä—è —ç—Ç–æ–º—É –∫–Ω–∏–≥–∞ –ø–æ–ª—É—á–∏—Ç—Å—è –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –ª–∏—á–Ω–æ–π –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π ü•π")

    await state.set_state(PhotoStates.hero_face_1)

    await log_state(message, state)



@dp.message(StateFilter(CharacterStates.hero_intro), F.photo)

async def not_text_hero_intro(message: types.Message, state: FSMContext):

    await message.answer(

        "‚ùå <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b>\n\n"

        "–ù–∞–º –Ω—É–∂–µ–Ω —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: –≤–æ–∑—Ä–∞—Å—Ç, —Ü–≤–µ—Ç –≥–ª–∞–∑, –æ—Å–æ–±–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏. "

        "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –º—ã –ø–æ–ø—Ä–æ—Å–∏–º –ø–æ–∑–∂–µ üìù",

        parse_mode="HTML"

    )

    

    await log_state(message, state)



@dp.message(StateFilter(PhotoStates.hero_face_1), F.photo)

async def hero_face_1_photo(message: types.Message, state: FSMContext):

    try:

        logging.info(f"üì∏ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ hero_face_1_photo —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        

        file_id = message.photo[-1].file_id

        order_id = (await state.get_data()).get('order_id')

        hero_name = (await state.get_data()).get('current_hero_name', 'hero')

        filename = f"order_{order_id}_{hero_name}_face_1.jpg"

        

        logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è: {filename}")

        await download_and_save_photo(message.bot, file_id, "uploads", filename)

        await state.update_data(hero_face_1=filename)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        from db import save_hero_photo

        await save_hero_photo(order_id, filename, "face_1", hero_name)

        

        logging.info(f"‚úÖ –§–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É")

        logging.info(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é PhotoStates.hero_face_2")

        await message.answer("–°–ø–∞—Å–∏–±–æ! üôè\n"

                            "–û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â—ë –æ–¥–Ω–æ —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ, –Ω–æ —Å –¥—Ä—É–≥–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞ üôÇ\n"

                            "–¢–∞–∫ –º—ã —Å–º–æ–∂–µ–º —É–ª–æ–≤–∏—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏ —Å–¥–µ–ª–∞—Ç—å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–µ–π ü™û")

        await state.set_state(PhotoStates.hero_face_2)

        logging.info(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º log_state")

        await log_state(message, state)

        logging.info(f"üîç –û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ hero_face_1_photo –∑–∞–≤–µ—Ä—à–µ–Ω")

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ hero_face_1_photo: {e}")

        import traceback

        traceback.print_exc()

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        await log_state(message, state)



@dp.message(StateFilter(PhotoStates.hero_face_1), F.document)

async def hero_face_1_document(message: types.Message, state: FSMContext):

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        if not message.document.mime_type or not message.document.mime_type.startswith('image/'):

            await message.answer(

                "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚ùå\n"

                "–°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"

                "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑",

                parse_mode="HTML"

            )

            return

        

        logging.info(f"üì∏ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ hero_face_1_document —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        

        file_id = message.document.file_id

        order_id = (await state.get_data()).get('order_id')

        hero_name = (await state.get_data()).get('current_hero_name', 'hero')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

        file_ext = os.path.splitext(message.document.file_name)[1] if message.document.file_name else '.jpg'

        filename = f"order_{order_id}_{hero_name}_face_1{file_ext}"

        

        logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è: {filename}")

        await download_and_save_photo(message.bot, file_id, "uploads", filename)

        await state.update_data(hero_face_1=filename)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        from db import save_hero_photo

        await save_hero_photo(order_id, filename, "face_1", hero_name)

        

        logging.info(f"‚úÖ –§–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É")

        logging.info(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é PhotoStates.hero_face_2")

        await message.answer("–°–ø–∞—Å–∏–±–æ! üôè\n"

                            "–û—Ç–ø—Ä–∞–≤—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—â—ë –æ–¥–Ω–æ —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ –ª–∏—Ü–æ, –Ω–æ —Å –¥—Ä—É–≥–æ–≥–æ —Ä–∞–∫—É—Ä—Å–∞ üôÇ\n"

                            "–¢–∞–∫ –º—ã —Å–º–æ–∂–µ–º —É–ª–æ–≤–∏—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏ —Å–¥–µ–ª–∞—Ç—å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂–µ–π ü™û")

        await state.set_state(PhotoStates.hero_face_2)

        logging.info(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º log_state")

        await log_state(message, state)

        logging.info(f"üîç –û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ hero_face_1_photo –∑–∞–≤–µ—Ä—à–µ–Ω")

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ hero_face_1_photo: {e}")

        import traceback

        traceback.print_exc()

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        await log_state(message, state)



@dp.message(StateFilter(PhotoStates.hero_face_1), F.text)

async def not_photo_hero_face_1(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    await save_user_message_to_history(message, state, "–¢–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ: ")

    await message.answer(

        "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚ùå\n"

        "–°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"

        "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑",

        parse_mode="HTML"

    )

    

    await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ hero_face_1 (–ø–µ—Ä–µ–º–µ—â–µ–Ω –Ω–∏–∂–µ)

@dp.message(StateFilter(PhotoStates.hero_face_1))

async def any_message_hero_face_1(message: types.Message, state: FSMContext):

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞

    content_type = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"

    if message.video:

        content_type = "–≤–∏–¥–µ–æ"

    elif message.animation:

        content_type = "GIF/–∞–Ω–∏–º–∞—Ü–∏—è"

    elif message.sticker:

        content_type = "—Å—Ç–∏–∫–µ—Ä"

    elif message.voice:

        content_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

    elif message.video_note:

        content_type = "–∫—Ä—É–∂–æ–∫"

    elif message.document:

        content_type = "–¥–æ–∫—É–º–µ–Ω—Ç"

    elif message.audio:

        content_type = "–∞—É–¥–∏–æ"

    elif message.text:

        content_type = "—Ç–µ–∫—Å—Ç"

    

    logging.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {content_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ hero_face_1")

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    await message.answer(

        "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚ùå\n"

        "–°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"

        "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑",

        parse_mode="HTML"

    )

    

    await log_state(message, state)



# –§–æ—Ç–æ –≥–µ—Ä–æ—è (–ª–∏—Ü–æ–º 2)

@dp.message(StateFilter(PhotoStates.hero_face_2), F.photo)

async def hero_face_2_photo(message: types.Message, state: FSMContext):

    try:

        logging.info(f"üì∏ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ hero_face_2_photo —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        

        file_id = message.photo[-1].file_id

        order_id = (await state.get_data()).get('order_id')

        hero_name = (await state.get_data()).get('current_hero_name', 'hero')

        filename = f"order_{order_id}_{hero_name}_face_2.jpg"

        

        logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –≥–µ—Ä–æ—è: {filename}")

        await download_and_save_photo(message.bot, file_id, "uploads", filename)

        await state.update_data(hero_face_2=filename)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        from db import save_hero_photo

        await save_hero_photo(order_id, filename, "face_2", hero_name)

        

        logging.info(f"‚úÖ –í—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –≥–µ—Ä–æ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç")

        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ!\n"

                            f"–¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç üåø\n"

                            f"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∑–∏—Ç—å –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è –≤ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è—Ö.")

        await state.set_state(PhotoStates.hero_full)

        await log_state(message, state)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ hero_face_2_photo: {e}")

        import traceback

        traceback.print_exc()

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        await log_state(message, state)



@dp.message(StateFilter(PhotoStates.hero_face_2), F.document)

async def hero_face_2_document(message: types.Message, state: FSMContext):

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        if not message.document.mime_type or not message.document.mime_type.startswith('image/'):

            await message.answer(

                "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚ùå\n"

                "–°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"

                "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑",

                parse_mode="HTML"

            )

            return

        

        logging.info(f"üì∏ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ hero_face_2_document —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        

        file_id = message.document.file_id

        order_id = (await state.get_data()).get('order_id')

        hero_name = (await state.get_data()).get('current_hero_name', 'hero')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

        file_ext = os.path.splitext(message.document.file_name)[1] if message.document.file_name else '.jpg'

        filename = f"order_{order_id}_{hero_name}_face_2{file_ext}"

        

        logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –≥–µ—Ä–æ—è –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ: {filename}")

        await download_and_save_photo(message.bot, file_id, "uploads", filename)

        await state.update_data(hero_face_2=filename)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        from db import save_hero_photo

        await save_hero_photo(order_id, filename, "face_2", hero_name)

        

        logging.info(f"‚úÖ –í—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –≥–µ—Ä–æ—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç")

        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ!\n"

                            f"–¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω–æ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç üåø\n"

                            f"–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–∑–æ–±—Ä–∞–∑–∏—Ç—å –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è –≤ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è—Ö.")

        await state.set_state(PhotoStates.hero_full)

        await log_state(message, state)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ hero_face_2_document: {e}")

        import traceback

        traceback.print_exc()

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        await log_state(message, state)





@dp.message(StateFilter(PhotoStates.hero_face_2), F.text)

async def not_photo_hero_face_2(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    await save_user_message_to_history(message, state, "–¢–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ: ")

    await message.answer(

        "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚ùå\n"

        "–°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"

        "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑",

        parse_mode="HTML"

    )

    

    await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ hero_face_2

@dp.message(StateFilter(PhotoStates.hero_face_2))

async def any_message_hero_face_2(message: types.Message, state: FSMContext):

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞

    content_type = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"

    if message.video:

        content_type = "–≤–∏–¥–µ–æ"

    elif message.animation:

        content_type = "GIF/–∞–Ω–∏–º–∞—Ü–∏—è"

    elif message.sticker:

        content_type = "—Å—Ç–∏–∫–µ—Ä"

    elif message.voice:

        content_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

    elif message.video_note:

        content_type = "–∫—Ä—É–∂–æ–∫"

    elif message.document:

        content_type = "–¥–æ–∫—É–º–µ–Ω—Ç"

    elif message.audio:

        content_type = "–∞—É–¥–∏–æ"

    elif message.text:

        content_type = "—Ç–µ–∫—Å—Ç"

    

    logging.warning(f"‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {content_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ hero_face_2")

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    await message.answer(

        "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚ùå\n"

        "–°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"

        "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑",

        parse_mode="HTML"

    )

    

    await log_state(message, state)



# –§–æ—Ç–æ –≥–µ—Ä–æ—è –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç

@dp.message(StateFilter(PhotoStates.hero_full), F.photo)

async def hero_full_photo(message: types.Message, state: FSMContext):

    try:

        logging.info(f"üì∏ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ hero_full_photo —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        

        file_id = message.photo[-1].file_id

        order_id = (await state.get_data()).get('order_id')

        hero_name = (await state.get_data()).get('current_hero_name', 'hero')

        filename = f"order_{order_id}_{hero_name}_full.jpg"

        

        logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≥–µ—Ä–æ—è –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç: {filename}")

        await download_and_save_photo(message.bot, file_id, "uploads", filename)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        from db import save_hero_photo

        await save_hero_photo(order_id, filename, "full", hero_name)

        

        data = await state.get_data()

        hero = {

            'name': data.get('current_hero_name'),

            'intro': data.get('current_hero_intro'),

            'face_1': data.get('hero_face_1'),

            'face_2': data.get('hero_face_2'),

            'full': filename

        }

        all_heroes = data.get('other_heroes', [])

        all_heroes.append(hero)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –≥–µ—Ä–æ—è –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ–±–Ω—É–ª–µ–Ω–∏–µ–º
        current_hero_name = data.get('current_hero_name')
        await state.update_data(
            other_heroes=all_heroes, 
            recipient_name=current_hero_name,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            current_hero_name=None, 
            current_hero_intro=None, 
            hero_face_1=None, 
            hero_face_2=None
        )

        

        logging.info(f"‚úÖ –§–æ—Ç–æ –≥–µ—Ä–æ—è –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–º—É —Ñ–æ—Ç–æ")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–º—É —Ñ–æ—Ç–æ

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="–£ –Ω–∞—Å –Ω–µ—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ —Ñ–æ—Ç–æ", callback_data="skip_joint_photo")]

        ])

        await message.answer("–ö–∞–∫–∏–µ –≤—ã –∫—Ä–∞—Å–∏–≤—ã–µ!\n"

                            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –≥–æ—Ç–æ–≤ –Ω–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–∏—à–ª–∏ –µ–≥–æ –Ω–∞–º", reply_markup=keyboard)

        await state.set_state(PhotoStates.joint_photo)

        await log_state(message, state)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ hero_full_photo: {e}")

        import traceback

        traceback.print_exc()

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        await log_state(message, state)



@dp.message(StateFilter(PhotoStates.hero_full), F.document)

async def hero_full_document(message: types.Message, state: FSMContext):

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        if not message.document.mime_type or not message.document.mime_type.startswith('image/'):

            await message.answer(

                "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚ùå\n"

                "–°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"

                "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑",

                parse_mode="HTML"

            )

            return

        

        logging.info(f"üì∏ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ hero_full_document —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        

        file_id = message.document.file_id

        order_id = (await state.get_data()).get('order_id')

        hero_name = (await state.get_data()).get('current_hero_name', 'hero')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

        file_ext = os.path.splitext(message.document.file_name)[1] if message.document.file_name else '.jpg'

        filename = f"order_{order_id}_{hero_name}_full{file_ext}"

        

        logging.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≥–µ—Ä–æ—è –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∫–∞—á–µ—Å—Ç–≤–µ: {filename}")

        await download_and_save_photo(message.bot, file_id, "uploads", filename)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        from db import save_hero_photo

        await save_hero_photo(order_id, filename, "full", hero_name)

        

        data = await state.get_data()

        hero = {

            'name': data.get('current_hero_name'),

            'intro': data.get('current_hero_intro'),

            'face_1': data.get('hero_face_1'),

            'face_2': data.get('hero_face_2'),

            'full': filename

        }

        all_heroes = data.get('other_heroes', [])

        all_heroes.append(hero)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –≥–µ—Ä–æ—è –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –æ–±–Ω—É–ª–µ–Ω–∏–µ–º
        current_hero_name = data.get('current_hero_name')
        await state.update_data(
            other_heroes=all_heroes, 
            recipient_name=current_hero_name,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –∫–∞–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            current_hero_name=None, 
            current_hero_intro=None, 
            hero_face_1=None, 
            hero_face_2=None
        )

        

        logging.info(f"‚úÖ –§–æ—Ç–æ –≥–µ—Ä–æ—è –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–º—É —Ñ–æ—Ç–æ")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–º—É —Ñ–æ—Ç–æ

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="–£ –Ω–∞—Å –Ω–µ—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ —Ñ–æ—Ç–æ", callback_data="skip_joint_photo")]

        ])

        await message.answer("–ö–∞–∫–∏–µ –≤—ã –∫—Ä–∞—Å–∏–≤—ã–µ!\n"

                            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã –≥–æ—Ç–æ–≤ –Ω–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, –ø—Ä–∏—à–ª–∏ –µ–≥–æ –Ω–∞–º", reply_markup=keyboard)

        await state.set_state(PhotoStates.joint_photo)

        await log_state(message, state)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ hero_full_document: {e}")

        import traceback

        traceback.print_exc()

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        await log_state(message, state)



@dp.message(StateFilter(PhotoStates.hero_full), F.text)

async def not_photo_hero_full(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    await save_user_message_to_history(message, state, "–¢–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ: ")

    await message.answer(

        "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚ùå\n"

        "–°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"

        "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑",

        parse_mode="HTML"

    )

    

    await log_state(message, state)



# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–∞, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"

# @dp.callback_query(F.data == "no_more_heroes")

# async def finish_characters(callback: types.CallbackQuery, state: FSMContext):

#     data = await state.get_data()

#     if data.get('other_heroes'):

#         await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤:")

#         await state.set_state(PhotoStates.joint_photo)

#     else:

#         # –ï—Å–ª–∏ –¥—Ä—É–≥–∏—Ö –≥–µ—Ä–æ–µ–≤ –Ω–µ—Ç ‚Äî —Å—Ä–∞–∑—É –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É

#         await finish_photos(callback, state)

#     await callback.answer()

#     await log_state(callback.message, state)



# –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ

@dp.message(StateFilter(PhotoStates.joint_photo), F.photo)

async def joint_photo_handler(message: types.Message, state: FSMContext):

    file_id = message.photo[-1].file_id

    order_id = (await state.get_data()).get('order_id')

    filename = f"order_{order_id}_joint_photo.jpg"

    await download_and_save_photo(message.bot, file_id, "uploads", filename)

    await state.update_data(joint_photo=filename)

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    from db import save_joint_photo

    await save_joint_photo(order_id, filename)

    

    await finish_photos(message, state)

    await log_state(message, state)



@dp.message(StateFilter(PhotoStates.joint_photo), F.document)

async def joint_photo_document(message: types.Message, state: FSMContext):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    if not message.document.mime_type or not message.document.mime_type.startswith('image/'):

        await message.answer(

            "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚ùå\n"

            "–°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"

            "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑",

            parse_mode="HTML"

        )

        return

    

    file_id = message.document.file_id

    order_id = (await state.get_data()).get('order_id')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

    file_ext = os.path.splitext(message.document.file_name)[1] if message.document.file_name else '.jpg'

    filename = f"order_{order_id}_joint_photo{file_ext}"

    await download_and_save_photo(message.bot, file_id, "uploads", filename)

    await state.update_data(joint_photo=filename)

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    from db import save_joint_photo

    await save_joint_photo(order_id, filename)

    

    await finish_photos(message, state)

    await log_state(message, state)



@dp.message(StateFilter(PhotoStates.joint_photo), F.text)

async def not_photo_joint(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    await save_user_message_to_history(message, state, "–¢–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ: ")

    await message.answer(

        "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚ùå\n"

        "–°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"

        "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑",

        parse_mode="HTML"

    )

    

    await log_state(message, state)



# –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å

@dp.callback_query(F.data == "skip_joint_photo")

async def skip_joint_photo(callback: types.CallbackQuery, state: FSMContext):

    try:

        logging.info(f"üîò –ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ —Ñ–æ—Ç–æ –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")

        await callback.answer()

        

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É - –≤—ã–±–æ—Ä —Å—Ç–∏–ª—è

        await finish_photos(callback, state)

        

        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ skip_joint_photo: {e}")

        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        await log_state(callback.message, state)



# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —ç—Ç–∞–ø–∞ —Ñ–æ—Ç–æ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É

async def finish_photos(message_or_callback, state: FSMContext):

    await update_order_progress(state, status="photos_uploaded")

    

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    from db import get_book_styles

    styles = await get_book_styles()

    

    if styles:

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫

        header_text = "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æüìì\n" + \
                     "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, –∞ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ–±–Ω—ã–µ —Å—é–∂–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∂—É—Ç, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è ‚ú®\n\n"

        if hasattr(message_or_callback, 'message'):

            await message_or_callback.message.edit_text(header_text, parse_mode="HTML")

            await message_or_callback.answer()

        else:

            await message_or_callback.answer(header_text, parse_mode="HTML")

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å—Ç–∏–ª—å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å —Ñ–æ—Ç–æ

        for i, style in enumerate(styles):

            photo_path = f"styles/{style['filename']}"

            caption = f"<b>{i+1}. {style['name']}</b>\n{style['description']}"

            

            if os.path.exists(photo_path):

                if hasattr(message_or_callback, 'message'):

                    await message_or_callback.message.answer_photo(

                        types.FSInputFile(photo_path),

                        caption=caption,

                        parse_mode="HTML"

                    )

                else:

                    await message_or_callback.answer_photo(

                        types.FSInputFile(photo_path),

                        caption=caption,

                        parse_mode="HTML"

                    )

            else:

                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç

                if hasattr(message_or_callback, 'message'):

                    await message_or_callback.message.answer(caption, parse_mode="HTML")

                else:

                    await message_or_callback.answer(caption, parse_mode="HTML")

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(

                text=style['name'] if '‚Äî' in style['name'] else f"{style['name']} {'üè° ‚Äî –±—É–¥–µ—Ç –ø–æ–∑–∂–µ' if 'Ghibli' in style['name'] else 'üë©‚Äç‚ù§Ô∏è‚Äçüë® ‚Äî –±—É–¥–µ—Ç –ø–æ–∑–∂–µ' if 'Love' in style['name'] else ''}",

                callback_data="style_pixar" if 'Pixar' in style['name'] else "style_ghibli_placeholder" if 'Ghibli' in style['name'] else "style_loveis_placeholder" if 'Love' in style['name'] else f"style_{style['id']}"

            )]

            for style in styles

        ])

        

        if hasattr(message_or_callback, 'message'):

            await message_or_callback.message.answer(

                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:",

                reply_markup=keyboard

            )

        else:

            await message_or_callback.answer(

                "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å:",

                reply_markup=keyboard

            )

    else:

        # Fallback –Ω–∞ —Å—Ç–∞—Ä—ã–µ —Å—Ç–∏–ª–∏, –µ—Å–ª–∏ –≤ –±–∞–∑–µ –Ω–µ—Ç

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="Pixar üåà", callback_data="style_pixar")],

            [InlineKeyboardButton(text="Ghibli üè°", callback_data="style_ghibli_placeholder")],

            [InlineKeyboardButton(text="Love is üë©‚Äç‚ù§Ô∏è‚Äçüë®", callback_data="style_loveis_placeholder")],

        ])

        

        if hasattr(message_or_callback, 'message'):

            await message_or_callback.message.edit_text(

                "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æüìì\n"

                "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, –∞ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ–±–Ω—ã–µ —Å—é–∂–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∂—É—Ç, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è ‚ú®",

                reply_markup=keyboard

            )

            await message_or_callback.answer()

        else:

            await message_or_callback.answer("–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æüìì\n"

                                            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, –∞ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ–±–Ω—ã–µ —Å—é–∂–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∂—É—Ç, –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è ‚ú®", reply_markup=keyboard)

    

    await state.set_state(CoverStates.choosing_style)

    await log_state(message_or_callback, state)



@dp.callback_query(F.data == "show_book")

async def show_book(callback: types.CallbackQuery, state: FSMContext):

    user_id = callback.from_user.id

    

    try:

        book_data = await get_user_book(user_id)

        if book_data and book_data['generated_book']:

            # –†–∞–∑–±–∏–≤–∞–µ–º –∫–Ω–∏–≥—É –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è

            book_text = book_data['generated_book']

            if len(book_text) > 4000:

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 4000 —Å–∏–º–≤–æ–ª–æ–≤

                await callback.message.edit_text(

                    f"{book_text[:4000]}...\n\n[–ö–Ω–∏–≥–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è]",

                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[

                        [InlineKeyboardButton(text="üìñ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ", callback_data="show_book_continue")],

                        [InlineKeyboardButton(text="üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="start_create_book")]

                    ])

                )

            else:

                await callback.message.edit_text(

                    book_text,

                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[

                        [InlineKeyboardButton(text="üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="start_create_book")]

                    ])

                )

        else:

            await callback.message.edit_text(

                "–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–Ω–∏–≥—É.",

                reply_markup=InlineKeyboardMarkup(inline_keyboard=[

                    [InlineKeyboardButton(text="üîÑ –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é", callback_data="start_create_book")]

                ])

            )

    except Exception as e:

        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–Ω–∏–≥–∏: {e}")

        await callback.message.edit_text(

            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–Ω–∏–≥–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",

            reply_markup=InlineKeyboardMarkup(inline_keyboard=[

                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="start_create_book")]

            ])

        )

    await callback.answer()

    await log_state(callback.message, state)



# –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è ‚Äî –∑–∞–¥–∞—ë–º –≤–æ–ø—Ä–æ—Å—ã

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥–ª—É—à–µ–∫ —Å—Ç–∏–ª–µ–π

@dp.callback_query(F.data == "style_ghibli_placeholder")

async def ghibli_placeholder(callback: types.CallbackQuery):

    await callback.answer("–°—Ç–∏–ª—å Ghibli –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç! üè°", show_alert=True)



@dp.callback_query(F.data == "style_loveis_placeholder")

async def loveis_placeholder(callback: types.CallbackQuery):

    await callback.answer("–°—Ç–∏–ª—å Love is –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç! üë©‚Äç‚ù§Ô∏è‚Äçüë®", show_alert=True)



@dp.callback_query(F.data == "style_pixar")

async def pixar_style(callback: types.CallbackQuery, state: FSMContext):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∏–ª—è Pixar"""

    await callback.answer()

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–ª—å

    await state.update_data(style="Pixar", style_id="pixar")

    

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏

    data = await state.get_data()

    relation = data.get("relation")

    recipient_name = data.get("recipient_name")

    

    if recipient_name:

        who = recipient_name

    elif relation:

        who = relation.lower()

    else:

        who = "–º–∞–º–æ–π"

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–≤—è–∑–∏

    gender = data.get("gender")

    questions = get_questions_for_relation(relation, gender)

    await state.update_data(story_questions=questions)

    

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å

    first_question = questions["q1"]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text=option, callback_data=f"q1_{i}")] 

        for i, option in enumerate(first_question["options"])

    ] + [[InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="q1_other")]])

    

    question_text = first_question["text"].format(who=who)

    await callback.message.edit_text(question_text, reply_markup=keyboard)

    await state.set_state(StoryQuestionsStates.q1)

    await log_state(callback.message, state)



@dp.callback_query(F.data.startswith("style_"))

async def style_chosen(callback: types.CallbackQuery, state: FSMContext):

    style_id = callback.data.replace("style_", "")

    

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∏–ª–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    from db import get_book_styles

    styles = await get_book_styles()

    

    # –ò—â–µ–º —Å—Ç–∏–ª—å –ø–æ ID –∏–ª–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)

    selected_style = None

    for style in styles:

        if str(style['id']) == style_id or style['name'].lower() == style_id.lower():

            selected_style = style

            break

    

    if selected_style:

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å—Ç–∏–ª—è –∏ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ

        await state.update_data(style=selected_style['name'], style_id=selected_style['id'])

        style = selected_style['name']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ª–æ–≥–∏–∫–∏

    else:

        # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∏–ª–µ–π

        await state.update_data(style=style_id)

        style = style_id

    data = await state.get_data()

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞

    relation = data.get("relation")

    recipient_name = data.get("recipient_name")
    
    # –û–¢–õ–ê–î–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ recipient_name –Ω–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ
    logging.info(f"üîç –û–¢–õ–ê–î–ö–ê style_chosen: recipient_name='{recipient_name}', relation='{relation}'")

    if recipient_name:

        who = recipient_name

    elif relation:

        who = relation.lower()

    else:

        who = "–º–∞–º–æ–π"
        
    # –í–ê–ñ–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ recipient_name —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if recipient_name:
        await state.update_data(recipient_name=recipient_name)
        logging.info(f"üíæ –ü–ï–†–ï–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–û recipient_name –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏: '{recipient_name}'")

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–≤—è–∑–∏

    gender = data.get("gender")

    print(f"üîç –û–¢–õ–ê–î–ö–ê: relation = '{relation}', gender = '{gender}'")

    questions = get_questions_for_relation(relation, gender)

    print(f"üîç –û–¢–õ–ê–î–ö–ê: questions = {questions}")

    await state.update_data(story_questions=questions)

    

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å

    first_question = questions["q1"]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text=option, callback_data=f"q1_{i}")] 

        for i, option in enumerate(first_question["options"])

    ] + [[InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="q1_other")]])

    

    question_text = first_question["text"].format(who=who)

    await callback.message.edit_text(question_text, reply_markup=keyboard)

    await state.set_state(StoryQuestionsStates.q1)

    await callback.answer()

    await log_state(callback.message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –∫–Ω–∏–≥–∏
@dp.message(StateFilter(CoverStates.choosing_style), F.text)
async def handle_text_in_style_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∏–ª—è –∫–Ω–∏–≥–∏"""
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ choosing_style: '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    await save_user_message_to_history(message, state, "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∏–ª—è: ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    current_state = await state.get_state()
    
    if current_state and current_state != "CoverStates:choosing_style":
        await message.answer("‚ùå –í—ã–±–æ—Ä —Å—Ç–∏–ª—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.")
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    await log_state(message, state)


def get_questions_for_relation(relation, gender=None):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–≤—è–∑–∏"""

    print(f"üîç –û–¢–õ–ê–î–ö–ê get_questions_for_relation: –ø–æ–ª—É—á–µ–Ω relation = '{relation}', gender = '{gender}'")

    

    # –ú–∞–ø–ø–∏–Ω–≥ –∫–æ—Ä–æ—Ç–∫–∏—Ö –Ω–∞–∑–≤–∞–Ω–∏–π –Ω–∞ –ø–æ–ª–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –ø–æ–ª–∞

    def get_mapped_relation(relation, gender):
        print(f"üîç –û–¢–õ–ê–î–ö–ê get_mapped_relation: relation = '{relation}', gender = '{gender}'")

        if relation == "–î–µ–¥—É—à–∫–µ":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–í–Ω—É–∫ - –¥–µ–¥—É—à–∫–µ"
            else:
                return "–í–Ω—É—á–∫–∞ - –¥–µ–¥—É—à–∫–µ"

        elif relation == "–ë–∞–±—É—à–∫–µ":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–í–Ω—É–∫ - –±–∞–±—É—à–∫–µ"
            else:
                return "–í–Ω—É—á–∫–∞ - –±–∞–±—É—à–∫–µ"

        elif relation == "–ú–∞–º–µ":

            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":

                return "–°—ã–Ω ‚Äì –º–∞–º–µ"

            else:
                return "–î–æ—á–∫–∞- –º–∞–º–µ"

        elif relation == "–ü–∞–ø–µ":

            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":

                return "–°—ã–Ω ‚Äì –ø–∞–ø–µ"

            else:

                return "–î–æ—á–∫–∞- –ø–∞–ø–µ"

        elif relation == "–°—ã–Ω—É":

            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–ü–∞–ø–∞ - —Å—ã–Ω—É"
            else:
                return "–ú–∞–º–∞ - —Å—ã–Ω—É"

        elif relation == "–î–æ—á–∫–µ" or relation == "–î–æ—á–µ—Ä–∏":

            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–ü–∞–ø–∞ - –¥–æ—á–∫–µ"
            else:
                return "–ú–∞–º–∞ - –¥–æ—á–∫–µ"

        elif relation == "–ë—Ä–∞—Ç—É":

            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":

                return "–ë—Ä–∞—Ç ‚Äì –±—Ä–∞—Ç—É"

            else:

                return "–°–µ—Å—Ç—Ä–∞ - –±—Ä–∞—Ç—É"

        elif relation == "–°–µ—Å—Ç—Ä–µ":

            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":

                return "–ë—Ä–∞—Ç ‚Äì —Å–µ—Å—Ç—Ä–µ"

            else:
                return "–°–µ—Å—Ç—Ä–∞ - —Å–µ—Å—Ç—Ä–µ"

        elif relation == "–ü–∞—Ä–Ω—é":

            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                result = "–ü–∞—Ä–µ–Ω—å - –¥–µ–≤—É—à–∫–µ"
                print(f"üîç –û–¢–õ–ê–î–ö–ê get_mapped_relation: –ü–∞—Ä–Ω—é + –ø–∞—Ä–µ–Ω—å = '{result}'")
                return result

            else:
                result = "–î–µ–≤—É—à–∫–∞ - –ø–∞—Ä–Ω—é"
                print(f"üîç –û–¢–õ–ê–î–ö–ê get_mapped_relation: –ü–∞—Ä–Ω—é + –¥–µ–≤—É—à–∫–∞ = '{result}'")
                return result

        elif relation == "–î–µ–≤—É—à–∫–µ":

            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                result = "–ü–∞—Ä–µ–Ω—å - –¥–µ–≤—É—à–∫–µ"
                print(f"üîç –û–¢–õ–ê–î–ö–ê get_mapped_relation: –î–µ–≤—É—à–∫–µ + –ø–∞—Ä–µ–Ω—å = '{result}'")
                return result

            else:
                result = "–î–µ–≤—É—à–∫–∞ - –ø–∞—Ä–Ω—é"
                print(f"üîç –û–¢–õ–ê–î–ö–ê get_mapped_relation: –î–µ–≤—É—à–∫–µ + –¥–µ–≤—É—à–∫–∞ = '{result}'")
                return result

        elif relation == "–ú—É–∂—É":

            # –ñ–µ–Ω–∞ –≤—ã–±–∏—Ä–∞–µ—Ç "–ú—É–∂—É" ‚Üí "–ñ–µ–Ω–∞ - –º—É–∂—É"

            return "–ñ–µ–Ω–∞ - –º—É–∂—É"

        elif relation == "–ñ–µ–Ω–µ":

            # –ú—É–∂ –≤—ã–±–∏—Ä–∞–µ—Ç "–ñ–µ–Ω–µ" ‚Üí "–ú—É–∂ - –∂–µ–Ω–µ"

            return "–ú—É–∂ - –∂–µ–Ω–µ"

        elif relation == "–ü–æ–¥—Ä—É–≥–µ":

            return "–ü–æ–¥—Ä—É–≥–∞ - –ø–æ–¥—Ä—É–≥–µ"

        else:
            result = relation  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —ç—Ç–æ —É–∂–µ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            print(f"üîç –û–¢–õ–ê–î–ö–ê get_mapped_relation: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º '{result}'")
            return result

    

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å —É—á–µ—Ç–æ–º –ø–æ–ª–∞

    old_relation = relation

    relation = get_mapped_relation(relation, gender)

    if old_relation != relation:

        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–ª–∏ '{old_relation}' –≤ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: '{relation}' (gender: '{gender}')")

    else:

        print(f"üîç –û–¢–õ–ê–î–ö–ê: relation '{relation}' –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π")

    

    questions = {

        "–î–µ–≤—É—à–∫–∞ - –ø–∞—Ä–Ω—é": {

            "q1": {

                "text": "–ö–∞–∫ –≤—ã –ª—é–±–∏—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–æ–º–∞?",

                "options": ["–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞ —Ñ–∏–ª—å–º", "–ì–æ—Ç–æ–≤–∏–º –≤–º–µ—Å—Ç–µ —É–∂–∏–Ω", "–í–∞–ª—è–µ–º—Å—è –≤ –∫—Ä–æ–≤–∞—Ç–∏ –≤ –æ–±–Ω–∏–º–∫—É"]

            },

            "q2": {

                "text": "–ß—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –≤–º–µ—Å—Ç–µ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞?",

                "options": ["–ò–≥—Ä–∞–µ–º –≤ –Ω–∞—Å—Ç–æ–ª–∫–∏ —Å –¥—Ä—É–∑—å—è–º–∏", "–ì–æ—Ç–æ–≤–∏–º –¥–æ–º –∫ –ø—Ä–∞–∑–¥–Ω–∏–∫—É", "–•–æ–¥–∏–º –∑–∞ –ø–æ–∫—É–ø–∫–∞–º–∏"]

            },

            "q3": {

                "text": "–ö–∞–∫ –≤—ã –ª—é–±–∏—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ –≤–Ω–µ –¥–æ–º–∞?",

                "options": ["–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–í–µ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏", "–ü–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä"]

            }

        },

        "–ü–∞—Ä–µ–Ω—å - –¥–µ–≤—É—à–∫–µ": {

            "q1": {

                "text": "–ö–∞–∫ –≤—ã –ª—é–±–∏—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–æ–º–∞?",

                "options": ["–°–º–æ—Ç—Ä–∏–º –¥–æ–º–∞ —Ñ–∏–ª—å–º", "–ì–æ—Ç–æ–≤–∏–º –≤–º–µ—Å—Ç–µ —É–∂–∏–Ω", "–í–∞–ª—è–µ–º—Å—è –≤ –∫—Ä–æ–≤–∞—Ç–∏ –≤ –æ–±–Ω–∏–º–∫—É"]

            },

            "q2": {

                "text": "–ß—Ç–æ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –≤–º–µ—Å—Ç–µ –∫–∞–∫ –∫–æ–º–∞–Ω–¥–∞?",

                "options": ["–ì–æ—Ç–æ–≤–∏–º –¥–æ–º –∫ –ø—Ä–∞–∑–¥–Ω–∏–∫—É", "–•–æ–¥–∏–º –∑–∞ –ø–æ–∫—É–ø–∫–∞–º–∏", "–ò–≥—Ä–∞–µ–º –≤ –Ω–∞—Å—Ç–æ–ª–∫–∏ —Å –¥—Ä—É–∑—å—è–º–∏"]

            },

            "q3": {

                "text": "–ö–∞–∫ –≤—ã –ª—é–±–∏—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—ã—Ö–æ–¥–Ω—ã–µ –≤–Ω–µ –¥–æ–º–∞?",

                "options": ["–°–æ–≤–º–µ—Å—Ç–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–í–µ—á–µ—Ä–Ω–∏–µ –ø—Ä–æ–≥—É–ª–∫–∏", "–ü–æ—Ö–æ–¥ –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä"]

            }

        },

        "–ñ–µ–Ω–∞ - –º—É–∂—É": {

            "q1": {

                "text": "–ö–∞–∫–æ–π —Å–∞–º—ã–π —è—Ä–∫–∏–π –¥–µ–Ω—å –≤ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö?",

                "options": ["–ù–∞—à –ø–µ—Ä–≤—ã–π –ø–æ—Ü–µ–ª—É–π", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞", "–ö–æ–≥–¥–∞ –º—ã —É–∑–Ω–∞–ª–∏ –æ –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏"]

            },

            "q2": {

                "text": "–ß—Ç–æ —Ç—ã —Ü–µ–Ω–∏—à—å –≤ –º—É–∂–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",

                "options": ["–û–Ω –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ–Ω—è", "–û–Ω –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ–±–æ –º–Ω–µ, –∫–æ–≥–¥–∞ —è –±–æ–ª–µ—é", "–û–Ω –±–∞–ª—É–µ—Ç –º–µ–Ω—è –ø–æ–¥–∞—Ä–∫–∞–º–∏"]

            },

            "q3": {

                "text": "–ö–∞–∫–æ–π –∑–Ω–∞–∫ –≤–Ω–∏–º–∞–Ω–∏—è –æ—Ç –º—É–∂–∞ —É –≤–∞—Å —Å–∞–º—ã–π –ª—é–±–∏–º—ã–π?",

                "options": ["–û–Ω –≥–æ—Ç–æ–≤–∏—Ç —É–∂–∏–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –º–µ–Ω—è", "–û–Ω –ø—Ä–æ—è–≤–ª—è–µ—Ç —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞", "–û–Ω –Ω–µ–∂–Ω–æ —Ü–µ–ª—É–µ—Ç –º–µ–Ω—è –≤ –ª–æ–±"]

            }

        },

        "–ú—É–∂ - –∂–µ–Ω–µ": {

            "q1": {

                "text": "–ö–∞–∫–æ–π —Å–∞–º—ã–π —è—Ä–∫–∏–π –¥–µ–Ω—å –≤ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö?",

                "options": ["–ù–∞—à –ø–µ—Ä–≤—ã–π –ø–æ—Ü–µ–ª—É–π", "–ù–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ", "–†–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–±–µ–Ω–∫–∞"]

            },

            "q2": {

                "text": "–ß—Ç–æ —Ç—ã —Ü–µ–Ω–∏—à—å –≤ –∂–µ–Ω–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?",

                "options": ["–û–Ω–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ–Ω—è", "–û–Ω–∞ –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ–±–æ –º–Ω–µ, –∫–æ–≥–¥–∞ —è –±–æ–ª–µ—é", "–û–Ω–∞ –≥–æ—Ç–æ–≤–∏—Ç –¥–ª—è –Ω–∞—Å —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ —É–∂–∏–Ω—ã"]

            },

            "q3": {

                "text": "–ö–∞–∫ –≤—ã –ª—é–±–∏—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è —Å –∂–µ–Ω–æ–π –≤–¥–≤–æ–µ–º?",

                "options": ["–ü—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å, –∏–∑—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –º–µ—Å—Ç–∞", "–ì—É–ª—è—Ç—å –≤ –ø–∞—Ä–∫–µ", "–õ–µ–∂–∞—Ç—å –≤–¥–≤–æ–µ–º –≤ –æ–±–Ω–∏–º–∫—É –∏ —Å–º–æ—Ç—Ä–µ—Ç—å –∫–∏–Ω–æ"]

            }

        },

        "–î–æ—á–∫–∞- –º–∞–º–µ": {

            "q1": {

                "text": "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–∞–º–æ–µ –Ω–µ–∂–Ω–æ–µ –∏–ª–∏ —è—Ä–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–∞–º–µ?",

                "options": ["–ú–∞–º–∏–Ω–∞ –µ–¥–∞ - —Å–∞–º–∞—è –≤–∫—É—Å–Ω–∞—è –≤ –º–∏—Ä–µ", "–ú–∞–º–∞ —É—Å—Ç—Ä–∞–∏–≤–∞–ª–∞ –º–Ω–µ –ª—É—á—à–∏–µ —Å—é—Ä–ø—Ä–∏–∑—ã", "–ú–∞–º–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–∞ –º–µ–Ω—è"]

            },

            "q2": {

                "text": "–ß–µ–º –≤—ã –ª—é–±–∏–ª–∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å –º–∞–º–æ–π –≤ –¥–µ—Ç—Å—Ç–≤–µ?",

                "options": ["–ù–∞—Ä—è–∂–∞—Ç—å —ë–ª–∫—É", "–ì–æ—Ç–æ–≤–∏—Ç—å –≤–º–µ—Å—Ç–µ", "–°–º–æ—Ç—Ä–µ—Ç—å –≤–º–µ—Å—Ç–µ –ª—é–±–∏–º—ã–π —Å–µ—Ä–∏–∞–ª"]

            },

            "q3": {

                "text": "–ß–µ–º—É –≤–∞–∂–Ω–æ–º—É –≤–∞—Å –Ω–∞—É—á–∏–ª–∞ –º–∞–º–∞?",

                "options": ["–ü–æ–ª—É—á–∞—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞", "–°–æ–¥–µ—Ä–∂–∞—Ç—å –¥–æ–º –≤ —á–∏—Å—Ç–æ—Ç–µ", "–õ—é–±–∏—Ç—å —Å–µ–±—è"]

            }

        },

        "–ú–∞–º–∞ - –¥–æ—á–∫–µ": {

            "q1": {

                "text": "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–∞–º–æ–µ –Ω–µ–∂–Ω–æ–µ –∏–ª–∏ —è—Ä–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ—á–µ—Ä–∏?",

                "options": ["–ö–æ–≥–¥–∞ —è –≤–ø–µ—Ä–≤—ã–µ –≤–∑—è–ª–∞ –µ–µ –Ω–∞ —Ä—É–∫–∏", "–ö–æ–≥–¥–∞ –æ–Ω–∞ –≤–ø–µ—Ä–≤—ã–µ —Å–∫–∞–∑–∞–ª–∞ \"–º–∞–º–∞\"", "–ö–æ–≥–¥–∞ –æ–Ω–∞ –ø–æ–¥–∞—Ä–∏–ª–∞ –º–Ω–µ –≤–Ω—É–∫–∞/–≤–Ω—É—á–∫—É"]

            },

            "q2": {

                "text": "–ß—Ç–æ –≤—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ª—é–±–∏—Ç–µ –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –¥–æ—á–µ—Ä—å—é?",

                "options": ["–ì–æ—Ç–æ–≤–∏—Ç—å –≤–∫—É—Å–Ω—ã–π —É–∂–∏–Ω", "–ù–∞—Ä—è–∂–∞—Ç—å —ë–ª–∫—É", "–°–º–æ—Ç—Ä–µ—Ç—å –∫–∏–Ω–æ –≤–µ—á–µ—Ä–æ–º"]

            },

            "q3": {

                "text": "–ö–æ–≥–¥–∞ –≤—ã –∏—Å–ø—ã—Ç–∞–ª–∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ —ç–º–æ—Ü–∏–∏ —Ä—è–¥–æ–º —Å –¥–æ—á–µ—Ä—å—é?",

                "options": ["–ö–æ–≥–¥–∞ –æ–Ω–∞ –≤—ã—Å—Ç—É–ø–∞–ª–∞ –Ω–∞ —Å—Ü–µ–Ω–µ", "–ö–æ–≥–¥–∞ —É–≤–∏–¥–µ–ª–∞ –µ—ë –Ω–µ–≤–µ—Å—Ç–æ–π", "–ö–æ–≥–¥–∞ –æ–Ω–∞ —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∞ –º–Ω–µ —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç"]

            }

        },

        "–ü–∞–ø–∞ - –¥–æ—á–∫–µ": {

            "q1": {

                "text": "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–∞–º–æ–µ –Ω–µ–∂–Ω–æ–µ –∏–ª–∏ —è—Ä–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–æ—á–µ—Ä–∏?",

                "options": ["–ö–æ–≥–¥–∞ —è –≤–ø–µ—Ä–≤—ã–µ –≤–∑—è–ª –µ–µ –Ω–∞ —Ä—É–∫–∏", "–ö–æ–≥–¥–∞ –æ–Ω–∞ –≤–ø–µ—Ä–≤—ã–µ —Å–∫–∞–∑–∞–ª–∞ \"–ø–∞–ø–∞\"", "–ö–æ–≥–¥–∞ –æ–Ω–∞ –ø–æ–¥–∞—Ä–∏–ª–∞ –º–Ω–µ –≤–Ω—É–∫–∞/–≤–Ω—É—á–∫—É"]

            },

            "q2": {

                "text": "–ß—Ç–æ –≤—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ª—é–±–∏—Ç–µ –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –¥–æ—á–µ—Ä—å—é?",

                "options": ["–ì—É–ª—è—Ç—å –≤–º–µ—Å—Ç–µ –ø–æ –ø–∞—Ä–∫—É", "–ö–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ", "–°–º–æ—Ç—Ä–µ—Ç—å –ª—é–±–∏–º—ã–µ –º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã"]

            },

            "q3": {

                "text": "–ö–æ–≥–¥–∞ –≤—ã –∏—Å–ø—ã—Ç–∞–ª–∏ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ —ç–º–æ—Ü–∏–∏ —Ä—è–¥–æ–º —Å –¥–æ—á–µ—Ä—å—é?",

                "options": ["–ö–æ–≥–¥–∞ –æ–Ω–∞ –≤—ã—Å—Ç—É–ø–∞–ª–∞ –Ω–∞ —Å—Ü–µ–Ω–µ", "–ö–æ–≥–¥–∞ —É–≤–∏–¥–µ–ª –µ—ë –Ω–µ–≤–µ—Å—Ç–æ–π", "–ö–æ–≥–¥–∞ –æ–Ω–∞ —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∞ –º–Ω–µ —Å–≤–æ–π —Å–µ–∫—Ä–µ—Ç"]

            }

        },

        "–ú–∞–º–∞ - —Å—ã–Ω—É": {

            "q1": {

                "text": "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–∞–º–æ–µ –Ω–µ–∂–Ω–æ–µ –∏–ª–∏ —è—Ä–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å—ã–Ω–µ?",

                "options": ["–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —è –≤–∑—è–ª–∞ –µ–≥–æ –Ω–∞ —Ä—É–∫–∏", "–ö–æ–≥–¥–∞ –æ–Ω –≤–ø–µ—Ä–≤—ã–µ —Å–∫–∞–∑–∞–ª \"–º–∞–º–∞\"", "–ö–æ–≥–¥–∞ —è –æ—Ç–≤–µ–ª–∞ –µ–≥–æ –≤ 1 –∫–ª–∞—Å—Å"]

            },

            "q2": {

                "text": "–ß–µ–º –≤—ã –ª—é–±–∏–ª–∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º?",

                "options": ["–ì–æ—Ç–æ–≤–∏—Ç—å –≤–º–µ—Å—Ç–µ –≤–∫—É—Å–Ω—ã–π —É–∂–∏–Ω", "–°–ª—É—à–∞—Ç—å –µ–≥–æ –∑–∞–±–∞–≤–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏–∏", "–°–º–æ—Ç—Ä–µ—Ç—å –≤–º–µ—Å—Ç–µ –∫–∏–Ω–æ –∏–ª–∏ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä"]

            },

            "q3": {

                "text": "–ö–æ–≥–¥–∞ —Ç—ã –∏—Å–ø—ã—Ç–∞–ª–∞ –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ —ç–º–æ—Ü–∏–∏ —Ä—è–¥–æ–º —Å —Å—ã–Ω–æ–º?",

                "options": ["–ö–æ–≥–¥–∞ –æ–Ω –∑–∞–∫–æ–Ω—á–∏–ª —à–∫–æ–ª—É –∏–ª–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç", "–ö–æ–≥–¥–∞ –æ–Ω –ø–æ–±–µ–¥–∏–ª –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö", "–ö–æ–≥–¥–∞ —É–≤–∏–¥–µ–ª–∞ –µ–≥–æ –∂–µ–Ω–∏—Ö–æ–º –Ω–∞ —Å–≤–∞–¥—å–±–µ"]

            }

        },

        "–ü–∞–ø–∞ - —Å—ã–Ω—É": {

            "q1": {

                "text": "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–∞–º–æ–µ –Ω–µ–∂–Ω–æ–µ –∏–ª–∏ —è—Ä–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å—ã–Ω–µ?",

                "options": ["–ü–µ—Ä–≤—ã–π –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —è –≤–∑—è–ª –µ–≥–æ –Ω–∞ —Ä—É–∫–∏", "–ö–æ–≥–¥–∞ –æ–Ω –≤–ø–µ—Ä–≤—ã–µ —Å–∫–∞–∑–∞–ª \"–ø–∞–ø–∞\"", "–ö–æ–≥–¥–∞ —è –æ—Ç–≤–µ–ª –µ–≥–æ –≤ 1 –∫–ª–∞—Å—Å"]

            },

            "q2": {

                "text": "–ß–µ–º –≤—ã –ª—é–±–∏–ª–∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å —Å—ã–Ω–æ–º?",

                "options": ["–ò–≥—Ä–∞—Ç—å –≤–º–µ—Å—Ç–µ –≤ —Ñ—É—Ç–±–æ–ª", "–ú–∞—Å—Ç–µ—Ä–∏—Ç—å —á—Ç–æ-—Ç–æ –¥–æ–º–∞", "–°–º–æ—Ç—Ä–µ—Ç—å –º–∞—Ç—á–∏ –ø–æ –¢–í"]

            },

            "q3": {

                "text": "–ö–æ–≥–¥–∞ —Ç—ã –∏—Å–ø—ã—Ç–∞–ª –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–µ —ç–º–æ—Ü–∏–∏ —Ä—è–¥–æ–º —Å —Å—ã–Ω–æ–º?",

                "options": ["–ö–æ–≥–¥–∞ –æ–Ω –∑–∞–∫–æ–Ω—á–∏–ª —à–∫–æ–ª—É –∏–ª–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç", "–ö–æ–≥–¥–∞ –æ–Ω –ø–æ–±–µ–¥–∏–ª –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö", "–ö–æ–≥–¥–∞ —É–≤–∏–¥–µ–ª –µ–≥–æ –∂–µ–Ω–∏—Ö–æ–º –Ω–∞ —Å–≤–∞–¥—å–±–µ"]

            }

        },

        "–°–µ—Å—Ç—Ä–∞ - —Å–µ—Å—Ç—Ä–µ": {

            "q1": {

                "text": "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–∞–º–æ–µ –Ω–µ–∂–Ω–æ–µ –∏–ª–∏ —è—Ä–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–µ—Å—Ç—Ä–µ?",

                "options": ["–ö–æ–≥–¥–∞ –µ–µ –ø—Ä–∏–Ω–µ—Å–ª–∏ –¥–æ–º–æ–π –∏–∑ —Ä–æ–¥–¥–æ–º–∞", "–ö–æ–≥–¥–∞ –æ–Ω–∞ –∑–∞—â–∏—Ç–∏–ª–∞ –º–µ–Ω—è", "–ö–æ–≥–¥–∞ –æ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–∞ –º–µ–Ω—è –≤ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏"]

            },

            "q2": {

                "text": "–ß—Ç–æ –≤—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ª—é–±–∏—Ç–µ –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å —Å–µ—Å—Ç—Ä–æ–π?",

                "options": ["–°–ø–ª–µ—Ç–Ω–∏—á–∞—Ç—å", "–ì–æ—Ç–æ–≤–∏—Ç—å –≤–º–µ—Å—Ç–µ", "–°–º–æ—Ç—Ä–µ—Ç—å –º—É–ª—å—Ñ–∏–ª—å—Ñ—ã –∏–ª–∏ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä"]

            },

            "q3": {

                "text": "–ß–µ–º—É —Ç–µ–±—è –Ω–∞—É—á–∏–ª–∞ —Å–µ—Å—Ç—Ä–∞?",

                "options": ["–ß–∏—Ç–∞—Ç—å –∏–ª–∏ –¥–µ–ª–∞—Ç—å —É—Ä–æ–∫–∏", "–ù–∞—É—á–∏–ª–∞ –¥–µ–ª–∏—Ç—å—Å—è", "–ù–∞–Ω–æ—Å–∏—Ç—å –º–∞–∫–∏—è–∂ –∏–ª–∏ —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —Å–æ–±–æ–π"]

            }

        },

        "–°–µ—Å—Ç—Ä–∞ - –±—Ä–∞—Ç—É": {

            "q1": {

                "text": "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–∞–º–æ–µ –Ω–µ–∂–Ω–æ–µ –∏–ª–∏ —è—Ä–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–∞—Ç–µ?",

                "options": ["–ö–æ–≥–¥–∞ –æ–Ω —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π —à–∞–≥", "–ö–æ–≥–¥–∞ –æ–Ω –∑–∞—â–∏—Ç–∏–ª –º–µ–Ω—è", "–ö–æ–≥–¥–∞ –º—ã —Å –Ω–∏–º –æ–±–∏–¥–µ–ª–∏—Å—å –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π"]

            },

            "q2": {

                "text": "–ß—Ç–æ –≤—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ª—é–±–∏—Ç–µ –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –±—Ä–∞—Ç–æ–º?",

                "options": ["–ò–≥—Ä–∞—Ç—å –≤–¥–≤–æ–µ–º", "–ì–æ—Ç–æ–≤–∏—Ç—å —Å—é—Ä–ø—Ä–∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—è–º", "–°–º–æ—Ç—Ä–µ—Ç—å –∫–∏–Ω–æ –∏–ª–∏ —Ç–µ–ª–µ–≤–∏–∑–æ—Ä"]

            },

            "q3": {

                "text": "–ß–µ–º—É —Ç–µ–±—è –Ω–∞—É—á–∏–ª –±—Ä–∞—Ç?",

                "options": ["–ß–∏—Ç–∞—Ç—å –∏–ª–∏ –¥–µ–ª–∞—Ç—å —É—Ä–æ–∫–∏", "–ß—Ç–æ —è –º–æ–≥—É –≤—Å–µ–≥–¥–∞ –Ω–∞ –Ω–µ–≥–æ –ø–æ–ª–æ–∂–∏—Ç—å—Å—è", "–ö–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ"]

            }

        },

        "–ü–æ–¥—Ä—É–≥–∞ - –ø–æ–¥—Ä—É–≥–µ": {

            "q1": {

                "text": "–ß—Ç–æ –¥–ª—è —Ç–µ–±—è —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ –≤ —Ç–≤–æ–µ–π –ø–æ–¥—Ä—É–≥–µ?",

                "options": ["–ß—Ç–æ –º—ã –≤–º–µ—Å—Ç–µ –≥—É–ª—è–µ–º", "–ß—Ç–æ –æ–Ω–∞ –≤—Å–µ–≥–¥–∞ –º–µ–Ω—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç", "–ß—Ç–æ –º—ã –º–æ–∂–µ–º –ø–æ—Å–µ–∫—Ä–µ—Ç–Ω–∏—á–∞—Ç—å"]

            },

            "q2": {

                "text": "–ß—Ç–æ –≤—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ª—é–±–∏—Ç–µ –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –ø–æ–¥—Ä—É–≥–æ–π?",

                "options": ["–°–ø–ª–µ—Ç–Ω–∏—á–∞—Ç—å", "–•–æ–¥–∏—Ç—å –Ω–∞ —Ç—É—Å–æ–≤–∫–∏", "–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—Ç—å—Å—è"]

            },

            "q3": {

                "text": "–ß–µ–º—É —Ç–µ–±—è –Ω–∞—É—á–∏–ª–∞ —Ç–≤–æ—è –ø–æ–¥—Ä—É–≥–∞?",

                "options": ["–í–µ—Ä–∏—Ç—å –≤ –∂–µ–Ω—Å–∫—É—é –¥—Ä—É–∂–±—É", "–î–æ–≤–µ—Ä—è—Ç—å —Å–≤–æ–∏ —Å–µ–∫—Ä–µ—Ç—ã", "–í–µ—Ä–∏—Ç—å –≤ —Å–µ–±—è"]

            }

        },

        "–í–Ω—É—á–∫–∞ - –±–∞–±—É—à–∫–µ": {

            "q1": {

                "text": "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–∞–º–æ–µ –Ω–µ–∂–Ω–æ–µ –∏–ª–∏ —è—Ä–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±–∞–±—É—à–∫–µ?",

                "options": ["–ß—Ç–æ –µ–µ –µ–¥–∞ - —Å–∞–º–∞—è –≤–∫—É—Å–Ω–∞—è –≤ –º–∏—Ä–µ", "–ö–∞–∫ –æ–Ω–∞ —á–∏—Ç–∞–ª–∞ —Å–∫–∞–∑–∫–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º", "–ö–∞–∫ –±–∞–±—É—à–∫–∞ –º–µ–Ω—è –æ–±–Ω–∏–º–∞–µ—Ç"]

            },

            "q2": {

                "text": "–ß—Ç–æ –≤—ã –ª—é–±–∏—Ç–µ –¥–µ–ª–∞—Ç—å —Å –±–∞–±—É—à–∫–æ–π –≤–º–µ—Å—Ç–µ?",

                "options": ["–°–ª—É—à–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ –µ–µ –º–æ–ª–æ–¥–æ—Å—Ç–∏", "–ì—É–ª—è—Ç—å –≤ –ø–∞—Ä–∫–µ", "–ü—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –¥–∞—á–µ –∏–ª–∏ –≤ —Å–∞–¥—É"]

            },

            "q3": {

                "text": "–ß–µ–º—É –≤–∞–∂–Ω–æ–º—É —Ç–µ–±—è –Ω–∞—É—á–∏–ª–∞ –±–∞–±—É—à–∫–∞?",

                "options": ["–†–∏—Å–æ–≤–∞—Ç—å", "–í—è–∑–∞—Ç—å", "–ü–µ—á—å –ø–∏—Ä–æ–∂–∫–∏"]

            }

        },

        "–î–æ—á–∫–∞- –ø–∞–ø–µ": {

            "q1": {

                "text": "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–∞–º–æ–µ –Ω–µ–∂–Ω–æ–µ –∏–ª–∏ —è—Ä–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–∞–ø–µ?",

                "options": ["–ö–∞–∫ –ø–∞–ø–∞ –∫–∞—Ç–∞–ª –º–µ–Ω—è –Ω–∞ —Å–≤–æ–µ–π —à–µ–µ", "–ö–∞–∫ –ø–∞–ø–∞ —Ö–æ–¥–∏–ª –Ω–∞ –≤—Å–µ –º–æ–∏ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è", "–ü–∞–ø–∏–Ω—ã —Å–∫–∞–∑–∫–∏ –Ω–∞ –Ω–æ—á—å"]

            },

            "q2": {

                "text": "–ß—Ç–æ –≤—ã –ª—é–±–∏—Ç–µ –¥–µ–ª–∞—Ç—å —Å –ø–∞–ø–æ–π –≤–º–µ—Å—Ç–µ?",

                "options": ["–£–∫—Ä–∞—à–∞—Ç—å –µ–ª–∫—É –∏ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ø—Ä–∞–∑–¥–Ω–∏–∫—É", "–°—Ç—Ä–æ–∏—Ç—å —à–∞–ª–∞—à –∏–∑ –æ–¥–µ—è–ª –¥–æ–º–∞", "–•–æ–¥–∏—Ç—å –Ω–∞ —Ä—ã–±–∞–ª–∫—É"]

            },

            "q3": {

                "text": "–ß–µ–º—É –≤–∞–∂–Ω–æ–º—É —Ç–µ–±—è –Ω–∞—É—á–∏–ª –ø–∞–ø–∞?",

                "options": ["–ö–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ", "–ß—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –Ω–µ–∂–Ω–æ–π –∏ —Ö—Ä—É–ø–∫–æ–π", "–í–æ–¥–∏—Ç—å –º–∞—à–∏–Ω—É"]

            }

        },

        "–í–Ω—É—á–∫–∞ - –¥–µ–¥—É—à–∫–µ": {

            "q1": {

                "text": "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–∞–º–æ–µ –Ω–µ–∂–Ω–æ–µ –∏–ª–∏ —è—Ä–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥—É—à–∫–µ?",

                "options": ["–ö–∞–∫ –æ–Ω –∫–∞—Ç–∞–ª –º–µ–Ω—è –Ω–∞ —à–µ–µ", "–ö–∞–∫ –º—ã –∏–≥—Ä–∞–ª–∏ —Å –Ω–∏–º", "–ò—Å—Ç–æ—Ä–∏–∏ –µ–≥–æ –∂–∏–∑–Ω–∏"]

            },

            "q2": {

                "text": "–ß—Ç–æ –≤—ã –ª—é–±–∏—Ç–µ –¥–µ–ª–∞—Ç—å —Å –¥–µ–¥—É—à–∫–æ–π –≤–º–µ—Å—Ç–µ?",

                "options": ["–•–æ–¥–∏—Ç—å –Ω–∞ —Ä—ã–±–∞–ª–∫—É", "–ü–æ–º–æ–≥–∞—Ç—å –Ω–∞ –¥–∞—á–µ –∏–ª–∏ –≤ —Å–∞–¥—É", "–†–∞–∑–≥–∞–¥—ã–≤–∞—Ç—å –∫—Ä–æ—Å—Å–≤–æ—Ä–¥"]

            },

            "q3": {

                "text": "–ß–µ–º—É –≤–∞–∂–Ω–æ–º—É –¥–µ–¥—É—à–∫–∞ —Ç–µ–±—è –Ω–∞—É—á–∏–ª?",

                "options": ["–ö–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ", "–í–æ–¥–∏—Ç—å –º–∞—à–∏–Ω—É", "–ò–≥—Ä–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç—ã"]

            }

        },

        "–°—ã–Ω ‚Äì –º–∞–º–µ": {

            "q1": {

                "text": "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–∞–º–æ–µ –Ω–µ–∂–Ω–æ–µ –∏–ª–∏ —è—Ä–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –º–∞–º–µ?",

                "options": ["–ú–∞–º–∞ –≥–æ—Ç–æ–≤–∏–ª–∞ –º–æ–∏ –ª—é–±–∏–º—ã–µ –±–ª—é–¥–∞", "–ú–∞–º–∞ –ª–µ—á–∏–ª–∞ –∏ –∑–∞–±–æ—Ç–∏–ª–∞—Å—å, –∫–æ–≥–¥–∞ —è –±–æ–ª–µ–ª", "–ú–∞–º–∞ –≤—Å–µ–≥–¥–∞ –≤–µ—Ä–∏–ª–∞ –≤ –º–µ–Ω—è"]

            },

            "q2": {

                "text": "–ß—Ç–æ –≤—ã –ª—é–±–∏—Ç–µ –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –º–∞–º–æ–π?",

                "options": ["–°–º–æ—Ç—Ä–µ—Ç—å —Ñ–∏–ª—å–º—ã –∏ —Å–µ—Ä–∏–∞–ª—ã", "–í–º–µ—Å—Ç–µ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ", "–ì–æ—Ç–æ–≤–∏—Ç—å –¥–æ–º –∫ –ù–æ–≤–æ–º—É –≥–æ–¥—É"]

            },

            "q3": {

                "text": "–ß–µ–º—É –≤–∞–∂–Ω–æ–º—É —Ç–µ–±—è –Ω–∞—É—á–∏–ª–∞ –º–∞–º–∞?",

                "options": ["–°—Ç–∞–≤–∏—Ç—å —Ü–µ–ª–∏ –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –∏—Ö", "–ë—ã—Ç—å –Ω–∞–¥–µ–∂–Ω—ã–º –º—É–∂—á–∏–Ω–æ–π", "–ó–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –¥—Ä—É–≥–∏—Ö"]

            }

        },

        "–°—ã–Ω ‚Äì –ø–∞–ø–µ": {

            "q1": {

                "text": "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–∞–º–æ–µ —è—Ä–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø–∞–ø–µ?",

                "options": ["–ö–∞–∫ –ø–∞–ø–∞ –æ—Ç–≤–µ–ª –≤ –ø–µ—Ä–≤—ã–π –∫–ª–∞—Å—Å", "–ö–∞–∫ –ø–∞–ø–∞ –∏–≥—Ä–∞–ª —Å–æ –º–Ω–æ–π –≤ –¥–µ—Ç—Å—Ç–≤–µ", "–ü–∞–ø–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª –º–µ–Ω—è –Ω–∞ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è—Ö"]

            },

            "q2": {

                "text": "–ß—Ç–æ –≤—ã –ª—é–±–∏—Ç–µ –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –ø–∞–ø–æ–π?",

                "options": ["–ò–≥—Ä–∞—Ç—å –≤ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã", "–°–º–æ—Ç—Ä–µ—Ç—å –±–æ–µ–≤–∏–∫", "–ú–∞—Å—Ç–µ—Ä–∏—Ç—å —á—Ç–æ-—Ç–æ –¥–æ–º–∞"]

            },

            "q3": {

                "text": "–ß–µ–º—É –≤–∞–∂–Ω–æ–º—É —Ç–µ–±—è –Ω–∞—É—á–∏–ª –ø–∞–ø–∞?",

                "options": ["–í–æ–¥–∏—Ç—å –º–∞—à–∏–Ω—É", "–£–º–µ—Ç—å –∑–∞—â–∏—â–∞—Ç—å —Å–µ–±—è", "–õ–æ–≤–∏—Ç—å —Ä—ã–±—É"]

            }

        },

        "–ë—Ä–∞—Ç ‚Äì –±—Ä–∞—Ç—É": {

            "q1": {

                "text": "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–∞–º–æ–µ —è—Ä–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±—Ä–∞—Ç–µ?",

                "options": ["–ö–∞–∫ –º—ã –∏–≥—Ä–∞–ª–∏ –≤–º–µ—Å—Ç–µ –≤ –¥–µ—Ç—Å—Ç–≤–µ", "–ö–∞–∫ –±—Ä–∞—Ç –∑–∞—â–∏—â–∞–ª –º–µ–Ω—è", "–ö–∞–∫ –º—ã —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–ª–∏—Å—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º"]

            },

            "q2": {

                "text": "–ß—Ç–æ –≤—ã –ª—é–±–∏—Ç–µ –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å –±—Ä–∞—Ç–æ–º?",

                "options": ["–ò–≥—Ä–∞—Ç—å –≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã–µ –∏–≥—Ä—ã", "–•–æ–¥–∏—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–°–º–æ—Ç—Ä–µ—Ç—å —Ñ—É—Ç–±–æ–ª"]

            },

            "q3": {

                "text": "–ß–µ–º—É —Ç–µ–±—è –Ω–∞—É—á–∏–ª –±—Ä–∞—Ç?",

                "options": ["–ö–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ", "–ë—ã—Ç—å —Å–º–µ–ª—ã–º", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã"]

            }

        },

        "–ë—Ä–∞—Ç ‚Äì —Å–µ—Å—Ç—Ä–µ": {

            "q1": {

                "text": "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–∞–º–æ–µ –Ω–µ–∂–Ω–æ–µ –∏–ª–∏ —è—Ä–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–µ—Å—Ç—Ä–µ?",

                "options": ["–ö–∞–∫ –æ–Ω–∞ —Å–¥–µ–ª–∞–ª–∞ –ø–µ—Ä–≤—ã–π —à–∞–≥", "–ú—ã –≤–º–µ—Å—Ç–µ –≥–æ—Ç–æ–≤–∏–ª–∏ —Å—é—Ä–ø—Ä–∏–∑ –¥–ª—è —Ä–æ–¥–Ω—ã—Ö", "–ö–∞–∫ –º—ã —Å—Å–æ—Ä–∏–ª–∏—Å—å –∏ –±—ã—Å—Ç—Ä–æ –º–∏—Ä–∏–ª–∏—Å—å"]

            },

            "q2": {

                "text": "–ß—Ç–æ –≤—ã –ª—é–±–∏—Ç–µ –¥–µ–ª–∞—Ç—å –≤–º–µ—Å—Ç–µ —Å —Å–µ—Å—Ç—Ä–æ–π?",

                "options": ["–°–º–æ—Ç—Ä–µ—Ç—å –∫–∏–Ω–æ –∏–ª–∏ —Å–µ—Ä–∏–∞–ª—ã", "–ü–æ–¥—à—É—á–∏–≤–∞—Ç—å –Ω–∞–¥ —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏", "–ò–≥—Ä–∞—Ç—å –≤–º–µ—Å—Ç–µ"]

            },

            "q3": {

                "text": "–ß–µ–º—É —Ç–µ–±—è –Ω–∞—É—á–∏–ª–∞ —Å–µ—Å—Ç—Ä–∞?",

                "options": ["–ß–∏—Ç–∞—Ç—å –∏–ª–∏ –¥–µ–ª–∞—Ç—å —É—Ä–æ–∫–∏", "–î–µ–ª–∏—Ç—å—Å—è —Å–ª–∞–¥–æ—Å—Ç—è–º–∏", "–°—Ç–∏–ª—å–Ω–æ –æ–¥–µ–≤–∞—Ç—å—Å—è"]

            }

        },

        "–í–Ω—É–∫ - –±–∞–±—É—à–∫–µ": {

            "q1": {

                "text": "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–∞–º–æ–µ –Ω–µ–∂–Ω–æ–µ –∏–ª–∏ —è—Ä–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –±–∞–±—É—à–∫–µ?",

                "options": ["–ß—Ç–æ –µ–µ –µ–¥–∞ - —Å–∞–º–∞—è –≤–∫—É—Å–Ω–∞—è –≤ –º–∏—Ä–µ", "–ö–∞–∫ –æ–Ω–∞ —á–∏—Ç–∞–ª–∞ —Å–∫–∞–∑–∫–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º", "–ö–∞–∫ –±–∞–±—É—à–∫–∞ –º–µ–Ω—è –æ–±–Ω–∏–º–∞–µ—Ç"]

            },

            "q2": {

                "text": "–ß—Ç–æ –≤—ã –ª—é–±–∏—Ç–µ –¥–µ–ª–∞—Ç—å —Å –±–∞–±—É—à–∫–æ–π –≤–º–µ—Å—Ç–µ?",

                "options": ["–°–ª—É—à–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ –µ–µ –º–æ–ª–æ–¥–æ—Å—Ç–∏", "–ì—É–ª—è—Ç—å –≤ –ø–∞—Ä–∫–µ", "–ü—Ä–æ–≤–æ–¥–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞ –¥–∞—á–µ –∏–ª–∏ –≤ —Å–∞–¥—É"]

            },

            "q3": {

                "text": "–ß–µ–º—É –≤–∞–∂–Ω–æ–º—É —Ç–µ–±—è –Ω–∞—É—á–∏–ª–∞ –±–∞–±—É—à–∫–∞?",

                "options": ["–†–∏—Å–æ–≤–∞—Ç—å", "–í—è–∑–∞—Ç—å", "–ü–µ—á—å –ø–∏—Ä–æ–∂–∫–∏"]

            }

        },

        "–í–Ω—É–∫ - –¥–µ–¥—É—à–∫–µ": {

            "q1": {

                "text": "–ö–∞–∫–æ–µ —É —Ç–µ–±—è —Å–∞–º–æ–µ –Ω–µ–∂–Ω–æ–µ –∏–ª–∏ —è—Ä–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –¥–µ–¥—É—à–∫–µ?",

                "options": ["–ö–∞–∫ –æ–Ω –∫–∞—Ç–∞–ª –º–µ–Ω—è –Ω–∞ —à–µ–µ", "–ö–∞–∫ –º—ã –∏–≥—Ä–∞–ª–∏ —Å –Ω–∏–º", "–ò—Å—Ç–æ—Ä–∏–∏ –µ–≥–æ –∂–∏–∑–Ω–∏"]

            },

            "q2": {

                "text": "–ß—Ç–æ –≤—ã –ª—é–±–∏—Ç–µ –¥–µ–ª–∞—Ç—å —Å –¥–µ–¥—É—à–∫–æ–π –≤–º–µ—Å—Ç–µ?",

                "options": ["–•–æ–¥–∏—Ç—å –Ω–∞ —Ä—ã–±–∞–ª–∫—É", "–ü–æ–º–æ–≥–∞—Ç—å –Ω–∞ –¥–∞—á–µ –∏–ª–∏ –≤ —Å–∞–¥—É", "–†–∞–∑–≥–∞–¥—ã–≤–∞—Ç—å –∫—Ä–æ—Å—Å–≤–æ—Ä–¥"]

            },

            "q3": {

                "text": "–ß–µ–º—É –≤–∞–∂–Ω–æ–º—É –¥–µ–¥—É—à–∫–∞ —Ç–µ–±—è –Ω–∞—É—á–∏–ª?",

                "options": ["–†—ã–±–∞—á–∏—Ç—å", "–†–∞–±–æ—Ç–∞—Ç—å —Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏", "–ò–≥—Ä–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç—ã"]

            }

        }

    }

    

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤—è–∑–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–ª–∞
    mapped_relation = get_mapped_relation(relation, gender)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è "–î–µ–≤—É—à–∫–∞ - –ø–∞—Ä–Ω—é" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ —Ç–∏–ø —Å–≤—è–∑–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    result = questions.get(mapped_relation, questions["–î–µ–≤—É—à–∫–∞ - –ø–∞—Ä–Ω—é"])

    print(f"üîç –û–¢–õ–ê–î–ö–ê get_questions_for_relation: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º {result}")

    if mapped_relation not in questions:

        print(f"‚ùå –û–¢–õ–ê–î–ö–ê: mapped_relation '{mapped_relation}' –ù–ï –ù–ê–ô–î–ï–ù –≤ questions! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {list(questions.keys())}")

    return result



async def get_song_questions_for_relation(relation, gender):

    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø–µ—Å–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–≤—è–∑–∏ –∏ –ø–æ–ª–∞"""

    

    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –∏–∑ –ë–î song_quiz
    try:
        from db import get_song_quiz_item
        gender_key = 'female' if gender in ('–¥–µ–≤—É—à–∫–∞', '–∂–µ–Ω—â–∏–Ω–∞') else 'male'
        relation_map = {
            '–õ—é–±–∏–º–æ–º—É': 'husband',
            '–õ—é–±–∏–º–æ–π': 'wife',
            '–ü–∞—Ä–Ω—é': 'boyfriend',
            '–î–µ–≤—É—à–∫–µ': 'girlfriend',
            '–ú–∞–º–µ': 'mom',
            '–ü–∞–ø–µ': 'dad',
            '–ë–∞–±—É—à–∫–µ': 'grandma',
            '–î–µ–¥—É—à–∫–µ': 'grandpa',
            '–ü–æ–¥—Ä—É–≥–µ': 'friend',
            '–°–µ—Å—Ç—Ä–µ': 'sister',
            '–ë—Ä–∞—Ç—É': 'brother',
            '–°—ã–Ω—É': 'son',
            '–î–æ—á–µ—Ä–∏': 'daughter'
        }
        rel_key = relation_map.get(relation)
        if rel_key:
            item = await get_song_quiz_item(rel_key, gender_key)
            if item:
                import json
                questions = []
                questions.append(item.get('intro', ''))
                questions.append('')
                if item.get('phrases_hint'):
                    questions.append(item['phrases_hint'])
                    questions.append('')
                try:
                    q_list = json.loads(item.get('questions_json', '[]'))
                    questions.extend(q_list)
                except Exception:
                    pass
                questions.append('')
                if item.get('outro'):
                    questions.append(item['outro'])
                if questions:
                    return questions
    except Exception:
        pass

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–∞—Ä (–º—É–∂ ‚Üí –∂–µ–Ω–∞)

    husband_to_wife = [

        "–î–æ—Ä–æ–≥–æ–π (–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π –∂–µ–Ω—ã (–∏–º—è), –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º–∞—è –ª—É—á—à–∞—è, –°–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –∏ –Ω–µ–∂–Ω–∞—è\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–ö–∞–∫ –≤—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤—ã –≤–º–µ—Å—Ç–µ?",

        "–û–ø–∏—à–∏ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ? –ß—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏, —á—Ç–æ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏?",

        "–ö–∞–∫ –ª–∞—Å–∫–æ–≤–æ –≤—ã –Ω–∞–∑—ã–≤–∞–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞?",

        "–ö–∞–∫–∏–µ —Å–∞–º—ã–µ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç –≤–∞—Å? (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –¥–µ–Ω—å —Å–≤–∞–¥—å–±—ã, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –∫—Ä—É–ø–Ω—ã–µ —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏)",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–µ—Ç–∏? –ù–∞–ø–∏—à–∏ –∏—Ö –∏–º–µ–Ω–∞. –ö—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–æ–¥–∏–ª—Å—è, –∫—Ç–æ –≤—Ç–æ—Ä–æ–π (–∫–∞–∫–∏–µ –≤–∞–∂–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ –∂–µ–Ω—ã –≤ –∂–∏–∑–Ω–∏ –¥–µ—Ç–µ–π)?",

        "–ß–µ–º —É–≤–ª–µ—á–µ–Ω–∞ —Ç–≤–æ—è –∂–µ–Ω–∞? (–¥–µ—Ç–∏, —Ö–æ–±–±–∏, —Ä–∞–±–æ—Ç–∞, —Å–ø–æ—Ä—Ç, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –º—É–∑—ã–∫–∞ –∏ —Ç.–¥.)",

        "–ß—Ç–æ –æ–Ω–∞ –¥–µ–ª–∞–µ—Ç –¥–ª—è —Ç–µ–±—è, –±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ–º—É —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –ª—é–±–∏–º—ã–º –∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã–º?",

        "–ö–∞–∫–æ–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å –∂–µ–Ω–æ–π –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–∞–º –æ–±–æ–∏–º –æ—Å–æ–±—É—é —Ä–∞–¥–æ—Å—Ç—å?",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–π —Å—É–ø—Ä—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–µ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–π —Å—É–ø—Ä—É–≥–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–∞—Ä (–∂–µ–Ω–∞ ‚Üí –º—É–∂)

    wife_to_husband = [

        "–î–æ—Ä–æ–≥–∞—è (–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –º—É–∂–∞ (–∏–º—è), –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π, —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ –Ω–µ–∂–Ω—ã–π\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–ö–∞–∫ –≤—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤—ã –≤–º–µ—Å—Ç–µ?",

        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ? –ß—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏, —á—Ç–æ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏?",

        "–ö–∞–∫ –ª–∞—Å–∫–æ–≤–æ –≤—ã –Ω–∞–∑—ã–≤–∞–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞?",

        "–ö–∞–∫–∏–µ —Å–∞–º—ã–µ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã —Å–≤—è–∑—ã–≤–∞—é—Ç –≤–∞—Å? (–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞, –¥–µ–Ω—å —Å–≤–∞–¥—å–±—ã, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è)",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –¥–µ—Ç–∏? –ù–∞–ø–∏—à–∏ –∏—Ö –∏–º–µ–Ω–∞. –ò –∫—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–æ–¥–∏–ª—Å—è, –∫—Ç–æ –≤—Ç–æ—Ä–æ–π (–∫–∞–∫–∏–µ –≤–∞–∂–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏–µ –º—É–∂–∞ –≤ –∂–∏–∑–Ω–∏ –¥–µ—Ç–µ–π)",

        "–ß–µ–º —É–≤–ª–µ—á–µ–Ω —Ç–≤–æ–π –º—É–∂? (—Ä–∞–±–æ—Ç–∞, —Å–ø–æ—Ä—Ç, —Ö–æ–±–±–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –º—É–∑—ã–∫–∞ –∏ —Ç.–¥.)",

        "–ß—Ç–æ –æ–Ω –¥–µ–ª–∞–µ—Ç –¥–ª—è —Ç–µ–±—è, –±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ–º—É —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –ª—é–±–∏–º–æ–π, —Å—á–∞—Å—Ç–ª–∏–≤–æ–π –∏ –∑–∞ —á—Ç–æ —Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞ –µ–º—É?",

        "–ö–∞–∫–æ–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å –º—É–∂–µ–º –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–∞–º –æ–±–æ–∏–º –æ—Å–æ–±—É—é —Ä–∞–¥–æ—Å—Ç—å?",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–≥–æ —Å—É–ø—Ä—É–≥–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–≥–æ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–º —Å—É–ø—Ä—É–≥–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–∞—Ä (–¥–µ–≤—É—à–∫–∞ ‚Üí –ø–∞—Ä–µ–Ω—å)

    girlfriend_to_boyfriend = [

        "–î–æ—Ä–æ–≥–∞—è (–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ (–∏–º—è), –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π, —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π, –∑–∞–±–æ—Ç–ª–∏–≤—ã–π –∏ –Ω–µ–∂–Ω—ã–π\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–ö–∞–∫ –≤—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–∫–æ–ª—å–∫–æ –≤—ã –≤–º–µ—Å—Ç–µ?",

        "2 –û–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ? –ß—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏, —á—Ç–æ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏?",

        "–ö–∞–∫ –ª–∞—Å–∫–æ–≤–æ –≤—ã –Ω–∞–∑—ã–≤–∞–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞?",

        "–ö–∞–∫–∏–µ —Å–∞–º—ã–µ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã —Å–≤—è–∑—ã–≤–∞—é—Ç –≤–∞—Å? (—Å–≤–∏–¥–∞–Ω–∏—è, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è)",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π —è—Ä–∫–∏–π –ø–æ—Å—Ç—É–ø–æ–∫ —Ç–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–ª—Å—è –≤ –ø–∞–º—è—Ç–∏?",

        "–ß–µ–º —É–≤–ª–µ—á–µ–Ω —Ç–≤–æ–π –ª—é–±–∏–º—ã–π? (—Ä–∞–±–æ—Ç–∞, —Å–ø–æ—Ä—Ç, —Ö–æ–±–±–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –º—É–∑—ã–∫–∞ –∏ —Ç.–¥.)",

        "–ß—Ç–æ –æ–Ω –¥–µ–ª–∞–µ—Ç –¥–ª—è —Ç–µ–±—è, –±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ–º—É —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –ª—é–±–∏–º–æ–π, —Å—á–∞—Å—Ç–ª–∏–≤–æ–π –∏ –∑–∞ —á—Ç–æ —Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä–Ω–∞ –µ–º—É?",

        "–ö–∞–∫–æ–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å –ª—é–±–∏–º—ã–º –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–∞–º –æ–±–æ–∏–º –æ—Å–æ–±—É—é —Ä–∞–¥–æ—Å—Ç—å?",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–≥–æ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–º –ª—é–±–∏–º–æ–º —á–µ–ª–æ–≤–µ–∫–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–∞—Ä (–ø–∞—Ä–µ–Ω—å ‚Üí –¥–µ–≤—É—à–∫–∞)

    boyfriend_to_girlfriend = [

        "–î–æ—Ä–æ–≥–æ–π(–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π (–∏–º—è), –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º–∞—è –ª—É—á—à–∞—è, –°–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –∏ –Ω–µ–∂–Ω–∞—è\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–ö–∞–∫ –≤—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ —Å–∫–æ–ª—å–∫–æ –≤—ã –≤–º–µ—Å—Ç–µ?",

        "–û–ø–∏—à–∏ –≤–∞—à–µ –ø–µ—Ä–≤–æ–µ —Å–≤–∏–¥–∞–Ω–∏–µ? –ß—Ç–æ –≤—ã –¥–µ–ª–∞–ª–∏, —á—Ç–æ —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∏?",

        "–ö–∞–∫ –ª–∞—Å–∫–æ–≤–æ –≤—ã –Ω–∞–∑—ã–≤–∞–µ—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥–∞?",

        "–ö–∞–∫–∏–µ —Å–∞–º—ã–µ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã —Å–≤—è–∑—ã–≤–∞—é—Ç –≤–∞—Å? (—Å–≤–∏–¥–∞–Ω–∏—è, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è)",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π —è—Ä–∫–∏–π –ø–æ—Å—Ç—É–ø–æ–∫ —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π –Ω–∞–≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–ª—Å—è –≤ –ø–∞–º—è—Ç–∏?",

        "–ß–µ–º —É–≤–ª–µ—á–µ–Ω–∞ —Ç–≤–æ—è –ª—é–±–∏–º–∞—è? (—Ä–∞–±–æ—Ç–∞, —Å–ø–æ—Ä—Ç, —Ö–æ–±–±–∏, —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ, –º—É–∑—ã–∫–∞, —Ç–∞–Ω—Ü—ã –∏ —Ç.–¥.)",

        "–ß—Ç–æ –æ–Ω–∞ –¥–µ–ª–∞–µ—Ç –¥–ª—è —Ç–µ–±—è, –±–ª–∞–≥–æ–¥–∞—Ä—è —á–µ–º—É —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è –ª—é–±–∏–º—ã–º, —Å—á–∞—Å—Ç–ª–∏–≤—ã–º –∏ –∑–∞ —á—Ç–æ —Ç—ã –±–ª–∞–≥–æ–¥–∞—Ä–µ–Ω –µ–π?",

        "–ö–∞–∫–æ–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ —Å –ª—é–±–∏–º–æ–π –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–∞–º –æ–±–æ–∏–º –æ—Å–æ–±—É—é —Ä–∞–¥–æ—Å—Ç—å?",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–µ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π –¥–µ–≤—É—à–∫–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–µ—Ç–µ–π –∫ –º–∞–º–µ

    child_to_mom = [

        "–î–æ—Ä–æ–≥–∞—è (–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π –º–∞–º—ã, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º–∞—è –ª—É—á—à–∞—è, –¥–æ–±—Ä–∞—è, –∫—Ä–∞—Å–∏–≤–∞—è –∏ –Ω–µ–∂–Ω–∞—è\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç —Å –º–∞–º–æ–π –∏–∑ —Ç–≤–æ–µ–≥–æ –¥–µ—Ç—Å—Ç–≤–∞ —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ —Ü–µ–Ω–∏—à—å –∏ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—à—å –ø–æ–º–Ω–∏—Ç—å?",

        "–ö–∞–∫–æ–µ –º–∞–º–∏–Ω–æ –±–ª—é–¥–æ –∏–ª–∏ –ª–∞–∫–æ–º—Å—Ç–≤–æ –±—ã–ª–æ —Ç–≤–æ–∏ —Å–∞–º—ã–º –ª—é–±–∏–º—ã–º –≤ –¥–µ—Ç—Å—Ç–≤–µ?",

        "–ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Å–æ–≤–µ—Ç—ã –º–∞–º—ã –∑–∞–ø–æ–º–Ω–∏–ª–∏—Å—å? –ö–∞–∫ –º–∞–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–∞ –∏–ª–∏ —É—Ç–µ—à–∞–ª–∞ —Ç–µ–±—è –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã?",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å –º–∞–º–æ–π –º–∏–ª—ã–µ —Å–ª–æ–≤–∞ –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–í—ã —Å –º–∞–º–æ–π –∂–∏–≤–µ—Ç–µ –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ –º–µ–∂–¥—É –≤–∞–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è? (–≥–æ—Ä–æ–¥–∞ —É–∫–∞–∑–∞—Ç—å)?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π —Å—é—Ä–ø—Ä–∏–∑, –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –º–∞–º–∞ –¥–ª—è —Ç–µ–±—è –¥–µ–ª–∞–ª–∞?",

        "–ï—Å–ª–∏ —É —Ç–µ–±—è –±—Ä–∞—Ç–∏—à–∫–∏, —Å–µ—Å—Ç—Ä–µ–Ω–∫–∏ –æ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã —Ç—ã —Ö–æ—Ç–µ–ª–∞ —Å–∫–∞–∑–∞—Ç—å –≤ –ø–µ—Å–Ω–µ, –Ω–∞–ø–∏—à–∏ –∏—Ö –∏–º–µ–Ω–∞ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å?",

        "–í—Å–ø–æ–º–Ω–∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Ç–≤–æ–µ–π –º–∞–º—ã –∫–∞–∫ –∂–µ–Ω—ã, —Å–µ—Å—Ç—Ä—ã, –±–∞–±—É—à–∫–∏, –ø–æ–¥—Ä—É–≥–∏ (—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å) –µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏? –õ—é–±–æ–≤—å –∫ –ø–∏—Ç–æ–º—Ü–∞–º?",

        " –ß–µ–º—É –º–∞–º–∞ —Ç–µ–±—è –Ω–∞—É—á–∏–ª–∞, –∫–∞–∫–∏–µ –≤–∞–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –æ–Ω–∞ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∞–ª–∞? (–≥–æ—Ç–æ–≤–∏—Ç—å, –ø–µ—Ç—å, —Ä–∏—Å–æ–≤–∞—Ç—å, –º–µ—á—Ç–∞—Ç—å)",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–π –º–∞–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–µ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–π –º–∞–º–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å—ã–Ω–∞ –∫ –º–∞–º–µ

    son_to_mom = [

        "–î–æ—Ä–æ–≥–æ–π(–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π –º–∞–º—ã, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º–∞—è –ª—É—á—à–∞—è, –°–∞–º–∞—è –∫—Ä–∞—Å–∏–≤–∞—è –∏ –Ω–µ–∂–Ω–∞—è\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç —Å –º–∞–º–æ–π –∏–∑ —Ç–≤–æ–µ–≥–æ –¥–µ—Ç—Å—Ç–≤–∞ —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ —Ü–µ–Ω–∏—à—å –∏ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—à—å –ø–æ–º–Ω–∏—Ç—å?",

        "–ö–∞–∫–æ–µ –º–∞–º–∏–Ω–æ –±–ª—é–¥–æ –∏–ª–∏ –ª–∞–∫–æ–º—Å—Ç–≤–æ –±—ã–ª–æ —Ç–≤–æ–µ —Å–∞–º—ã–º –ª—é–±–∏–º—ã–º –≤ –¥–µ—Ç—Å—Ç–≤–µ?",

        "–ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Å–æ–≤–µ—Ç—ã –º–∞–º—ã –∑–∞–ø–æ–º–Ω–∏–ª–∏—Å—å? –ö–∞–∫ –º–∞–º–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–∞ –∏–ª–∏ —É—Ç–µ—à–∞–ª–∞ —Ç–µ–±—è –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã?",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å –º–∞–º–æ–π –º–∏–ª—ã–µ —Å–ª–æ–≤–∞ –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–í—ã —Å –º–∞–º–æ–π –∂–∏–≤–µ—Ç–µ –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ –º–µ–∂–¥—É –≤–∞–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è? (–≥–æ—Ä–æ–¥–∞ —É–∫–∞–∑–∞—Ç—å)?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π —Å—é—Ä–ø—Ä–∏–∑, –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –º–∞–º–∞ –¥–ª—è —Ç–µ–±—è –¥–µ–ª–∞–ª–∞?",

        "–ï—Å–ª–∏ —É —Ç–µ–±—è –±—Ä–∞—Ç–∏—à–∫–∏, —Å–µ—Å—Ç—Ä–µ–Ω–∫–∏ –æ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å –≤ –ø–µ—Å–Ω–µ, –Ω–∞–ø–∏—à–∏ –∏—Ö –∏–º–µ–Ω–∞ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å?",

        "–í—Å–ø–æ–º–Ω–∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Ç–≤–æ–µ–π –º–∞–º—ã –∫–∞–∫ –∂–µ–Ω—ã, —Å–µ—Å—Ç—Ä—ã, –±–∞–±—É—à–∫–∏, –ø–æ–¥—Ä—É–≥–∏ (—á—Ç–æ —Ç—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å) –µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏? –õ—é–±–æ–≤—å –∫ –ø–∏—Ç–æ–º—Ü–∞–º?",

        " –ß–µ–º—É –º–∞–º–∞ —Ç–µ–±—è –Ω–∞—É—á–∏–ª–∞, –∫–∞–∫–∏–µ –≤–∞–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –æ–Ω–∞ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∞–ª–∞? (–≥–æ—Ç–æ–≤–∏—Ç—å, –ø–µ—Ç—å, —Ä–∏—Å–æ–≤–∞—Ç—å, –º–µ—á—Ç–∞—Ç—å)",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π –º–∞–º—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–µ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π –º–∞–º—É–ª–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–µ—Ç–µ–π –∫ –ø–∞–ø–µ

    child_to_dad = [

        "–î–æ—Ä–æ–≥–∞—è (–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –ø–∞–ø—ã, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π –ø–∞–ø–∞, –¥–æ–±—Ä—ã–π, —Å–∏–ª—å–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç —Å –ø–∞–ø–æ–π –∏–∑ —Ç–≤–æ–µ–≥–æ –¥–µ—Ç—Å—Ç–≤–∞ —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ —Ü–µ–Ω–∏—à—å –∏ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—à—å –ø–æ–º–Ω–∏—Ç—å?",

        "–ö–∞–∫–∏–µ —É –ø–∞–ø—ã —Ö–æ–±–±–∏, –∏–Ω—Ç–µ—Ä–µ—Å—ã, —É–≤–ª–µ—á–µ–Ω–∏—è, —Ñ–∏—Ä–º–µ–Ω–Ω–æ–µ –±–ª—é–¥–æ?",

        "–ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Å–æ–≤–µ—Ç—ã –ø–∞–ø—ã –∑–∞–ø–æ–º–Ω–∏–ª–∏—Å—å? –ö–∞–∫ –ø–∞–ø–∞ –∑–∞—â–∏—â–∞–ª –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª —Ç–µ–±—è –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã?",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å –ø–∞–ø–æ–π –º–∏–ª—ã–µ —Å–ª–æ–≤–∞ –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–í—ã —Å –ø–∞–ø–æ–π –∂–∏–≤–µ—Ç–µ –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ –º–µ–∂–¥—É –≤–∞–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è? (–≥–æ—Ä–æ–¥–∞ —É–∫–∞–∑–∞—Ç—å)?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π —Å—é—Ä–ø—Ä–∏–∑, –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –ø–∞–ø–∞ –¥–ª—è —Ç–µ–±—è –¥–µ–ª–∞–ª?",

        "–ï—Å–ª–∏ —É —Ç–µ–±—è –±—Ä–∞—Ç–∏—à–∫–∏, —Å–µ—Å—Ç—Ä–µ–Ω–∫–∏ –æ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã —Ç—ã —Ö–æ—Ç–µ–ª–∞ —Å–∫–∞–∑–∞—Ç—å –≤ –ø–µ—Å–Ω–µ, –Ω–∞–ø–∏—à–∏ –∏—Ö –∏–º–µ–Ω–∞ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å?",

        "–í—Å–ø–æ–º–Ω–∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ –ø–∞–ø—ã –∫–∞–∫ –º—É–∂–∞, —Å—ã–Ω–∞, –¥–µ–¥—É—à–∫–∏, –¥—Ä—É–≥–∞ (—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å) –µ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏? –õ—é–±–æ–≤—å –∫ –ø–∏—Ç–æ–º—Ü–∞–º?",

        " –ß–µ–º—É –ø–∞–ø–∞ —Ç–µ–±—è –Ω–∞—É—á–∏–ª, –∫–∞–∫–∏–µ –≤–∞–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –æ–Ω —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∞–ª? (—Å—Ç—Ä–µ–ª—è—Ç—å, –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ, –Ω–∞ –∫–æ–Ω—å–∫–∞—Ö, –ª—ã–∂–∞—Ö)?",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–≥–æ –ø–∞–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–≥–æ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–º –ø–∞–ø–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å—ã–Ω–∞ –∫ –ø–∞–ø–µ

    son_to_dad = [

        "–î–æ—Ä–æ–≥–æ–π(–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –ø–∞–ø—ã, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º–∞—è —Ö—Ä–∞–±—Ä—ã–π, —Å–∏–ª—å–Ω—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç —Å –ø–∞–ø–æ–π –∏–∑ —Ç–≤–æ–µ–≥–æ –¥–µ—Ç—Å—Ç–≤–∞ —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ —Ü–µ–Ω–∏—à—å –∏ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—à—å –ø–æ–º–Ω–∏—Ç—å?",

        "–ö–∞–∫–∏–µ —É –ø–∞–ø—ã —Ö–æ–±–±–∏, –∏–Ω—Ç–µ—Ä–µ—Å—ã, —É–≤–ª–µ—á–µ–Ω–∏—è, —Ñ–∏—Ä–º–µ–Ω–Ω–æ–µ –±–ª—é–¥–æ?",

        "–ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Å–æ–≤–µ—Ç—ã –ø–∞–ø—ã –∑–∞–ø–æ–º–Ω–∏–ª–∏—Å—å? –ö–∞–∫ –ø–∞–ø–∞ –∑–∞—â–∏—â–∞–ª –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª —Ç–µ–±—è –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã?",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å –ø–∞–ø–æ–π –º–∏–ª—ã–µ —Å–ª–æ–≤–∞ –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–í—ã —Å –ø–∞–ø–æ–π –∂–∏–≤–µ—Ç–µ –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ –º–µ–∂–¥—É –≤–∞–º–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è? (–≥–æ—Ä–æ–¥–∞ —É–∫–∞–∑–∞—Ç—å)?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π —Å—é—Ä–ø—Ä–∏–∑, –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –ø–∞–ø–∞ –¥–ª—è —Ç–µ–±—è –¥–µ–ª–∞–ª?",

        "–ï—Å–ª–∏ —É —Ç–µ–±—è –±—Ä–∞—Ç–∏—à–∫–∏, —Å–µ—Å—Ç—Ä–µ–Ω–∫–∏ –æ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã —Ç—ã —Ö–æ—Ç–µ–ª —Å–∫–∞–∑–∞—Ç—å –≤ –ø–µ—Å–Ω–µ, –Ω–∞–ø–∏—à–∏ –∏—Ö –∏–º–µ–Ω–∞ –∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å?",

        "–í—Å–ø–æ–º–Ω–∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ –ø–∞–ø—ã –∫–∞–∫ –º—É–∂–∞, —Å—ã–Ω–∞, –¥–µ–¥—É—à–∫–∏, –¥—Ä—É–≥–∞ (—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å) –µ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏? –õ—é–±–æ–≤—å –∫ –ø–∏—Ç–æ–º—Ü–∞–º?",

        " –ß–µ–º—É –ø–∞–ø–∞ —Ç–µ–±—è –Ω–∞—É—á–∏–ª, –∫–∞–∫–∏–µ –≤–∞–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –æ–Ω —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∞–ª? (—Å—Ç—Ä–µ–ª—è—Ç—å, –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –≤–µ–ª–æ—Å–∏–ø–µ–¥–µ, –Ω–∞ –∫–æ–Ω—å–∫–∞—Ö, –ª—ã–∂–∞—Ö)?",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –ø–∞–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–≥–æ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–º –ª—é–±–∏–º–æ–º –ø–∞–ø–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–Ω—É–∫–æ–≤ –∫ –±–∞–±—É—à–∫–µ

    grandchild_to_grandma = [

        "–î–æ—Ä–æ–≥–∞—è (–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π –±–∞–±—É—à–∫–∏, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º–∞—è –ª—É—á—à–∞—è, –¥–æ–±—Ä–∞—è, —Ç–µ–ø–ª–∞—è –∏ –Ω–µ–∂–Ω–∞—è\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç —Å –±–∞–±—É—à–∫–æ–π –∏–∑ —Ç–≤–æ–µ–≥–æ –¥–µ—Ç—Å—Ç–≤–∞ —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ —Ü–µ–Ω–∏—à—å –∏ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—à—å –ø–æ–º–Ω–∏—Ç—å?",

        "–ö–∞–∫–æ–µ –±–∞–±—É—à–∫–∏–Ω–æ –±–ª—é–¥–æ –∏–ª–∏ –ª–∞–∫–æ–º—Å—Ç–≤–æ –±—ã–ª–æ —Ç–≤–æ–∏–º —Å–∞–º—ã–º –ª—é–±–∏–º—ã–º –≤ –¥–µ—Ç—Å—Ç–≤–µ?",

        "–ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Å–æ–≤–µ—Ç—ã –±–∞–±—É—à–∫–∏ –∑–∞–ø–æ–º–Ω–∏–ª–∏—Å—å? –ö–∞–∫ –±–∞–±—É—à–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–∞ –∏–ª–∏ —É—Ç–µ—à–∞–ª–∞ —Ç–µ–±—è –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã?",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å –±–∞–±—É—à–∫–æ–π –º–∏–ª—ã–µ —Å–ª–æ–≤–∞ –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–í—Å–ø–æ–º–Ω–∏—Ç–µ –≤–µ—Å—ë–ª—ã–π —Å–ª—É—á–∞–π –∏–ª–∏ —à–∞–ª–æ—Å—Ç—å –∏–∑ –¥–µ—Ç—Å—Ç–≤–∞, –∫–æ–≥–¥–∞ –≤—ã —Å –±–∞–±—É—à–∫–æ–π –≤–º–µ—Å—Ç–µ —Å–º–µ—è–ª–∏—Å—å. –ß—Ç–æ —Ç–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π —Å—é—Ä–ø—Ä–∏–∑, –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –±–∞–±—É—à–∫–∞ –¥–ª—è —Ç–µ–±—è –¥–µ–ª–∞–ª–∞?",

        "–ß–µ–º—É –±–∞–±—É—à–∫–∞ —Ç–µ–±—è –Ω–∞—É—á–∏–ª–∞, –∫–∞–∫–∏–µ –≤–∞–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –æ–Ω–∞ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∞–ª–∞? (–≥–æ—Ç–æ–≤–∏—Ç—å, –ø–µ—Ç—å, –ø–µ—á—å?)",

        "–í—Å–ø–æ–º–Ω–∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Ç–≤–æ–µ–π –±–∞–±—É—à–∫–∏ –∫–∞–∫ –º–∞–º—ã, –±–∞–±—É—à–∫–∏, –ø–æ–¥—Ä—É–≥–∏ (—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å) –µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏? –õ—é–±–æ–≤—å –∫ –ø–∏—Ç–æ–º—Ü–∞–º?",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–π –±–∞–±—É—à–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–µ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–π –±–∞–±—É—à–∫–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–Ω—É–∫–∞ –∫ –±–∞–±—É—à–∫–µ

    grandson_to_grandma = [

        "–î–æ—Ä–æ–≥–æ–π (–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π –±–∞–±—É—à–∫–∏, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º–∞—è –ª—É—á—à–∞—è, –¥–æ–±—Ä–∞—è, —Ç–µ–ø–ª–∞—è –∏ –Ω–µ–∂–Ω–∞—è\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç —Å –±–∞–±—É—à–∫–æ–π –∏–∑ —Ç–≤–æ–µ–≥–æ –¥–µ—Ç—Å—Ç–≤–∞ —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ —Ü–µ–Ω–∏—à—å –∏ –≤—Å–µ–≥–¥–∞ –±—É–¥–µ—à—å –ø–æ–º–Ω–∏—Ç—å?",

        "–ö–∞–∫–æ–µ –±–∞–±—É—à–∫–∏–Ω–æ –±–ª—é–¥–æ –∏–ª–∏ –ª–∞–∫–æ–º—Å—Ç–≤–æ –±—ã–ª–æ —Ç–≤–æ–∏–º —Å–∞–º—ã–º –ª—é–±–∏–º—ã–º –≤ –¥–µ—Ç—Å—Ç–≤–µ?",

        "–ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Å–æ–≤–µ—Ç—ã –±–∞–±—É—à–∫–∏ –∑–∞–ø–æ–º–Ω–∏–ª–∏—Å—å? –ö–∞–∫ –±–∞–±—É—à–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–ª–∞ –∏–ª–∏ —É—Ç–µ—à–∞–ª–∞ —Ç–µ–±—è –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã?",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å –±–∞–±—É—à–∫–æ–π –º–∏–ª—ã–µ —Å–ª–æ–≤–∞ –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–í—Å–ø–æ–º–Ω–∏ –≤–µ—Å—ë–ª—ã–π —Å–ª—É—á–∞–π –∏–ª–∏ —à–∞–ª–æ—Å—Ç—å –∏–∑ –¥–µ—Ç—Å—Ç–≤–∞, –∫–æ–≥–¥–∞ –≤—ã —Å –±–∞–±—É—à–∫–æ–π –≤–º–µ—Å—Ç–µ —Å–º–µ—è–ª–∏—Å—å. –ß—Ç–æ —Ç–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π —Å—é—Ä–ø—Ä–∏–∑, –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –±–∞–±—É—à–∫–∞ –¥–ª—è —Ç–µ–±—è –¥–µ–ª–∞–ª–∞?",

        "–ß–µ–º—É –±–∞–±—É—à–∫–∞ —Ç–µ–±—è –Ω–∞—É—á–∏–ª–∞, –∫–∞–∫–∏–µ –≤–∞–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –æ–Ω–∞ —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∞–ª–∞? (–≥–æ—Ç–æ–≤–∏—Ç—å, –ø–µ—Ç—å, –ø–µ—á—å)?",

        "–í—Å–ø–æ–º–Ω–∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Ç–≤–æ–µ–π –±–∞–±—É—à–∫–∏ –∫–∞–∫ –º–∞–º—ã, –±–∞–±—É—à–∫–∏, –ø–æ–¥—Ä—É–≥–∏ (—á—Ç–æ —Ç—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å) –µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏? –õ—é–±–æ–≤—å –∫ –ø–∏—Ç–æ–º—Ü–∞–º?",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–π –±–∞–±—É—à–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–µ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–π –±–∞–±—É—à–∫–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–Ω—É–∫–æ–≤ –∫ –¥–µ–¥—É—à–∫–µ

    grandchild_to_grandpa = [

        "–î–æ—Ä–æ–≥–∞—è (–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –¥–µ–¥—É—à–∫–∏, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π, –¥–æ–±—Ä—ã–π, —Å–º–µ–ª—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç –∏–∑ –¥–µ—Ç—Å—Ç–≤–∞ —Å –¥–µ–¥—É—à–∫–æ–π –æ—Å—Ç–∞–ª—Å—è —Å–∞–º—ã–º –¥–æ—Ä–æ–≥–∏–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º?",

        "–ö–∞–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∏–ª–∏ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å –¥–µ–¥—É—à–∫–æ–π –±—ã–ª–æ —Å–∞–º—ã–º –ª—é–±–∏–º—ã–º?",

        "–ö–∞–∫–∏–µ –¥–µ–¥—É—à–∫–∏–Ω—ã —Å–ª–æ–≤–∞, —Å–æ–≤–µ—Ç—ã –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–ø–æ–º–Ω–∏–ª–∏—Å—å –Ω–∞–≤—Å–µ–≥–¥–∞?",

        "–ë—ã–ª–∏ –ª–∏ —É –≤–∞—Å —Å –¥–µ–¥—É—à–∫–æ–π —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω—ã–µ, —Ç–æ–ª—å–∫–æ –≤–∞—à–∏ –ª–∞—Å–∫–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–∑–≤–∏—â–∞?",

        "–ö–∞–∫–æ–π –≤–µ—Å—ë–ª—ã–π —Å–ª—É—á–∞–π –∏–ª–∏ —à–∞–ª–æ—Å—Ç—å —Å –¥–µ–¥—É—à–∫–æ–π –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —É–ª—ã–±–∫—É –ø—Ä–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–∏?",

        "–ö–∞–∫–æ–π —Å—é—Ä–ø—Ä–∏–∑, –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –¥–µ–¥—É—à–∫–∏ —Å—Ç–∞–ª —Å–∞–º—ã–º –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è?",

        "–ß–µ–º—É –¥–µ–¥—É—à–∫–∞ —Ç–µ–±—è –Ω–∞—É—á–∏–ª, –∫–∞–∫–∏–µ –≤–∞–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –æ–Ω —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∞–ª? (–º–∞—Å—Ç–µ—Ä–∏—Ç—å, –∏–≥—Ä–∞—Ç—å, —á–∏—Ç–∞—Ç—å, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ —á–µ–º—É-—Ç–æ –µ—â—ë?)",

        "–í —á—ë–º –ø—Ä–æ—è–≤–ª—è–ª–∞—Å—å –¥–µ–¥—É—à–∫–∏–Ω–∞ –∑–∞–±–æ—Ç–∞ –æ —Å–µ–º—å–µ –∏ –±–ª–∏–∑–∫–∏—Ö? –ö–∞–∫ –æ–Ω –≤—ã—Ä–∞–∂–∞–ª —Å–≤–æ—é –ª—é–±–æ–≤—å?",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–≥–æ –¥–µ–¥—É—à–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–≥–æ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–º –¥–µ–¥—É—à–∫–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –≤–Ω—É–∫–∞ –∫ –¥–µ–¥—É—à–∫–µ

    grandson_to_grandpa = [

        "–î–æ—Ä–æ–≥–æ–π (–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –¥–µ–¥—É—à–∫–∏, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π, –¥–æ–±—Ä—ã–π, —Å–º–µ–ª—ã–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç –∏–∑ –¥–µ—Ç—Å—Ç–≤–∞ —Å –¥–µ–¥—É—à–∫–æ–π –æ—Å—Ç–∞–ª—Å—è —Å–∞–º—ã–º –¥–æ—Ä–æ–≥–∏–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º?",

        "–ö–∞–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∏–ª–∏ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å –¥–µ–¥—É—à–∫–æ–π –±—ã–ª–æ —Å–∞–º—ã–º –ª—é–±–∏–º—ã–º?",

        "–ö–∞–∫–∏–µ –¥–µ–¥—É—à–∫–∏–Ω—ã —Å–ª–æ–≤–∞, —Å–æ–≤–µ—Ç—ã –∏–ª–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–ø–æ–º–Ω–∏–ª–∏—Å—å –Ω–∞–≤—Å–µ–≥–¥–∞?",

        "–ë—ã–ª–∏ –ª–∏ —É –≤–∞—Å —Å –¥–µ–¥—É—à–∫–æ–π —Å–≤–æ–∏ –æ—Å–æ–±–µ–Ω–Ω—ã–µ, —Ç–æ–ª—å–∫–æ –≤–∞—à–∏ –ª–∞—Å–∫–æ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ –ø—Ä–æ–∑–≤–∏—â–∞?",

        "–ö–∞–∫–æ–π –≤–µ—Å—ë–ª—ã–π —Å–ª—É—á–∞–π –∏–ª–∏ —à–∞–ª–æ—Å—Ç—å —Å –¥–µ–¥—É—à–∫–æ–π –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç —É–ª—ã–±–∫—É –ø—Ä–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–∏?",

        "–ö–∞–∫–æ–π —Å—é—Ä–ø—Ä–∏–∑, –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –æ—Ç –¥–µ–¥—É—à–∫–∏ —Å—Ç–∞–ª —Å–∞–º—ã–º –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è?",

        "–ß–µ–º—É –¥–µ–¥—É—à–∫–∞ —Ç–µ–±—è –Ω–∞—É—á–∏–ª, –∫–∞–∫–∏–µ –≤–∞–∂–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –æ–Ω —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∞–ª? (–º–∞—Å—Ç–µ—Ä–∏—Ç—å, –∏–≥—Ä–∞—Ç—å, —á–∏—Ç–∞—Ç—å, —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ —á–µ–º—É-—Ç–æ –µ—â—ë?)",

        "–í —á—ë–º –ø—Ä–æ—è–≤–ª—è–ª–∞—Å—å –¥–µ–¥—É—à–∫–∏–Ω–∞ –∑–∞–±–æ—Ç–∞ –æ —Å–µ–º—å–µ –∏ –±–ª–∏–∑–∫–∏—Ö? –ö–∞–∫ –æ–Ω –≤—ã—Ä–∞–∂–∞–ª —Å–≤–æ—é –ª—é–±–æ–≤—å?",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–≥–æ –¥–µ–¥—É—à–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–≥–æ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–º –¥–µ–¥—É—à–∫–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–¥—Ä—É–≥

    friend_to_friend = [

        "–î–æ—Ä–æ–≥–∞—è (–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π –ø–æ–¥—Ä—É–≥–∏ (–∏–º—è) –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º–∞—è –ª—É—á—à–∞—è, –¥–æ–±—Ä–∞—è, –∫—Ä–∞—Å–∏–≤–∞—è, –Ω–µ–∂–Ω–∞—è, –≤–µ—Ä–Ω–∞—è\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–ì–¥–µ –≤—ã –ø–æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å –∏ –≤ –∫–∞–∫–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ? –°–∫–æ–ª—å–∫–æ –ª–µ—Ç –¥—Ä—É–∂–∏—Ç–µ?",

        "–ö–∞–∫–æ–π –ø–æ—Å—Ç—É–ø–æ–∫ –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ, –ø–æ —Ç–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é, –æ—Å–æ–±–µ–Ω–Ω–æ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ –∏ –≤–∞–∂–Ω–æ –≤ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –¥–ª—è –≤–∞—Å –æ–±–µ–∏—Ö?",

        "–ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–¥—Ä—É–≥–∏ –ø–æ–¥—á–µ—Ä–∫–Ω—É–ª–∏ –¥–ª—è —Ç–µ–±—è –µ–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –≤–µ—Ä–Ω–æ—Å—Ç—å?",

        "–ï—Å—Ç—å –ª–∏ —É —Ç–µ–±—è —Å –ø–æ–¥—Ä—É–≥–æ–π –º–∏–ª—ã–µ —Å–ª–æ–≤–∞ –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–í—Å–ø–æ–º–Ω–∏ –≤–µ—Å—ë–ª—ã–π —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –≤—ã —Å –ø–æ–¥—Ä—É–≥–æ–π –≤–º–µ—Å—Ç–µ —Å–º–µ—è–ª–∏—Å—å. –ß—Ç–æ —Ç–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π —Å—é—Ä–ø—Ä–∏–∑, –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–¥—Ä—É–≥–∞ –¥–ª—è —Ç–µ–±—è –¥–µ–ª–∞–ª–∞?",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –ø–æ–µ–∑–¥–∫–∏ –∏–ª–∏ –ª—é–±–∏–º–æ–µ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ?",

        "–í—Å–ø–æ–º–Ω–∏—Ç–µ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Ç–≤–æ–µ–π –ø–æ–¥—Ä—É–≥–∏ –∫–∞–∫ –∂–µ–Ω—ã, —Å–µ—Å—Ç—Ä—ã, –ø–æ–¥—Ä—É–≥–∏ (—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å) –µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏? –õ—é–±–æ–≤—å –∫ –ø–∏—Ç–æ–º—Ü–∞–º?",

        " –ß–µ–º—É –æ–Ω–∞ —Ç–µ–±—è –Ω–∞—É—á–∏–ª–∞ –∏–ª–∏ —á–µ–º—É –Ω–∞—É—á–∏–ª–∏ —Ç–µ–±—è —ç—Ç–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–π –ø–æ–¥—Ä—É–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–µ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–π –ø–æ–¥—Ä—É–≥–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–µ—Å—Ç—Ä—ã

    sister_to_sister = [

        "–î–æ—Ä–æ–≥–∞—è (–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π —Å–µ—Å—Ç—Ä—ã (–∏–º—è), –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º–∞—è –ª—É—á—à–∞—è, –¥–æ–±—Ä–∞—è, –∫—Ä–∞—Å–∏–≤–∞—è, –Ω–µ–∂–Ω–∞—è\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç –∏ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ç–≤–æ–µ–π —Å–µ—Å—Ç—Ä–µ?",

        "–ö–∞–∫–æ–π –ø–æ—Å—Ç—É–ø–æ–∫ –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ, –ø–æ —Ç–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é, –æ—Å–æ–±–µ–Ω–Ω–æ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ –∏ –≤–∞–∂–Ω–æ –≤ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –¥–ª—è –≤–∞—Å –æ–±–µ–∏—Ö?",

        "–ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Ç—Ä—ã –ø–æ–¥—á–µ—Ä–∫–Ω—É–ª–∏ –¥–ª—è —Ç–µ–±—è –µ–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –æ–ø–æ—Ä—É?",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å —Å–µ—Å—Ç—Ä–æ–π –º–∏–ª—ã–µ —Å–ª–æ–≤–∞ –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–í—Å–ø–æ–º–Ω–∏ –≤–µ—Å—ë–ª—ã–π —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –≤—ã —Å —Å–µ—Å—Ç—Ä–æ–π –≤–º–µ—Å—Ç–µ —Å–º–µ—è–ª–∏—Å—å. –ß—Ç–æ —Ç–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π —Å—é—Ä–ø—Ä–∏–∑, –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ —Å–µ—Å—Ç—Ä–∞ –¥–ª—è —Ç–µ–±—è –¥–µ–ª–∞–ª–∞?",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –ø–æ–µ–∑–¥–∫–∏ –∏–ª–∏ –ª—é–±–∏–º–æ–µ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ?",

        "–í—Å–ø–æ–º–Ω–∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Ç–≤–æ–µ–π —Å–µ—Å—Ç—Ä—ã –∫–∞–∫ –¥–æ—á–µ—Ä–∏, –∂–µ–Ω—ã, —Å–µ—Å—Ç—Ä—ã, –ø–æ–¥—Ä—É–≥–∏ (—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å) –µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏? –õ—é–±–æ–≤—å –∫ –ø–∏—Ç–æ–º—Ü–∞–º?",

        "–ß–µ–º—É –æ–Ω–∞ —Ç–µ–±—è –Ω–∞—É—á–∏–ª–∞ –∏–ª–∏ —á–µ–º—É —Ç—ã –µ–µ –Ω–∞—É—á–∏–ª–∞, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–º–µ—Å—Ç–µ –ª—é–±–∏–ª–∏ –¥–µ–ª–∞—Ç—å?",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–π —Å–µ—Å—Ç—Ä–µ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–µ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–π —Å–µ—Å—Ç—Ä–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å–µ—Å—Ç—Ä—ã –∫ –±—Ä–∞—Ç—É

    sister_to_brother = [

        "–î–æ—Ä–æ–≥–∞—è (–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ –±—Ä–∞—Ç–∞ (–∏–º—è) , –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π, –¥–æ–±—Ä—ã–π, –Ω–∞–¥–µ–∂–Ω—ã–π, —Å–∏–ª—å–Ω—ã–π\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç –∏ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ç–≤–æ–µ–º—É –±—Ä–∞—Ç—É?",

        "–ö–∞–∫–æ–π –ø–æ—Å—Ç—É–ø–æ–∫ –∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ, –ø–æ —Ç–≤–æ–µ–º—É –º–Ω–µ–Ω–∏—é, –æ—Å–æ–±–µ–Ω–Ω–æ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ –∏ –≤–∞–∂–Ω–æ –≤ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –¥–ª—è –≤–∞—Å –æ–±–µ–∏—Ö?",

        "–ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è –±—Ä–∞—Ç–∞ –ø–æ–¥—á–µ—Ä–∫–Ω—É–ª–∏ –¥–ª—è —Ç–µ–±—è –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –æ–ø–æ—Ä—É?",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å –±—Ä–∞—Ç–æ–º –º–∏–ª—ã–µ —Å–ª–æ–≤–∞ –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–í—Å–ø–æ–º–Ω–∏ –≤–µ—Å—ë–ª—ã–π —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –≤—ã —Å –±—Ä–∞—Ç–æ–º –≤–º–µ—Å—Ç–µ —Å–º–µ—è–ª–∏—Å—å. –ß—Ç–æ —Ç–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π —Å—é—Ä–ø—Ä–∏–∑, –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ –±—Ä–∞—Ç –¥–ª—è —Ç–µ–±—è –¥–µ–ª–∞–ª?",

        "–ï—Å–ª–∏ –ª–∏ —É –≤–∞—Å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –ø–æ–µ–∑–¥–∫–∏, –ª—é–±–∏–º–æ–µ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ, –æ–±—â–∏–µ –¥–µ—Ç—Å–∫–∏–µ –∏–≥—Ä—ã –∏–ª–∏ –∏–≥—Ä—É—à–∫–∏?",

        "–í—Å–ø–æ–º–Ω–∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ –±—Ä–∞—Ç–∞ –∫–∞–∫ —Å—ã–Ω–∞, –º—É–∂–∞, –æ—Ç—Ü–∞, –¥—Ä—É–≥–∞ (—á—Ç–æ —Ç—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å) –µ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏? –õ—é–±–æ–≤—å –∫ –ø–∏—Ç–æ–º—Ü–∞–º?",

        "–ß–µ–º—É –æ–Ω —Ç–µ–±—è –Ω–∞—É—á–∏–ª –∏–ª–∏ —á–µ–º—É —Ç—ã –µ–≥–æ –Ω–∞—É—á–∏–ª–∞, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–º–µ—Å—Ç–µ –ª—é–±–∏–ª–∏ –¥–µ–ª–∞—Ç—å?",

        "10. –ë—ã–ª–∏ –ª–∏ –∑–∞–±–∞–≤–Ω—ã–µ —Å—Å–æ—Ä—ã —É –≤–∞—Å, –∏–∑-–∑–∞ —á–µ–≥–æ –≤—ã —Å—Å–æ—Ä–∏–ª–∏—Å—å? (–∏–≥—Ä—É—à–∫–∏, –ø–∏—Ç–æ–º—Ü—ã, –¥—Ä—É–∑—å—è, –ø–æ–¥–∞—Ä–∫–∏)",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–≥–æ –±—Ä–∞—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–≥–æ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–º –±—Ä–∞—Ç–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –±—Ä–∞—Ç–∞ –∫ —Å–µ—Å—Ç—Ä–µ

    brother_to_sister = [

        "–î–æ—Ä–æ–≥–æ–π (–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π —Å–µ—Å—Ç—Ä—ã (–∏–º—è), –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º–∞—è –ª—É—á—à–∞—è, –¥–æ–±—Ä–∞—è, –∫—Ä–∞—Å–∏–≤–∞—è, –Ω–µ–∂–Ω–∞—è\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç –∏ —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–π —Å–µ—Å—Ç—Ä–µ? –í –∫–∞–∫–∏—Ö –≥–æ—Ä–æ–¥–∞—Ö –∂–∏–≤–µ—Ç–µ?",

        "–ö–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —É–≤–µ—Ä–µ–Ω—ã —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ –≤ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö –¥–ª—è –≤–∞—Å –æ–±–æ–∏—Ö?",

        "–ö–∞–∫–∏–µ —Å–ª–æ–≤–∞ –∏ –¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Ç—Ä—ã –ø–æ–¥—á–µ—Ä–∫–Ω—É–ª–∏ –¥–ª—è –≤–∞—Å –µ–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –æ–ø–æ—Ä—É?",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å —Å–µ—Å—Ç—Ä–æ–π –º–∏–ª—ã–µ —Å–ª–æ–≤–∞ –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–í—Å–ø–æ–º–Ω–∏—Ç–µ –≤–µ—Å—ë–ª—ã–π —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ –≤—ã —Å —Å–µ—Å—Ç—Ä–æ–π –≤–º–µ—Å—Ç–µ —Å–º–µ—è–ª–∏—Å—å. –ß—Ç–æ —Ç–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π —Å—é—Ä–ø—Ä–∏–∑, –ø—Ä–∞–∑–¥–Ω–∏–∫ –∏–ª–∏ –ø–æ–¥–∞—Ä–æ–∫ —Å–µ—Å—Ç—Ä–∞ –¥–ª—è –≤–∞—Å –¥–µ–ª–∞–ª–∞?",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, –ø–æ–µ–∑–¥–∫–∏ –∏–ª–∏ –ª—é–±–∏–º–æ–µ –≤—Ä–µ–º—è–ø—Ä–µ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ?",

        "–í—Å–ø–æ–º–Ω–∏—Ç–µ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–π —Å–µ—Å—Ç—Ä—ã –∫–∞–∫ –¥–æ—á–µ—Ä–∏, –∂–µ–Ω—ã, —Å–µ—Å—Ç—Ä—ã, –ø–æ–¥—Ä—É–≥–∏ (—á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å) –µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∫ –¥—Ä—É–≥–∏–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏? –õ—é–±–æ–≤—å –∫ –ø–∏—Ç–æ–º—Ü–∞–º?",

        "–ß–µ–º—É –æ–Ω–∞ –≤–∞—Å –Ω–∞—É—á–∏–ª–∞ –∏–ª–∏ —á–µ–º—É –≤—ã –µ–µ –Ω–∞—É—á–∏–ª–∏, —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–º–µ—Å—Ç–µ –ª—é–±–∏–ª–∏ –¥–µ–ª–∞—Ç—å?",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–π —Å–µ—Å—Ç—Ä–µ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–µ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–π —Å–µ—Å—Ç—Ä–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –±—Ä–∞—Ç–∞

    brother_to_brother = [

        "–ß—Ç–æ —Ç—ã –æ—Å–æ–±–µ–Ω–Ω–æ —Ü–µ–Ω–∏—à—å –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å –±—Ä–∞—Ç–æ–º?",

        "–ö–∞–∫–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –±—Ä–∞—Ç–æ–º —Ç–µ–±–µ –æ—Å–æ–±–µ–Ω–Ω–æ –¥–æ—Ä–æ–≥–æ?",

        "–ë—ã–ª–∏ –ª–∏ —É –≤–∞—Å —Å –Ω–∏–º ¬´—Å–µ–∫—Ä–µ—Ç–Ω—ã–µ¬ª –∑–∞–Ω—è—Ç–∏—è –∏–ª–∏ —Ç—Ä–∞–¥–∏—Ü–∏–∏?",

        "–ß–µ–º—É –Ω–∞—É—á–∏–ª —Ç–µ–±—è –±—Ä–∞—Ç?",

        "–ß—Ç–æ –æ–Ω –¥–µ–ª–∞–ª, –∫–æ–≥–¥–∞ —Ç–µ–±–µ –±—ã–ª–æ —Ç—Ä—É–¥–Ω–æ?",

        "–ö–∞–∫ –æ–Ω –≤—ã—Ä–∞–∂–∞–µ—Ç —Å–≤–æ—é –∑–∞–±–æ—Ç—É?",

        "–ö–∞–∫–∏–µ —É –Ω–µ–≥–æ —É–≤–ª–µ—á–µ–Ω–∏—è –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã, –æ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å —Å –≥–æ—Ä–¥–æ—Å—Ç—å—é?",

        "–ß–µ–º –≤—ã –ª—é–±–∏—Ç–µ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ?"

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å—ã–Ω–∞

    parent_to_son = [

        "–î–æ—Ä–æ–≥–∞—è (–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —Å—ã–Ω–∞, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π, –¥–æ–±—Ä—ã–π, –Ω–∞–¥–µ–∂–Ω—ã–π –∏ —Å–º–µ–ª—ã–π\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç —Å —Å—ã–Ω–æ–º –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —Å–∞–º—ã–º —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º –∏–∑ –¥–µ—Ç—Å—Ç–≤–∞ /—é–Ω–æ—Å—Ç–∏?",

        "–ö–∞–∫–∏–º–∏ –µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ —Ç—ã –≥–æ—Ä–¥–∏–ª–∞—Å—å –≤ –¥–µ—Ç—Å—Ç–≤–µ –∏–ª–∏ —Å–µ–π—á–∞—Å?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π —Ç—Ä–µ–ø–µ—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ –≤—ã –ø–æ–ª—É—á–∞–ª–∏ –æ—Ç –Ω–µ–≥–æ –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏?",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å —Å—ã–Ω–æ–º –º–∏–ª—ã–µ —Å–ª–æ–≤–∞ –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–í—Å–ø–æ–º–Ω–∏, –≥–¥–µ —Ç—ã –µ–≥–æ —á–µ–º—É-—Ç–æ —É—á–∏–ª–∞ –∏ –≤—ã –¥–µ–ª–∞–ª–∏ —ç—Ç–æ –≤–º–µ—Å—Ç–µ? (–≥–æ—Ç–æ–≤–∏—Ç—å, –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—å–∫–∞—Ö, —É—á–∏—Ç—å—Å—è)?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –∏ —Å–ª–æ–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –≤–º–µ—Å—Ç–µ –ø—Ä–æ—à–ª–∏, –ø—Ä–æ–∂–∏–ª–∏, –±—ã–ª–∏ –æ–ø–æ—Ä–æ–π –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–ö–∞–∫–∏–µ —Ö–æ–±–±–∏ —É —Ç–≤–æ–µ–≥–æ —Å—ã–Ω–∞, —á–µ–º –æ–Ω —É–≤–ª–µ—á–µ–Ω, –≤ —á–µ–º —Ç—ã –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å?",

        "–¢—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ —Å—ã–Ω–∞, –∫–∞–∫ –±—Ä–∞—Ç–∞, –º—É–∂–∞, –æ—Ç—Ü–∞, –¥—Ä—É–≥–∞ (—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å) –µ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏? –õ—é–±–æ–≤—å –∫ –ø–∏—Ç–æ–º—Ü–∞–º?",

        "–¢—ã –∂–∏–≤–µ—à—å —Å —Å—ã–Ω–æ–º –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤–∞–º–∏? (–≥–æ—Ä–æ–¥–∞ —É–∫–∞–∑–∞—Ç—å)",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–≥–æ —Å—ã–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–≥–æ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–º —Å—ã–Ω–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –¥–æ—á–µ—Ä–∏

    parent_to_daughter = [

        "–î–æ—Ä–æ–≥–∞—è (–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π –¥–æ—á–∫–∏, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º–∞—è –ª—É—á—à–∞—è, –¥–æ–±—Ä–∞—è, –∫—Ä–∞—Å–∏–≤–∞—è –∏ –Ω–µ–∂–Ω–∞—è\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç —Å –¥–æ—á–∫–æ–π —Ç—ã —Å—á–∏—Ç–∞–µ—à—å —Å–∞–º—ã–º —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º –∏–∑ –¥–µ—Ç—Å—Ç–≤–∞ /—é–Ω–æ—Å—Ç–∏?",

        "–ö–∞–∫–∏–º–∏ –µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ —Ç—ã –≥–æ—Ä–¥–∏–ª–∞—Å—å –≤ –¥–µ—Ç—Å—Ç–≤–µ –∏–ª–∏ —Å–µ–π—á–∞—Å?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π —Ç—Ä–µ–ø–µ—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ —Ç—ã –ø–æ–ª—É—á–∞–ª–∞ –æ—Ç –Ω–µ–µ –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏?",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å –¥–æ—á–∫–æ–π –º–∏–ª—ã–µ —Å–ª–æ–≤–∞ –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–í—Å–ø–æ–º–Ω–∏, –≥–¥–µ —Ç—ã –µ–µ —á–µ–º—É-—Ç–æ —É—á–∏–ª–∞ –∏ –≤—ã –¥–µ–ª–∞–ª–∏ —ç—Ç–æ –≤–º–µ—Å—Ç–µ? (–≥–æ—Ç–æ–≤–∏—Ç—å, —Å—Ç–∏—Ä–∞—Ç—å, —Ä–∏—Å–æ–≤–∞—Ç—å, —à–∏—Ç—å)?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –∏ —Å–ª–æ–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –≤–º–µ—Å—Ç–µ –ø—Ä–æ—à–ª–∏, –ø—Ä–æ–∂–∏–ª–∏, –±—ã–ª–∏ –æ–ø–æ—Ä–æ–π –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–ö–∞–∫–∏–µ —Ö–æ–±–±–∏ —É —Ç–≤–æ–µ–π –¥–æ—á–µ—Ä–∏, —á–µ–º –æ–Ω–∞ —É–≤–ª–µ—á–µ–Ω–∞, –≤ —á–µ–º —Ç—ã –µ–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å?",

        "–¢—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Ç–≤–æ–µ–π –¥–æ—á–µ—Ä–∏, –∫–∞–∫ —Å–µ—Å—Ç—Ä—ã, –∂–µ–Ω—ã, –º–∞–º—ã, –ø–æ–¥—Ä—É–≥–∏ (—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å) –µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏? –õ—é–±–æ–≤—å –∫ –ø–∏—Ç–æ–º—Ü–∞–º?",

        "–¢—ã –∂–∏–≤–µ—à—å —Å –¥–æ—á–∫–æ–π –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤–∞–º–∏? (–≥–æ—Ä–æ–¥–∞ —É–∫–∞–∑–∞—Ç—å)",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–π –¥–æ—á–µ—Ä–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–µ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–π –¥–æ—á–µ–Ω—å–∫–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç—Ü–∞ –∫ —Å—ã–Ω—É

    father_to_son = [

        "–î–æ—Ä–æ–≥–æ–π (–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —Å—ã–Ω–∞, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º—ã–π –ª—É—á—à–∏–π, –¥–æ–±—Ä—ã–π, –Ω–∞–¥–µ–∂–Ω—ã–π –∏ —Å–º–µ–ª—ã–π\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç —Å —Å—ã–Ω–æ–º —Ç—ã —Å—á–∏—Ç–∞–µ—à—å —Å–∞–º—ã–º —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º –∏–∑ –¥–µ—Ç—Å—Ç–≤–∞ /—é–Ω–æ—Å—Ç–∏?",

        "–ö–∞–∫–∏–º–∏ –µ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ —Ç—ã –≥–æ—Ä–¥–∏–ª—Å—è –≤ –¥–µ—Ç—Å—Ç–≤–µ –∏–ª–∏ —Å–µ–π—á–∞—Å?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π —Ç—Ä–µ–ø–µ—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ —Ç—ã –ø–æ–ª—É—á–∞–ª –æ—Ç –Ω–µ–≥–æ –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏?",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å —Å—ã–Ω–æ–º –º–∏–ª—ã–µ —Å–ª–æ–≤–∞ –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–í—Å–ø–æ–º–Ω–∏, –≥–¥–µ —Ç—ã –µ–≥–æ —á–µ–º—É-—Ç–æ —É—á–∏–ª –∏ –≤—ã –¥–µ–ª–∞–ª–∏ —ç—Ç–æ –≤–º–µ—Å—Ç–µ? (–≥–æ—Ç–æ–≤–∏—Ç—å, –∫–∞—Ç–∞—Ç—å—Å—è –Ω–∞ –∫–æ–Ω—å–∫–∞—Ö, —É—á–∏—Ç—å—Å—è)?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –∏ —Å–ª–æ–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –≤–º–µ—Å—Ç–µ –ø—Ä–æ—à–ª–∏, –ø—Ä–æ–∂–∏–ª–∏, –±—ã–ª–∏ –æ–ø–æ—Ä–æ–π –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–ö–∞–∫–∏–µ —Ö–æ–±–±–∏ —É —Ç–≤–æ–µ–≥–æ —Å—ã–Ω–∞, —á–µ–º –æ–Ω —É–≤–ª–µ—á–µ–Ω, –≤ —á–µ–º —Ç—ã –µ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å?",

        "–¢—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ —Å—ã–Ω–∞, –∫–∞–∫ –±—Ä–∞—Ç–∞, –º—É–∂–∞, –æ—Ç—Ü–∞, –¥—Ä—É–≥–∞ (—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å) –µ–≥–æ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏? –õ—é–±–æ–≤—å –∫ –ø–∏—Ç–æ–º—Ü–∞–º?",

        "–¢—ã –∂–∏–≤–µ—à—å —Å —Å—ã–Ω–æ–º –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤–∞–º–∏? (–≥–æ—Ä–æ–¥–∞ —É–∫–∞–∑–∞—Ç—å)",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–≥–æ —Å—ã–Ω–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–≥–æ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–º —Å—ã–Ω–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ—Ç—Ü–∞ –∫ –¥–æ—á–µ—Ä–∏

    father_to_daughter = [

        "–î–æ—Ä–æ–≥–æ–π (–∏–º—è), —Å–µ–≥–æ–¥–Ω—è –º—ã –≤–º–µ—Å—Ç–µ —Å —Ç–æ–±–æ–π —Å–æ–∑–¥–∞–µ–º –ø–µ—Å–Ω—é –¥–ª—è —Ç–≤–æ–µ–π –ª—é–±–∏–º–æ–π –¥–æ—á–∫–∏, –¥–∞–≤–∞–π —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ—Ç –ø–æ–¥–∞—Ä–æ–∫ –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º. –û—Ç–≤–µ—Ç—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –¥–æ-–º—É—Ä–∞—à–µ–∫.",

        "",

        "–°–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏—è: \"–¢—ã —Å–∞–º–∞—è –ª—É—á—à–∞—è, –¥–æ–±—Ä–∞—è, –∫—Ä–∞—Å–∏–≤–∞—è –∏ –Ω–µ–∂–Ω–∞—è\", –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –Ω–∞–ø–∏—à–µ—Ç –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, –∞ –æ—Ç —Ç–µ–±—è –Ω–∞–º –Ω—É–∂–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–µ—Ç–∞–ª–∏:",

        "",

        "–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç —Å –¥–æ—á–∫–æ–π —Ç—ã —Å—á–∏—Ç–∞–µ—à—å —Å–∞–º—ã–º —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º –∏–∑ –¥–µ—Ç—Å—Ç–≤–∞ /—é–Ω–æ—Å—Ç–∏?",

        "–ö–∞–∫–∏–º–∏ –µ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ —Ç—ã –≥–æ—Ä–¥–∏–ª—Å—è –≤ –¥–µ—Ç—Å—Ç–≤–µ –∏–ª–∏ —Å–µ–π—á–∞—Å?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π —Ç—Ä–µ–ø–µ—Ç–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ —Ç—ã –ø–æ–ª—É—á–∞–ª –æ—Ç –Ω–µ–µ –Ω–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏?",

        "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å –¥–æ—á–∫–æ–π –º–∏–ª—ã–µ —Å–ª–æ–≤–∞ –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–í—Å–ø–æ–º–Ω–∏, –≥–¥–µ —Ç—ã –µ–µ —á–µ–º—É-—Ç–æ —É—á–∏–ª –∏ –≤—ã –¥–µ–ª–∞–ª–∏ —ç—Ç–æ –≤–º–µ—Å—Ç–µ? (–≥–æ—Ç–æ–≤–∏—Ç—å, —Å—Ç–∏—Ä–∞—Ç—å, —Ä–∏—Å–æ–≤–∞—Ç—å, —à–∏—Ç—å)?",

        "–ö–∞–∫–æ–π —Å–∞–º—ã–π –≤–∞–∂–Ω—ã–π –∏ —Å–ª–æ–∂–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –≤–º–µ—Å—Ç–µ –ø—Ä–æ—à–ª–∏, –ø—Ä–æ–∂–∏–ª–∏, –±—ã–ª–∏ –æ–ø–æ—Ä–æ–π –¥—Ä—É–≥ –¥–ª—è –¥—Ä—É–≥–∞?",

        "–ö–∞–∫–∏–µ —Ö–æ–±–±–∏ —É —Ç–≤–æ–µ–π –¥–æ—á–µ—Ä–∏, —á–µ–º –æ–Ω–∞ —É–≤–ª–µ—á–µ–Ω–∞, –≤ —á–µ–º —Ç—ã –µ–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å?",

        "–¢—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Ç–≤–æ–µ–π –¥–æ—á–µ—Ä–∏, –∫–∞–∫ —Å–µ—Å—Ç—Ä—ã, –∂–µ–Ω—ã, –º–∞–º—ã, –ø–æ–¥—Ä—É–≥–∏ (—á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å) –µ–µ –æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∫ –¥—Ä—É–≥–∏–º —á–ª–µ–Ω–∞–º —Å–µ–º—å–∏? –õ—é–±–æ–≤—å –∫ –ø–∏—Ç–æ–º—Ü–∞–º?",

        "–¢—ã –∂–∏–≤–µ—à—å —Å –¥–æ—á–∫–æ–π –≤ –æ–¥–Ω–æ–º –≥–æ—Ä–æ–¥–µ –∏–ª–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –≤–∞–º–∏? (–≥–æ—Ä–æ–¥–∞ —É–∫–∞–∑–∞—Ç—å)",

        "",

        "–û—Ç–≤–µ—á–∞—è –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–∏—â–∏ —Ç–µ–ø–ª—ã–µ –æ–±—â–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑–æ–≤—É—Ç —Ç—Ä–µ–ø–µ—Ç, —Ä–∞–¥–æ—Å—Ç—å –∏ –º—É—Ä–∞—à–∫–∏ —É —Ç–≤–æ–µ–π –¥–æ—á–µ—Ä–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–º–æ–≥—É—Ç —Ç—Ä–æ–Ω—É—Ç—å –µ–µ —Å–µ—Ä–¥—Ü–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –Ω–µ –æ–ø–∏—Ä–∞—è—Å—å –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤. –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –∏ –¥—É—à–µ–≤–Ω–æ–π –ø–µ—Å–Ω–∏, –º—ã –∂–¥–µ–º –æ—Ç —Ç–µ–±—è 5-8 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –ø—Ä–æ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –∏ –æ —Ç–≤–æ–µ–π –¥–æ—á–µ–Ω—å–∫–µ.",

        "–°—á–∞—Å—Ç–ª–∏–≤—ã—Ö –≤–∞–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –º—ã –∂–¥–µ–º –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é."

    ]

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–≤—è–∑–∏ –∏ –ø–æ–ª–∞

    if relation == "–õ—é–±–∏–º–æ–º—É" and gender == "–¥–µ–≤—É—à–∫–∞":

        return wife_to_husband

    elif relation == "–õ—é–±–∏–º–æ–π" and gender == "–ø–∞—Ä–µ–Ω—å":

        return husband_to_wife

    elif relation == "–ú–∞–º–µ":

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–µ—Å–Ω–∏

        if gender == "–ø–∞—Ä–µ–Ω—å" or gender == "–º–∞–ª—å—á–∏–∫":

            return son_to_mom

        else:

            return child_to_mom

    elif relation == "–ü–∞–ø–µ":

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–µ—Å–Ω–∏

        if gender == "–ø–∞—Ä–µ–Ω—å" or gender == "–º–∞–ª—å—á–∏–∫":

            return son_to_dad

        else:

            return child_to_dad

    elif relation == "–ë–∞–±—É—à–∫–µ":

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–µ—Å–Ω–∏

        if gender == "–ø–∞—Ä–µ–Ω—å" or gender == "–º–∞–ª—å—á–∏–∫":

            return grandson_to_grandma

        else:

            return grandchild_to_grandma

    elif relation == "–î–µ–¥—É—à–∫–µ":

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–µ—Å–Ω–∏

        if gender == "–ø–∞—Ä–µ–Ω—å" or gender == "–º–∞–ª—å—á–∏–∫":

            return grandson_to_grandpa

        else:

            return grandchild_to_grandpa

    elif relation == "–ü–æ–¥—Ä—É–≥–µ":

        return friend_to_friend

    elif relation == "–°–µ—Å—Ç—Ä–µ":

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–µ—Å–Ω–∏

        if gender == "–ø–∞—Ä–µ–Ω—å" or gender == "–º–∞–ª—å—á–∏–∫":

            return brother_to_sister

        else:

            return sister_to_sister

    elif relation == "–ë—Ä–∞—Ç—É":

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –ø–µ—Å–Ω—é –¥–ª—è –±—Ä–∞—Ç–∞

        if gender == "–¥–µ–≤—É—à–∫–∞":

            return sister_to_brother

        else:

            return brother_to_brother

    elif relation == "–°—ã–Ω—É":

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–µ—Å–Ω–∏

        if gender == "–ø–∞—Ä–µ–Ω—å" or gender == "–º–∞–ª—å—á–∏–∫":

            return father_to_son

        else:

            return parent_to_son

    elif relation == "–î–æ—á–µ—Ä–∏":

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–µ—Å–Ω–∏

        if gender == "–ø–∞—Ä–µ–Ω—å" or gender == "–º–∞–ª—å—á–∏–∫":

            return father_to_daughter

        else:

            return parent_to_daughter

    elif relation == "–ü–∞—Ä–Ω—é":

        return girlfriend_to_boyfriend

    elif relation == "–î–µ–≤—É—à–∫–µ":

        return boyfriend_to_girlfriend

    else:

        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–∞—Ä

        if gender == "–¥–µ–≤—É—à–∫–∞":

            return wife_to_husband

        else:

            return husband_to_wife



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ "–î—Ä—É–≥–æ–µ" (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤—ã—à–µ startswith –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤)

@dp.callback_query(F.data == "q1_other")

async def story_q1_other(callback: types.CallbackQuery, state: FSMContext):

    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")

    await state.set_state(StoryQuestionsStates.q1)

    await callback.answer()

    await log_state(callback.message, state)



@dp.callback_query(F.data == "q2_other")

async def story_q2_other(callback: types.CallbackQuery, state: FSMContext):

    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")

    await state.set_state(StoryQuestionsStates.q2)

    await callback.answer()

    await log_state(callback.message, state)



@dp.callback_query(F.data == "q3_other")

async def story_q3_other(callback: types.CallbackQuery, state: FSMContext):

    await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")

    await state.set_state(StoryQuestionsStates.q3)

    await callback.answer()

    await log_state(callback.message, state)



@dp.callback_query(F.data.startswith("q1_"))

async def story_q1(callback: types.CallbackQuery, state: FSMContext):

    answer_index = callback.data.replace("q1_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    data = await state.get_data()
    questions = data.get("story_questions", {})
    q1_question = questions.get("q1", {"options": []})
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    try:
        answer_text = q1_question["options"][int(answer_index)]
    except (IndexError, ValueError):
        answer_text = answer_index  # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é
    
    await state.update_data(story_q1=answer_text)

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î

    await update_order_progress(state)

    

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç–≤–µ—Ç q1: {answer_text} (–∏–Ω–¥–µ–∫—Å: {answer_index})")

    

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    data = await state.get_data()

    questions = data.get("story_questions", {})

    q2_question = questions.get("q2", {"text": "–¢—ë–ø–ª–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ:", "options": ["–®–∫–æ–ª–∞", "–ö–æ–≥–¥–∞ –±–æ–ª–µ–ª–∞", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"]})

    

    # –í–æ–ø—Ä–æ—Å 2

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text=option, callback_data=f"q2_{i}")] 

        for i, option in enumerate(q2_question["options"])

    ] + [[InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="q2_other")]])

    

    await callback.message.edit_text(q2_question["text"], reply_markup=keyboard)

    # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–æ–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É

    await state.update_data(story_q1_user_answer=None)

    await state.set_state(StoryQuestionsStates.q2)

    await callback.answer()

    await log_state(callback.message, state)



@dp.callback_query(F.data.startswith("q2_"))

async def story_q2(callback: types.CallbackQuery, state: FSMContext):

    answer_index = callback.data.replace("q2_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    data = await state.get_data()
    questions = data.get("story_questions", {})
    q2_question = questions.get("q2", {"options": []})
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    try:
        answer_text = q2_question["options"][int(answer_index)]
    except (IndexError, ValueError):
        answer_text = answer_index  # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é
    
    await state.update_data(story_q2=answer_text)

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î

    await update_order_progress(state)

    

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç–≤–µ—Ç q2: {answer_text} (–∏–Ω–¥–µ–∫—Å: {answer_index})")

    

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    data = await state.get_data()

    questions = data.get("story_questions", {})

    q3_question = questions.get("q3", {"text": "–ß–µ–º—É –º–∞–º–∞ –Ω–∞—É—á–∏–ª–∞:", "options": ["–ö–æ–Ω—å–∫–∏", "–í–µ–ª–æ—Å–∏–ø–µ–¥", "–†–∏—Å–æ–≤–∞—Ç—å", "–ì–æ—Ç–æ–≤–∏—Ç—å"]})

    

    # –í–æ–ø—Ä–æ—Å 3

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text=option, callback_data=f"q3_{i}")] 

        for i, option in enumerate(q3_question["options"])

    ] + [[InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="q3_other")]])

    

    await callback.message.edit_text(q3_question["text"], reply_markup=keyboard)

    # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–æ–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É

    await state.update_data(story_q2_user_answer=None)

    await state.set_state(StoryQuestionsStates.q3)

    await callback.answer()

    await log_state(callback.message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∞–Ω–∫–µ—Ç—ã

@dp.message(StateFilter(StoryQuestionsStates.q1))

async def story_q1_text(message: types.Message, state: FSMContext):

    await state.update_data(story_q1=message.text, story_q1_user_answer=message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î

    await update_order_progress(state)

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –æ—Ç–≤–µ—Ç–µ

    data = await state.get_data()

    order_id = data.get('order_id')

    if order_id:

        await add_outbox_task(

            order_id=order_id,

            user_id=message.from_user.id,

            type_="manager_notification",

            content=f"üìù –ó–∞–∫–∞–∑ #{order_id}: –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 1 (—Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç): {message.text}"

        )

    

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    data = await state.get_data()

    questions = data.get("story_questions", {})

    q2_question = questions.get("q2", {"text": "–¢—ë–ø–ª–æ–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ:", "options": ["–®–∫–æ–ª–∞", "–ö–æ–≥–¥–∞ –±–æ–ª–µ–ª–∞", "–ü–æ–¥–¥–µ—Ä–∂–∫–∞"]})

    

    # –í–æ–ø—Ä–æ—Å 2

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text=option, callback_data=f"q2_{i}")] 

        for i, option in enumerate(q2_question["options"])

    ] + [[InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="q2_other")]])

    

    await message.answer(q2_question["text"], reply_markup=keyboard)

    # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–æ–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É

    await state.update_data(story_q1_user_answer=None)

    await state.set_state(StoryQuestionsStates.q2)

    await log_state(message, state)



@dp.message(StateFilter(StoryQuestionsStates.q2))

async def story_q2_text(message: types.Message, state: FSMContext):

    await state.update_data(story_q2=message.text, story_q2_user_answer=message.text)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î

    await update_order_progress(state)

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –æ—Ç–≤–µ—Ç–µ

    data = await state.get_data()

    order_id = data.get('order_id')

    if order_id:

        await add_outbox_task(

            order_id=order_id,

            user_id=message.from_user.id,

            type_="manager_notification",

            content=f"üìù –ó–∞–∫–∞–∑ #{order_id}: –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 2 (—Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç): {message.text}"

        )

    

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    data = await state.get_data()

    questions = data.get("story_questions", {})

    q3_question = questions.get("q3", {"text": "–ß–µ–º—É –º–∞–º–∞ –Ω–∞—É—á–∏–ª–∞:", "options": ["–ö–æ–Ω—å–∫–∏", "–í–µ–ª–æ—Å–∏–ø–µ–¥", "–†–∏—Å–æ–≤–∞—Ç—å", "–ì–æ—Ç–æ–≤–∏—Ç—å"]})

    

    # –í–æ–ø—Ä–æ—Å 3

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text=option, callback_data=f"q3_{i}")] 

        for i, option in enumerate(q3_question["options"])

    ] + [[InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="q3_other")]])

    

    await message.answer(q3_question["text"], reply_markup=keyboard)

    # –û—á–∏—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –Ω–æ–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É

    await state.update_data(story_q2_user_answer=None)

    await state.set_state(StoryQuestionsStates.q3)

    await log_state(message, state)



@dp.message(StateFilter(StoryQuestionsStates.q3))

async def story_q3_text(message: types.Message, state: FSMContext):

    await state.update_data(story_q3=message.text)

    await update_order_progress(state, status="questions_completed")

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –æ—Ç–≤–µ—Ç–µ

    data = await state.get_data()

    order_id = data.get('order_id')

    if order_id:

        await add_outbox_task(

            order_id=order_id,

            user_id=message.from_user.id,

            type_="manager_notification",

            content=f"üìù –ó–∞–∫–∞–∑ #{order_id}: –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å 3 (—Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç): {message.text}"

        )

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Ç–æ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç–µ
    await message.answer(
        f"–ó–∞–∫–∞–∑ ‚Ññ{order_id:04d} –≤ —Ä–∞–±–æ—Ç–µ ü¶ã\n"
        f"–ò–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä –±–µ—Ä–µ–∂–Ω–æ —Å–æ–∑–¥–∞–µ—Ç —Å—é–∂–µ—Ç—ã, –∞ –∞–≤—Ç–æ—Ä—ã –Ω–∞–ø–æ–ª–Ω—è—é—Ç –µ—ë —Å–∞–º—ã–º–∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏. –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –ø—Ä–æ–±–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã ‚òëÔ∏è"
    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_demo_book (–ì–ª–∞–≤–∞ 2: –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–Ω–∏–≥–∏)
    from db import create_or_update_user_timer
    await create_or_update_user_timer(message.from_user.id, order_id, "waiting_demo_book", "–ö–Ω–∏–≥–∞")
    logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_demo_book (–ì–ª–∞–≤–∞ 2), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}, –∑–∞–∫–∞–∑ {order_id}")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º—É –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü
    await state.set_state(BookFinalStates.choosing_pages)

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É —á–µ—Ä–µ–∑ outbox

    await add_outbox_task(

        order_id=order_id,

        user_id=message.from_user.id,

        type_="manager_notification",

        content=f"–ó–∞–∫–∞–∑ #{order_id} –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–ª–æ—É). –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –≤–æ–ø—Ä–æ—Å—ã."

    )

    

    # –£–ë–†–ê–ù–û: –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–ª—É—à–∫–æ–π - –æ–Ω–æ –Ω–µ –Ω—É–∂–Ω–æ
    # –¢–µ–ø–µ—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±—É–¥–µ—Ç –∂–¥–∞—Ç—å –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    

    await log_state(message, state)



# –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ –ë–î)

def get_order_number(user_id):

    return f"{int(user_id)%10000:04d}"



@dp.callback_query(F.data.startswith("q3_"))

async def story_q3(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    answer_index = callback.data.replace("q3_", "")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    data = await state.get_data()
    questions = data.get("story_questions", {})
    q3_question = questions.get("q3", {"options": []})
    
    # –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
    try:
        answer_text = q3_question["options"][int(answer_index)]
    except (IndexError, ValueError):
        answer_text = answer_index  # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –ø–æ–≤–µ–¥–µ–Ω–∏—é
    
    await state.update_data(story_q3=answer_text)

    await update_order_progress(state, status="questions_completed")

    

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω –æ—Ç–≤–µ—Ç q3: {answer_text} (–∏–Ω–¥–µ–∫—Å: {answer_index})")

    

    # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∑–∞–∫–∞–∑–∞

    data = await state.get_data()

    order_id = data.get('order_id')

    await callback.message.edit_text(

        f"–ó–∞–∫–∞–∑ ‚Ññ{order_id:04d} –≤ —Ä–∞–±–æ—Ç–µ ü¶ã\n"

        f"–ò–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä –±–µ—Ä–µ–∂–Ω–æ —Å–æ–∑–¥–∞–µ—Ç —Å—é–∂–µ—Ç—ã, –∞ –∞–≤—Ç–æ—Ä—ã –Ω–∞–ø–æ–ª–Ω—è—é—Ç –µ—ë —Å–∞–º—ã–º–∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏. –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –ø—Ä–æ–±–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—É–¥—É—Ç –≥–æ—Ç–æ–≤—ã ‚òëÔ∏è"

    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_demo_book (–ì–ª–∞–≤–∞ 2: –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–Ω–∏–≥–∏)
    from db import create_or_update_user_timer
    await create_or_update_user_timer(callback.from_user.id, order_id, "waiting_demo_book", "–ö–Ω–∏–≥–∞")
    logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_demo_book (–ì–ª–∞–≤–∞ 2), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}, –∑–∞–∫–∞–∑ {order_id}")

    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–º—É –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü

    await state.set_state(BookFinalStates.choosing_pages)

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É —á–µ—Ä–µ–∑ outbox

    await add_outbox_task(

        order_id=order_id,

        user_id=callback.from_user.id,

        type_="manager_notification",

        content=f"–ó–∞–∫–∞–∑ #{order_id} –≥–æ—Ç–æ–≤ –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ñ–ª–æ—É). –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –≤–æ–ø—Ä–æ—Å—ã."

    )

    

    # –£–ë–†–ê–ù–û: –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–≥–ª—É—à–∫–æ–π —Å–æ–≥–ª–∞—Å–Ω–æ –ì–ª–∞–≤–µ 11

    

    await log_state(callback.message, state)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ" –ø–æ—Å–ª–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

@dp.callback_query(F.data == "continue_after_demo")

async def after_demo_continue(callback: types.CallbackQuery, state: FSMContext):

    try:

        logging.info(f"üîò –ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ' –Ω–∞–∂–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {callback.from_user.id}")

        

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        data = await state.get_data()

        order_id = data.get('order_id')

        

        # –¢—Ä–µ–∫–∏–Ω–≥: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É" –ø–æ—Å–ª–µ –¥–µ–º–æ –∫–Ω–∏–≥–∏
        await track_event(
            user_id=callback.from_user.id,
            event_type='demo_learn_price_clicked',
            event_data={
                'order_id': order_id,
                'clicked_at': datetime.now().isoformat()
            },
            step_name='demo_learn_price_clicked',
            product_type='–ö–Ω–∏–≥–∞',
            order_id=order_id
        )

        logging.info(f"üìã –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: order_id={order_id}, data={data}")

        logging.info(f"üìã –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –≤ state: {data.get('product', '–ù–ï –£–ö–ê–ó–ê–ù')}")

        

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞

        product = data.get('product', '–ö–Ω–∏–≥–∞')  # –ë–µ—Ä–µ–º –∏–∑ state, –µ—Å–ª–∏ –µ—Å—Ç—å

        try:

            if order_id:

                order = await get_order(order_id)

                logging.info(f"üîç –ü–æ–ª—É—á–µ–Ω –∑–∞–∫–∞–∑: {order}")

                if order and order.get('order_data'):

                    order_data = json.loads(order.get('order_data', '{}'))

                    product_from_db = order_data.get('product', '')

                    if product_from_db:  # –ï—Å–ª–∏ –≤ –ë–î –µ—Å—Ç—å —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ

                        product = product_from_db

                        logging.info(f"üì¶ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –ë–î: {product}")

                    else:

                        logging.info(f"üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ state: {product}")

                    logging.info(f"üì¶ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: {order_data}")

                else:

                    logging.warning(f"‚ö†Ô∏è –ù–µ—Ç order_data –≤ –∑–∞–∫–∞–∑–µ {order_id}")

            else:

                logging.warning(f"‚ö†Ô∏è –ù–µ—Ç order_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏")

        except Exception as e:

            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")

            import traceback

            logging.error(f"‚ùå Traceback: {traceback.format_exc()}")

        

        logging.info(f"üéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞: {product}")

        

        if product == "–ü–µ—Å–Ω—è":

            logging.info(f"üéµ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –ø–µ—Å–Ω–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ demo_received_song –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–º–æ
            if order_id:
                try:
                    from db import deactivate_user_timers, create_or_update_user_timer
                    await deactivate_user_timers(callback.from_user.id, order_id)
                    await create_or_update_user_timer(callback.from_user.id, order_id, "demo_received_song", "–ü–µ—Å–Ω—è")
                    logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ demo_received_song –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–º–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}, –∑–∞–∫–∞–∑ {order_id}")
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è demo_received_song: {e}")

            # –î–ª—è –ø–µ—Å–Ω–∏ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ

            try:

                song_price = await get_product_price_async("–ü–µ—Å–Ω—è", "üíå –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è")

                logging.info(f"üí∞ –ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è –ø–µ—Å–Ω–∏: {song_price}")

            except Exception as e:

                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –ø–µ—Å–Ω–∏: {e}")

                song_price = 2990  # –†–µ–∑–µ—Ä–≤–Ω–∞—è —Ü–µ–Ω–∞

            

            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa –¥–ª—è –ø–µ—Å–Ω–∏

            description = format_payment_description("–ü–µ—Å–Ω—è", "üíå –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è", order_id)

            payment_data = await create_payment(order_id, song_price, description, "–ü–µ—Å–Ω—è")

            

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ state

            await state.update_data(

                payment_id=payment_data['payment_id'],

                payment_url=payment_data['confirmation_url'],

                format="üéµ –ü–µ—Å–Ω—è",

                price=song_price

            )

            

            keyboard = InlineKeyboardMarkup(inline_keyboard=[

                [InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å –ø–µ—Å–Ω—é", url=payment_data['confirmation_url'])],

                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],


            ])

            

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–µ—Å–Ω–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

            order_data = await get_order_summary_data(order_id, state)

            order_summary = ""

            

            await callback.message.answer(

                f"–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—åüôèüèª\n"

                f"–ú—ã –≤—ã–±—Ä–∞–ª–∏ –¥–ª—è —Ç–µ–±—è —Å–∞–º—ã–π —Ç—ë–ø–ª—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"

                f"‚ú® –ê–≤—Ç–æ—Ä—Å–∫–∞—è –ø–µ—Å–Ω—è –ø–æ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é 3 –º–∏–Ω—É—Ç—ã —Å —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –æ—Ç —Ç–µ–±—è –∑–∞ 2900 —Ä—É–±–ª–µ–π.\n\n"

                f"–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –º—É–∑—ã–∫–∞, –∞ –ø–æ–¥–∞—Ä–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–∂–∏–≤–∞—é—Ç —Ç–≤–æ–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è, –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏ —á—É–≤—Å—Ç–≤–∞.\n"

                f"–û–Ω –ø–µ—Ä–µ–¥–∞—Å—Ç —Ç–æ, —á—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å - –∏—Å–∫—Ä–µ–Ω–Ω—é—é –ª—é–±–æ–≤—å‚ù§Ô∏è\n"

                f"–¢–∞–∫–∞—è –ø–µ—Å–Ω—è —Ç—Ä–æ–Ω–µ—Ç –¥–æ –º—É—Ä–∞—à–µ–∫ –∏ —Å—Ç–∞–Ω–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –Ω–∞–≤—Å–µ–≥–¥–∞.\n\n"

                f"–ú—ã –±–µ—Ä–µ–∂–Ω–æ —Å–æ–±–µ—Ä—ë–º —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏–º –∏—Ö –≤ —Ç—ë–ø–ª—ã–π —Ç–µ–∫—Å—Ç.\n"

                f"–î–∞–ª–µ–µ –º—ã –¥–æ–±–∞–≤–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∞—Ä–∞–Ω–∂–∏—Ä–æ–≤–∫—É, —á—Ç–æ–±—ã –ø–µ—Å–Ω—è –∑–≤—É—á–∞–ª–∞ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ –≤–∞—Å üé∂\n"

                f"–ò –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–±–µ –≤–µ—Ä—Å–∏—é –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∫–∞–∂–¥–æ–µ —Å–ª–æ–≤–æ –ø–æ–ø–∞–ª–æ \"–í —Å–∞–º–æ–µ —Å–µ—Ä–¥—Ü–µ\"‚ù§Ô∏è",

                reply_markup=keyboard,

                parse_mode="HTML"

            )

            await callback.answer()

            logging.info(f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")

            

        else:

            logging.info(f"üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ –∫–Ω–∏–≥–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ

            existing_format = None

            existing_price = None

            try:

                if order_id:

                    order = await get_order(order_id)

                    if order and order.get('order_data'):

                        order_data = json.loads(order.get('order_data', '{}'))

                        existing_format = order_data.get('format')

                        existing_price = order_data.get('price')

                        logging.info(f"üîç –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç –≤ –∑–∞–∫–∞–∑–µ: {existing_format}, —Ü–µ–Ω–∞: {existing_price}")

            except Exception as e:

                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: {e}")

            

            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–Ω–∏–≥–∏

            if existing_format and existing_price:

                logging.info(f"‚úÖ –§–æ—Ä–º–∞—Ç —É–∂–µ –≤—ã–±—Ä–∞–Ω: {existing_format}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–Ω–∏–≥–∏")

                await state.update_data(format=existing_format, price=existing_price)

                

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–Ω–∏–≥–∏

                await state.set_state(BookCreationStates.waiting_for_hero_intro)

                await callback.message.answer(

                    "‚ú® –ê–≤—Ç–æ—Ä—Å–∫–∞—è –∫–Ω–∏–≥–∞ –ø–æ –≤–∞—à–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî —Å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è–º–∏ –≤–∞—à–∏—Ö –≥–µ—Ä–æ–µ–≤ –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è üíù\n\n"

                    "–û–Ω–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 26 —Å—Ç—Ä–∞–Ω–∏—Ü, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö:\n\n"

                    f"–ü–µ—á–∞—Ç–Ω–∞—è –∫–Ω–∏–≥–∞ –≤ —Ç–≤–µ—Ä–¥–æ–º –ø–µ—Ä–µ–ø–ª–µ—Ç–µ ‚Äî {combo_price} —Ä—É–±–ª–µ–π;\n"

                    f"–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî {ebook_price} —Ä—É–±–ª–µ–π;\n"

                    "–î–æ—Å—Ç–∞–≤–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.\n\n"

                    "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–Ω–∏–≥–∞, –∞ –ø–æ–¥–∞—Ä–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–∂–∏–≤–∞—é—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"

                    "–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞—Ç—å —Å—é–∂–µ—Ç—ã –∏ –æ–±–ª–æ–∂–∫—É.\n\n"

                    "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! –†–∞—Å—Å–∫–∞–∂–∏, –∫—Ç–æ –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π —Ç–≤–æ–µ–π –∏—Å—Ç–æ—Ä–∏–∏? üë§",

                    parse_mode="HTML"

                )

                await callback.answer()

                await log_state(callback.message, state)

                return

            

            # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞

            try:

                ebook_price = await get_product_price_async("–ö–Ω–∏–≥–∞", "üìÑ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞")

                combo_price = await get_product_price_async("–ö–Ω–∏–≥–∞", "üì¶ –ü–µ—á–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è")

                logging.info(f"üí∞ –ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–Ω—ã: ebook={ebook_price}, combo={combo_price}")

            except Exception as e:

                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω: {e}")

                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ

                ebook_price = 1990

                combo_price = 7639

            

            # –≠—Ç–∞–ø –≤—ã–±–æ—Ä–∞ —Ñ–æ—Ä–º–∞—Ç–∞

            keyboard = InlineKeyboardMarkup(inline_keyboard=[

                [InlineKeyboardButton(text=f"–ü–µ—á–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî {combo_price} —Ä—É–±–ª–µ–π", callback_data="format_combo")],

                [InlineKeyboardButton(text=f"–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî {ebook_price} —Ä—É–±–ª–µ–π", callback_data="format_ebook")],

            ])

            logging.info(f"üéØ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")

            

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)

            await callback.message.answer(

                "‚ú® –ê–≤—Ç–æ—Ä—Å–∫–∞—è –∫–Ω–∏–≥–∞ –ø–æ –≤–∞—à–µ–π —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ ‚Äî —Å –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è–º–∏ –≤–∞—à–∏—Ö –≥–µ—Ä–æ–µ–≤ –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è üíù\n\n"

                "–û–Ω–∞ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 26 —Å—Ç—Ä–∞–Ω–∏—Ü, –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –µ–µ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö:\n\n"

                f"–ü–µ—á–∞—Ç–Ω–∞—è –∫–Ω–∏–≥–∞ –≤ —Ç–≤–µ—Ä–¥–æ–º –ø–µ—Ä–µ–ø–ª–µ—Ç–µ ‚Äî {combo_price} —Ä—É–±–ª–µ–π;\n"

                f"–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî {ebook_price} —Ä—É–±–ª–µ–π;\n"

                "–î–æ—Å—Ç–∞–≤–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–≥–∏–æ–Ω–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è.\n\n"

                "–≠—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–Ω–∏–≥–∞, –∞ –ø–æ–¥–∞—Ä–æ–∫, –≤ –∫–æ—Ç–æ—Ä–æ–º –æ–∂–∏–≤–∞—é—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n"

                "–û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞—Ç—å —Å—é–∂–µ—Ç—ã –∏ –æ–±–ª–æ–∂–∫—É.\n"

                "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –±–µ—Ä–µ–∂–Ω–æ —Å–æ–±–µ—Ä—ë—Ç —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç –∏—Ö –≤ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –∫–∞–∂–¥–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç—Ä–æ–Ω—É–ª–∞ –≤–∞—à–∏ —Å–µ—Ä–¥—Ü–∞ ‚ù§Ô∏è\n\n"

                "–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Ç–µ–±–µ –ø–µ—Ä–≤—É—é –≤–µ—Ä—Å–∏—é –∫–Ω–∏–≥–∏ –Ω–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.",

                reply_markup=keyboard

            )

            await callback.answer()

            logging.info(f"‚úÖ –í—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")

        

        await log_state(callback.message, state)

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ after_demo_continue: {e}")

        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        try:

            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –æ–ø–ª–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

        except:

            pass



@dp.callback_query(F.data.in_(["format_ebook", "format_combo"]))

async def format_chosen(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    format_choice = callback.data

    data = await state.get_data()

    order_id = data.get('order_id')

    

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    try:

        if format_choice == "format_ebook":

            price = await get_product_price_async("–ö–Ω–∏–≥–∞", "üìÑ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞")

            format_name = "üìÑ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞"

        else:

            price = await get_product_price_async("–ö–Ω–∏–≥–∞", "üì¶ –ü–µ—á–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è")

            format_name = "üì¶ –ü–µ—á–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è"

    except:

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ

        if format_choice == "format_ebook":

            price = 1990

            format_name = "üìÑ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞"

        else:

            price = 7639

            format_name = "üì¶ –ü–µ—á–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è"

    

    await state.update_data(format=format_name, price=price)

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    from db import update_order_data

    await update_order_data(order_id, {'format': format_name, 'price': price})

    

    try:

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa

        description = format_payment_description("–ö–Ω–∏–≥–∞", format_name, order_id)

        payment_data = await create_payment(order_id, price, description, "–ö–Ω–∏–≥–∞")

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ state

        await state.update_data(

            payment_id=payment_data['payment_id'],

            payment_url=payment_data['confirmation_url']

        )

        

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å –∫–Ω–∏–≥—É", url=payment_data['confirmation_url'])],

            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],


        ])

        

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        order_data = await get_order_summary_data(order_id, state)

        order_summary = ""

        

        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏

        display_price = price

        if format_name == "üìÑ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞":

            try:
                display_price = await get_product_price_async("–ö–Ω–∏–≥–∞", "üìÑ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞")
            except:
                display_price = 1990

        

        await safe_edit_message(

            callback.message,

            f"{order_summary}\n"

            f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b>\n"

            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{format_name}</b>\n"

            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{display_price} ‚ÇΩ</b>\n\n"

            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ:",

            reply_markup=keyboard,

            parse_mode="HTML"

        )

        

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

        await update_order_status(order_id, "waiting_payment")

        

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ 24 –∏ 48 —á–∞—Å–æ–≤

        from db import create_payment_reminder_messages

        await create_payment_reminder_messages(order_id, callback.from_user.id)

        

    except Exception as e:

        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")

        await safe_edit_message(

            callback.message,

            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."

        )

    

    await log_state(callback.message, state)



# --- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π ---

async def auto_check_payments():
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
    """
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'pending' —Å—Ç–∞—Ä—à–µ 30 —Å–µ–∫—É–Ω–¥
            # –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∏ –ø–ª–∞—Ç–µ–∂–∏ —Å –æ—à–∏–±–∫–∞–º–∏
            async with aiosqlite.connect(DB_PATH) as db:
                async with db.execute('''
                    SELECT p.*, o.user_id, o.order_data 
                    FROM payments p
                    JOIN orders o ON p.order_id = o.id
                    WHERE p.status = 'pending' 
                    AND p.payment_id NOT LIKE 'test_payment_%'
                    AND p.status NOT IN ('invalid', 'expired', 'error')
                    AND datetime(p.created_at) < datetime('now', '-2 seconds')
                    AND datetime(p.created_at) > datetime('now', '-2 hours')
                ''') as cursor:
                    rows = await cursor.fetchall()
                    
                    for row in rows:
                        payment_id = row[2]  # payment_id
                        order_id = row[1]    # order_id
                        user_id = row[8]     # user_id
                        
                        logging.info(f"üîç AUTO-CHECK: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ÆKassa
                        try:
                            payment_status = await get_payment_status(payment_id)
                            
                            if payment_status and payment_status.get('status') == 'succeeded':
                                logging.info(f"üîÑ AUTO-CHECK: –ù–∞–π–¥–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂ {payment_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                                logging.info(f"üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê: –ü–ª–∞—Ç–µ–∂ {payment_id} –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
                                
                                # –ü–æ–ª—É—á–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
                                payment_data = await get_payment_by_payment_id(payment_id)
                                description = payment_data.get('description', '') if payment_data else ''
                                
                                # logging.info(f"üîÑ AUTO-CHECK: –û–ø–∏—Å–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞: '{description}'")
                                
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
                                webhook_data = {
                                    'event': 'payment.succeeded',
                                    'object': {
                                        'id': payment_id,
                                        'status': 'succeeded',
                                        'amount': {'value': payment_status.get('amount', 0)},
                                        'description': description
                                    }
                                }
                                
                                await process_payment_webhook(webhook_data)
                                
                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ –ë–î
                                await update_payment_status(payment_id, 'succeeded')
                                
                                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º outbox –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                                try:
                                    from db import get_pending_outbox_tasks, update_outbox_task_status
                                    user_tasks = await get_pending_outbox_tasks()
                                    if user_tasks:
                                        for task in user_tasks:
                                            if task.get('user_id') == user_id and task.get('order_id') == order_id:
                                                logging.info(f"üîÑ AUTO-CHECK: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É {task.get('id')} –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                                                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á–∏
                                except Exception as force_error:
                                    logging.error(f"‚ùå AUTO-CHECK: –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ outbox: {force_error}")
                                
                                # –£–¥–∞–ª–µ–Ω –∫–æ–¥ –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–∞ outbox
                                logging.info(f"‚úÖ AUTO-CHECK: –ü–ª–∞—Ç–µ–∂ {payment_id} –æ–±—Ä–∞–±–æ—Ç–∞–Ω, —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—è—Ç—Å—è —á–µ—Ä–µ–∑ outbox")
                            elif payment_status and payment_status.get('status') == 'canceled':
                                # –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
                                logging.info(f"üîÑ AUTO-CHECK: –ü–ª–∞—Ç–µ–∂ {payment_id} –æ—Ç–º–µ–Ω–µ–Ω")
                                await update_payment_status(payment_id, 'canceled')
                        except Exception as payment_error:
                            # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ - –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π
                            if 'not_found' in str(payment_error) or 'access denied' in str(payment_error) or 'Incorrect payment_id' in str(payment_error):
                                logging.warning(f"üîÑ AUTO-CHECK: –ü–ª–∞—Ç–µ–∂ {payment_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π")
                                await update_payment_status(payment_id, 'invalid')
                                
                                # –¢–∞–∫–∂–µ –ø–æ–º–µ—á–∞–µ–º –∑–∞–∫–∞–∑ –∫–∞–∫ –∏–º–µ—é—â–∏–π –ø—Ä–æ–±–ª–µ–º—É —Å –ø–ª–∞—Ç–µ–∂–æ–º
                                try:
                                    from db import update_order_status
                                    await update_order_status(order_id, "payment_error")
                                except:
                                    pass
                            else:
                                logging.error(f"üîÑ AUTO-CHECK: –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ {payment_id}: {payment_error}")
                            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
        try:
            async with aiosqlite.connect(DB_PATH) as db:
                # –ü–æ–º–µ—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–µ
                await db.execute('''
                    UPDATE payments 
                    SET status = 'expired' 
                    WHERE status = 'invalid' 
                    AND datetime(created_at) < datetime('now', '-24 hours')
                ''')
                
                # –£–¥–∞–ª–µ–Ω –∫–æ–¥ –ø–æ–º–µ—á–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π 3069* –∫–∞–∫ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ - —Ç–µ–ø–µ—Ä—å –æ–Ω–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
                
                await db.commit()
        except Exception as cleanup_error:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {cleanup_error}")
        
        # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await asyncio.sleep(2)

# --- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ (—ç–º—É–ª—è—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /remind) ---

@dp.message(StateFilter(lambda c: c.text == "/remind"))

async def remind_payment(message: types.Message, state: FSMContext):

    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ ‚Äî –∑–∞–ø—É—Å–∫–∞—Ç—å —á–µ—Ä–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫/cron

    await message.answer(

        "–í–æ–∑–º–æ–∂–Ω–æ, —Ü–µ–Ω–∞ –≤–∞—Å —Å–º—É—Ç–∏–ª–∞? –ú—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º."

    )

    await asyncio.sleep(1)  # 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    await message.answer(

        "–ì–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–∏–≥—É –ø—Ä–æ—â–µ, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ –∏—Å–∫—Ä–µ–Ω–Ω–µ–π. –î–∞–π—Ç–µ –∑–Ω–∞—Ç—å, –µ—Å–ª–∏ –≤–∞–º —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ."

    )

    await log_state(message, state)



# –ì–ª–∞–≤–∞ 11. –ö–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è —Å—é–∂–µ—Ç–æ–≤ - –£–î–ê–õ–ï–ù–ê (–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)

# –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ-—Å—Ç—Ä–∞–Ω–∏—Ü —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü

async def show_simplified_page_selection(message, state):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü (–≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã + –≤–∫–ª–∞–¥—ã—à–∏ –æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º)"""

    data = await state.get_data()

    order_id = data.get('order_id')

    

    selection_text = (

        f"üìñ <b>–í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏</b>\n\n"

        f"–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –≤—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≤–∫–ª–∞–¥—ã—à–∏.\n"

        f"–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º <b>24 —Å—Ç—Ä–∞–Ω–∏—Ü—ã</b> –¥–ª—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏.\n\n"

        f"–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã."

    )

    

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="üìñ –ù–∞—á–∞—Ç—å –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü", callback_data="start_page_selection")],

    ])

    

    await message.answer(selection_text, reply_markup=keyboard, parse_mode="HTML")

    await state.set_state(BookFinalStates.choosing_pages)



# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞—Ä—Ç–∏—è–º–∏ —Å—é–∂–µ—Ç–æ–≤ - –£–î–ê–õ–ï–ù–´ (–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü

@dp.callback_query(F.data == "start_page_selection")

async def start_page_selection_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü

    await show_simplified_page_selection(callback.message, state)

    

    await log_state(callback.message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü

@dp.message(StateFilter(BookFinalStates.choosing_pages), F.text)

async def handle_text_in_story_options(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü"""

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ choosing_pages: '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

    await save_user_message_to_history(message, state, "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü: ")

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É

    current_state = await state.get_state()

    if current_state and current_state != "BookFinalStates:choosing_pages":

        await message.answer("‚ùå –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.")

        return

    

    text = message.text.strip().lower()

    

    if text == "–¥–∞–ª–µ–µ":

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–π—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –æ–±–ª–æ–∂–∫–∏

        data = await state.get_data()

        order_id = data.get('order_id')

        selected_pages = data.get(f"selected_pages_{order_id}", [])

        

        if len(selected_pages) == 24:

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

            order_id = data.get('order_id')

            if order_id:

                await save_selected_pages(order_id, selected_pages)

                print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {selected_pages}")

            

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏

            await show_first_last_page_selection(message, state)

        elif len(selected_pages) < 24:

            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–≤–Ω–æ 24 —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∑–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ '–î–∞–ª–µ–µ'.")

        else:

            await message.answer("‚ùå –í—ã–±—Ä–∞–Ω–æ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–≤–Ω–æ 24 —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")

    else:

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

        data = await state.get_data()

        order_id = data.get('order_id')

        

        if order_id:

            # –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ save_user_message_to_history –≤—ã—à–µ

            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞

            from db import create_or_update_order_notification

            await create_or_update_order_notification(order_id)

            print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —á–µ—Ä–µ–∑ save_user_message_to_history")

            print(f"üîî –û–¢–õ–ê–î–ö–ê: –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

            

            # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - —ç—Ç–æ –¥–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º

            # –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∑–∞–∫–∞–∑–∞

        else:

            # –ï—Å–ª–∏ –Ω–µ—Ç order_id, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É

            await message.answer("‚ÑπÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ '–î–∞–ª–µ–µ' –∫–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ —Ä–æ–≤–Ω–æ 24 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

    

    await log_state(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—é–∂–µ—Ç–æ–≤
@dp.message(StateFilter(ManagerContentStates.waiting_story_options), F.text)
async def handle_text_while_waiting_stories(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—é–∂–µ—Ç–æ–≤"""
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ManagerContentStates.waiting_story_options: '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    await save_user_message_to_history(message, state, "–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å—é–∂–µ—Ç–æ–≤: ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    current_state = await state.get_state()
    
    if current_state and current_state != "ManagerContentStates:waiting_story_options":
        await message.answer("‚ùå –û–∂–∏–¥–∞–Ω–∏–µ —Å—é–∂–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.")
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    await log_state(message, state)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

async def show_first_last_page_selection(message, state):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏"""

    design_text = (

        "–î–∞–≤–∞–π —Ä–µ—à–∏–º –∫–∞–∫–∏–º–∏ –±—É–¥—É—Ç –ø–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–≤–æ–µ–π –∫–Ω–∏–≥–∏:\n\n"

        "üìù <b>–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç</b> - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º.\n"

        "üì∏ <b>–¢–µ–∫—Å—Ç + —Ñ–æ—Ç–æ</b> - —Ç—ã —Å–º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∫ —Ç–µ–∫—Å—Ç—É."

    )

    

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="üìù –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", callback_data="first_last_text_only")],

        [InlineKeyboardButton(text="üì∏ –¢–µ–∫—Å—Ç + —Ñ–æ—Ç–æ", callback_data="first_last_text_photo")],

    ])

    

    await message.answer(design_text, reply_markup=keyboard, parse_mode="HTML")

    await state.set_state(BookFinalStates.choosing_first_last_design)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
@dp.message(StateFilter(BookFinalStates.choosing_first_last_design), F.text)
async def handle_text_while_choosing_first_last_design(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ BookFinalStates.choosing_first_last_design: '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    await save_user_message_to_history(message, state, "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    current_state = await state.get_state()
    
    if current_state and current_state != "BookFinalStates:choosing_first_last_design":
        await message.answer("‚ùå –í—ã–±–æ—Ä –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.")
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    await log_state(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

@dp.callback_query(F.data.in_(["first_last_text_only", "first_last_text_photo"]))

async def handle_first_last_page_choice(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    if callback.data == "first_last_text_only":

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        await state.update_data(first_last_design="text_only")

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        data = await state.get_data()

        order_id = data.get('order_id')

        await update_order_field(order_id, 'first_last_design', 'text_only')

        await callback.message.edit_text(

            "üìù <b>–û—Ç–ª–∏—á–Ω–æ!</b> –ü–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏ –±—É–¥—É—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–º.\n\n"

            "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏</b>.\n"

            "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ—Å–≤—è—â–µ–Ω–∏–µ, –Ω–∞—á–∞–ª–æ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–ø–ª—ã–µ —Å–ª–æ–≤–∞ –æ—Ç —Å–µ—Ä–¥—Ü–∞ üíï",

            parse_mode="HTML"

        )

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        await state.set_state(BookFinalStates.entering_first_page_text)

        

    elif callback.data == "first_last_text_photo":

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–µ–∫—Å—Ç + —Ñ–æ—Ç–æ –¥–ª—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        await state.update_data(first_last_design="text_photo")

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        data = await state.get_data()

        order_id = data.get('order_id')

        await update_order_field(order_id, 'first_last_design', 'text_photo')

        

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ—à–∞–≥–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ - —Å–Ω–∞—á–∞–ª–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        await state.set_state(BookFinalStates.uploading_first_page_photo)

        await callback.message.edit_text(

            "üì∏ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –¢–µ–ø–µ—Ä—å –º—ã –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—à–∞–≥–æ–≤–æ.\n\n"

            "üì∑ <b>–®–∞–≥ 1:</b> –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è <b>–ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</b> –∫–Ω–∏–≥–∏:",

            parse_mode="HTML"

        )

    

    await log_state(callback.message, state)



# === –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–û–®–ê–ì–û–í–û–ô –ó–ê–ì–†–£–ó–ö–ò ===



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

@dp.message(StateFilter(BookFinalStates.uploading_first_page_photo), F.photo)

async def handle_first_page_photo_upload(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏"""

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    

    data = await state.get_data()

    order_id = data.get('order_id')

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é

    file_id = message.photo[-1].file_id

    filename = f"first_page_photo_{order_id}.jpg"

    

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∫ {filename}")

    

    await download_and_save_photo(message.bot, file_id, "uploads", filename)

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    await add_upload(order_id, filename, "first_page_photo")

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state

    await state.update_data(first_page_photo=filename)

    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    await state.set_state(BookFinalStates.entering_first_page_text_after_photo)

    await message.answer(

        "‚úÖ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"

        "üìù <b>–®–∞–≥ 2:</b> –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è <b>–ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</b> –∫–Ω–∏–≥–∏. "

        "–≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ—Å–≤—è—â–µ–Ω–∏–µ, –Ω–∞—á–∞–ª–æ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Ç–µ–ø–ª—ã–µ —Å–ª–æ–≤–∞ –æ—Ç —Å–µ—Ä–¥—Ü–∞ üíï",

        parse_mode="HTML"

    )

    

    await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

@dp.message(StateFilter(BookFinalStates.uploading_first_page_photo), F.text)

async def handle_first_page_photo_text(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    await save_user_message_to_history(message, state, "–¢–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ")

    await message.answer(

        "‚ö†Ô∏è <b>–û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!</b>\n\n"

        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏.",

        parse_mode="HTML"

    )



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ

@dp.message(StateFilter(BookFinalStates.entering_first_page_text_after_photo), F.text)

async def handle_first_page_text_after_photo(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: '{message.text}'")

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

    await save_user_message_to_history(message, state, "–¢–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ")

    

    data = await state.get_data()

    order_id = data.get('order_id')

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    await state.update_data(first_page_text=message.text)

    await update_order_field(order_id, 'first_page_text', message.text)

    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    await state.set_state(BookFinalStates.uploading_last_page_photo)

    await message.answer(

        "‚úÖ <b>–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"

        "üì∑ <b>–®–∞–≥ 3:</b> –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è <b>–ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</b> –∫–Ω–∏–≥–∏:",

        parse_mode="HTML"

    )

    

    await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

@dp.message(StateFilter(BookFinalStates.entering_first_page_text_after_photo), F.photo)

async def handle_first_page_text_photo(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""

    await message.answer(

        "‚ö†Ô∏è <b>–û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç!</b>\n\n"

        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏.",

        parse_mode="HTML"

    )



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

@dp.message(StateFilter(BookFinalStates.uploading_last_page_photo), F.photo)

async def handle_last_page_photo_upload(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏"""

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    

    data = await state.get_data()

    order_id = data.get('order_id')

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é

    file_id = message.photo[-1].file_id

    filename = f"last_page_photo_{order_id}.jpg"

    

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∫ {filename}")

    

    await download_and_save_photo(message.bot, file_id, "uploads", filename)

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    await add_upload(order_id, filename, "last_page_photo")

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ state

    await state.update_data(last_page_photo=filename)

    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    await state.set_state(BookFinalStates.entering_last_page_text_after_photo)

    await message.answer(

        "‚úÖ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"

        "üìù <b>–®–∞–≥ 4:</b> –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª—è <b>–ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã</b> –∫–Ω–∏–≥–∏. "

        "–≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –Ω–∞ –±—É–¥—É—â–µ–µ, –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –≤ —Å–µ—Ä–¥—Ü–µ –Ω–∞–≤—Å–µ–≥–¥–∞ üíï",

        parse_mode="HTML"

    )

    

    await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

@dp.message(StateFilter(BookFinalStates.uploading_last_page_photo), F.text)

async def handle_last_page_photo_text(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    await save_user_message_to_history(message, state, "–¢–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ")

    await message.answer(

        "‚ö†Ô∏è <b>–û–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!</b>\n\n"

        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏.",

        parse_mode="HTML"

    )



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ —Ñ–æ—Ç–æ

@dp.message(StateFilter(BookFinalStates.entering_last_page_text_after_photo), F.text)

async def handle_last_page_text_after_photo(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ"""

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: '{message.text}'")

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

    await save_user_message_to_history(message, state, "–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ")

    

    data = await state.get_data()

    order_id = data.get('order_id')

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    await state.update_data(last_page_text=message.text)

    await update_order_field(order_id, 'last_page_text', message.text)

    

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –æ–±–ª–æ–∂–µ–∫

    await message.answer(

        "‚úÖ <b>–¢–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"

        "üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b> –ü–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≥–æ—Ç–æ–≤—ã! –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –æ–±–ª–æ–∂–∫–∏.",

        parse_mode="HTML"

    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –æ–±–ª–æ–∂–µ–∫

    await show_cover_library(message, state)

    

    await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

@dp.message(StateFilter(BookFinalStates.entering_last_page_text_after_photo), F.photo)

async def handle_last_page_text_photo(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""

    await message.answer(

        "‚ö†Ô∏è <b>–û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç!</b>\n\n"

        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏.",

        parse_mode="HTML"

    )



# === –°–¢–ê–†–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏) ===



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

@dp.message(StateFilter(BookFinalStates.uploading_first_last_photos), F.photo)

async def handle_first_last_photo_upload(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏"""

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–π/–ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    

    data = await state.get_data()

    order_id = data.get('order_id')

    first_last_photos = data.get('first_last_photos', [])

    

    print(f"üîç –û–¢–õ–ê–î–ö–ê: order_id={order_id}, —Ç–µ–∫—É—â–∏—Ö —Ñ–æ—Ç–æ={len(first_last_photos)}")

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é

    file_id = message.photo[-1].file_id

    filename = f"first_last_photo_{len(first_last_photos) + 1}_{order_id}.jpg"

    

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∫–∞–∫ {filename}")

    

    await download_and_save_photo(message.bot, file_id, "uploads", filename)

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    photo_type = "first_page_photo" if len(first_last_photos) == 0 else "last_page_photo"

    await add_upload(order_id, filename, photo_type)

    

    # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫

    first_last_photos.append(filename)

    await state.update_data(first_last_photos=first_last_photos)

    

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –≤—Å–µ–≥–æ —Ñ–æ—Ç–æ={len(first_last_photos)}")

    

    if len(first_last_photos) == 1:

        await message.answer("‚úÖ <b>–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏</b> —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–≤—Ç–æ—Ä—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏</b>.", parse_mode="HTML")

    elif len(first_last_photos) == 2:

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É

        await finish_page_selection(message, state)

    

    await log_state(message, state)



@dp.message(StateFilter(BookFinalStates.uploading_first_last_photos), F.text)

async def handle_first_last_photos_text(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥–ª—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ uploading_first_last_photos: '{message.text}'")

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

    await save_user_message_to_history(message, state, "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: ")

    

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ

    await message.answer("‚ÑπÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏.")

    

    await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

@dp.message(StateFilter(BookFinalStates.entering_first_page_text))

async def handle_first_page_text(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏"""

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: '{message.text}'")

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

    await save_user_message_to_history(message, state, "–¢–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ")

    

    data = await state.get_data()

    order_id = data.get('order_id')

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    await state.update_data(first_page_text=message.text)

    await update_order_field(order_id, 'first_page_text', message.text)

    

    await message.answer(

        "‚úÖ <b>–¢–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"

        "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ <b>—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ, –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∏–ª–∏ —ç–ø–∏–ª–æ–≥):",

        parse_mode="HTML"

    )

    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    await state.set_state(BookFinalStates.entering_last_page_text)

    

    await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

@dp.message(StateFilter(BookFinalStates.entering_last_page_text))

async def handle_last_page_text(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏"""

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: '{message.text}'")

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

    await save_user_message_to_history(message, state, "–¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ")

    

    data = await state.get_data()

    order_id = data.get('order_id')

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

    await state.update_data(last_page_text=message.text)

    await update_order_field(order_id, 'last_page_text', message.text)

    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è)

    await finish_page_selection(message, state)

    

    await log_state(message, state)



# –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü

async def finish_page_selection(message, state):

    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É"""

    data = await state.get_data()

    order_id = data.get('order_id')

    

    # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞

    await state.update_data({f"page_selection_finished_{order_id}": True})

    

    await message.answer(

        "üéâ <b>–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"

        "‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: –≤—ã–±—Ä–∞–Ω—ã\n"

        "‚úÖ –ü–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã\n\n"

        "üé® <b>–¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ–π–¥–µ–º –∫ –≤—ã–±–æ—Ä—É –æ–±–ª–æ–∂–∫–∏ –¥–ª—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏!</b>",

        parse_mode="HTML"

    )

    

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

    await update_order_status(order_id, "pages_selected")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ "pages_selected"
    from db import create_or_update_user_timer
    user_id = message.from_user.id
    await create_or_update_user_timer(user_id, order_id, "pages_selected", "–ö–Ω–∏–≥–∞")
    logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ pages_selected, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∑–∞–∫–∞–∑ {order_id}")

    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –æ–±–ª–æ–∂–∫–∏

    await show_cover_library(message, state)

    

    await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

@dp.message(StateFilter(BookFinalStates.uploading_first_last_photos))

async def handle_any_message_in_first_last_photos(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ uploading_first_last_photos: —Ç–∏–ø={message.content_type}, —Ç–µ–∫—Å—Ç='{message.text if message.text else '–ù–ï–¢ –¢–ï–ö–°–¢–ê'}'")

    

    if message.content_type == "photo":

        print(f"üîç –û–¢–õ–ê–î–ö–ê: –≠—Ç–æ —Ñ–æ—Ç–æ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")

        # –§–æ—Ç–æ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Å–Ω–æ–≤–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º

    elif message.content_type == "text":

        print(f"üîç –û–¢–õ–ê–î–ö–ê: –≠—Ç–æ —Ç–µ–∫—Å—Ç, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...")

        # –¢–µ–∫—Å—Ç –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –æ—Å–Ω–æ–≤–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º

    else:

        await message.answer("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")

    

    await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü

@dp.message(StateFilter(BookFinalStates.choosing_pages))

async def handle_any_message_in_story_options(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç—Ä–∞–Ω–∏—Ü"""

    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ choosing_pages: —Ç–∏–ø={message.content_type}, —Ç–µ–∫—Å—Ç='{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É

    current_state = await state.get_state()

    if current_state and current_state != "BookFinalStates:choosing_pages":

        await message.answer("‚ùå –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.")

        return

    

    if not message.text:

        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ç.–¥.), —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

        data = await state.get_data()

        order_id = data.get('order_id')

        

        if order_id:

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

            from db import add_message_history

            content_type = message.content_type or "unknown"

            await add_message_history(order_id, "user", f"[{content_type.upper()}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            

            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞

            from db import create_or_update_order_notification

            await create_or_update_order_notification(order_id)

            print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞ {order_id}: {content_type}")

            print(f"üîî –û–¢–õ–ê–î–ö–ê: –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

            

            # –ù–µ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - —ç—Ç–æ –¥–∏–∞–ª–æ–≥ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º

        else:

            # –ï—Å–ª–∏ –Ω–µ—Ç order_id, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É

            await message.answer("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ '–î–∞–ª–µ–µ' –∫–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ —Ä–æ–≤–Ω–æ 24 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")

    await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

@dp.message(StateFilter(ManagerContentStates.waiting_demo_content))

async def receive_demo_content(message: types.Message, state: FSMContext):

    # –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç (—Ä—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞)

    data = await state.get_data()

    order_id = data.get('order_id')

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç

    await state.update_data(demo_content=message.text)

    await update_order_status(order_id, "demo_sent")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
    from db import get_order
    order = await get_order(order_id)
    if not order:
        logging.error(f"‚ùå –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_id = order.get('user_id')
    if not user_id:
        logging.error(f"‚ùå user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–∫–∞–∑–µ {order_id}")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞
    order_data = order.get('order_data')
    if isinstance(order_data, str):
        import json
        order_data = json.loads(order_data)
    product_type = order_data.get('product', '–ö–Ω–∏–≥–∞')
    
    # –¢–∞–π–º–µ—Ä —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ update_order_status –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ demo_sent

    

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É", callback_data="continue_after_demo")]

    ])

    

    await message.answer("–ü—Ä–æ–±–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∞—à–µ–π –∫–Ω–∏–≥–∏ –≥–æ—Ç–æ–≤—ã ‚òëÔ∏è\n"

                        "–ú—ã —Å—Ç–∞—Ä–∞–ª–∏—Å—å, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ —Ç—ë–ø–ª—ã–º–∏ –∏ –∂–∏–≤—ã–º–∏.\n\n"

                        "–ù–æ –≤–ø–µ—Ä–µ–¥–∏ –µ—â—ë –±–æ–ª—å—à–µ ‚Äî –∏–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä –≤–¥–æ—Ö–Ω–æ–≤–∏–ª—Å—è –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π –∏ —Å–æ–±—Ä–∞–ª –¥–µ—Å—è—Ç–∫–∏ —Å—é–∂–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫–Ω–∏–≥–∏.")

    await message.answer(message.text)

    await message.answer("–ö–∞–∫ –≤–∞–º —Ç–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã? –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=keyboard)

    

    # –¢—Ä–µ–∫–∏–Ω–≥: –¥–µ–º–æ –∫–Ω–∏–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await track_event(
        user_id=user_id,
        event_type='demo_abandoned_book',
        event_data={
            'order_id': order_id,
            'product': product_type,
            'demo_sent_at': datetime.now().isoformat()
        },
        step_name='demo_sent_book',
        product_type=product_type,
        order_id=order_id
    )

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Å—é–∂–µ—Ç–æ–≤

    await state.set_state(ManagerContentStates.waiting_story_options)

    await log_state(message, state)



# –ì–ª–∞–≤–∞ 11. –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—é–∂–µ—Ç–æ–≤ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - –£–î–ê–õ–ï–ù–´ (–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)



# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ (–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—é–∂–µ—Ç–æ–≤ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - –£–î–ê–õ–ï–ù (–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ-—Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è)



@dp.message(StateFilter(ManagerContentStates.waiting_draft))

async def receive_book_draft(message: types.Message, state: FSMContext):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∞ –Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ

    data = await state.get_data()

    order_id = data.get('order_id')

    

    if order_id:

        order = await get_order(order_id)

        if order and order.get('user_id') == message.from_user.id:

            # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            try:

                from db import add_message_history

                await add_message_history(order_id, "user", message.text)

                logging.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞ {order_id}: {message.text[:50]}...")

            except Exception as e:

                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")

            

            logging.info(f"üìñ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ ManagerContentStates.waiting_draft")

            return

    

    # –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –∫–Ω–∏–≥–∏

    await state.update_data(book_draft=message.text)

    await update_order_status((await state.get_data()).get('order_id'), "draft_sent")

    

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    await message.answer("–í–æ—Ç –æ–Ω–∏ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–≤–æ–µ–π –∫–Ω–∏–≥–∏ üìñ\n"

                        "–ú—ã –≤–ª–æ–∂–∏–ª–∏ –≤ –Ω–∏—Ö –º–Ω–æ–≥–æ —Ç–µ–ø–ª–∞ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ–º –Ω–µ –º–µ–Ω—å—à–µ —Ç–µ–±—è. –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω–∏ —Ç—Ä–æ–Ω—É—Ç —Ç–≤–æ—ë —Å–µ—Ä–¥—Ü–µ üíï\n\n"

                        "–ï—Å–ª–∏ —Ç–µ–±–µ –≤—Å—ë –Ω—Ä–∞–≤–∏—Ç—Å—è ‚Äî –∂–º–∏ \"–í—Å—ë —Å—É–ø–µ—Ä\".\n"

                        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ ‚Äî –Ω–∞–∂–º–∏ \"–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏\".")

    await message.answer(message.text)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫

    

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="–í—Å—ë —Å—É–ø–µ—Ä", callback_data="edit_done")],

        [InlineKeyboardButton(text="–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏", callback_data="edit_change")]

    ])

    await message.answer(

        "–ï—Å–ª–∏ –≤–∞—Å –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'. "

        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å' –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.",

        reply_markup=keyboard

    )

    await state.set_state(EditBookStates.reviewing_draft)

    await log_state(message, state)



# –ì–ª–∞–≤–∞ 15. –ü–µ—Ä–µ–¥–∞—á–∞ –∫–Ω–∏–≥–∏ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è

@dp.message(StateFilter(ManagerContentStates.waiting_final))

async def receive_final_book(message: types.Message, state: FSMContext):

    # –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–Ω–∏–≥–∏

    data = await state.get_data()

    order_id = data.get('order_id')

    format_name = data.get('format', '–ö–Ω–∏–≥–∞')

    

    logging.info(f"üìö –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–Ω–∏–≥–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

    await update_order_status(order_id, "ready")

    logging.info(f"üìö –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'ready'")

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∫–Ω–∏–≥–∏ (PDF, —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ)

    if message.document:

        # –ï—Å–ª–∏ —ç—Ç–æ PDF —Ñ–∞–π–ª

        await message.answer_document(

            message.document.file_id, 

            caption="üìÑ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–Ω–∏–≥–∏ (PDF)"

        )

    elif message.photo:

        # –ï—Å–ª–∏ —ç—Ç–æ –≥–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        await message.answer_photo(

            message.photo[-1].file_id, 

            caption="üìñ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–Ω–∏–≥–∏"

        )

    elif message.video:

        # –ï—Å–ª–∏ —ç—Ç–æ –≤–∏–¥–µ–æ

        logging.info(f"üé¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫–Ω–∏–≥–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

        await message.answer_video(

            message.video.file_id, 

            caption="üé¨ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–Ω–∏–≥–∏"

        )

        logging.info(f"‚úÖ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏")

    else:

        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º

        await message.answer(message.text)

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –º–µ–¥–∏–∞

    await message.answer(

        "–í–æ—Ç –æ–Ω–∏ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–≤–æ–µ–π –∫–Ω–∏–≥–∏ üìñ\n"

        "–ú—ã –≤–ª–æ–∂–∏–ª–∏ –≤ –Ω–∏—Ö –º–Ω–æ–≥–æ —Ç–µ–ø–ª–∞ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ–º –Ω–µ –º–µ–Ω—å—à–µ —Ç–µ–±—è. –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω–∏ —Ç—Ä–æ–Ω—É—Ç —Ç–≤–æ—ë —Å–µ—Ä–¥—Ü–µ üíï\n\n"

        "–ï—Å–ª–∏ —Ç–µ–±–µ –≤—Å—ë –Ω—Ä–∞–≤–∏—Ç—Å—è ‚Äî –∂–º–∏ \"–í—Å—ë —Å—É–ø–µ—Ä\".\n"

        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ ‚Äî –Ω–∞–∂–º–∏ \"–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏\"."

    )

    

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="–í—Å—ë —Å—É–ø–µ—Ä", callback_data="edit_done")],

        [InlineKeyboardButton(text="–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏", callback_data="edit_change")]

    ])

    

    await message.answer(

        "–ï—Å–ª–∏ –≤–∞—Å –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ'. "

        "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ '–ò–∑–º–µ–Ω–∏—Ç—å' –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏.",

        reply_markup=keyboard

    )

    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await state.set_state(EditBookStates.reviewing_draft)

    

    logging.info(f"üìö –§—É–Ω–∫—Ü–∏—è receive_final_book –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

    await log_state(message, state)



# –ì–ª–∞–≤–∞ 13. –í—ã–±–æ—Ä –æ–±–ª–æ–∂–∫–∏ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è

@dp.callback_query(F.data == "additions_next")

async def additions_next_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    data = await state.get_data()

    inserts = data.get("inserts", [])

    custom_photos = data.get("custom_photos", [])

    insert_texts = data.get("insert_texts", {})

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    order_id = data.get('order_id')

    if order_id:

        order_data = {

            "inserts": inserts,

            "insert_texts": insert_texts,

            "custom_photos": custom_photos,

            "additions_completed": True,

            "additions_completed_date": datetime.now().isoformat()

        }

        await update_order_data(order_id, order_data)

    

    additions_text = []

    if inserts:

        additions_text.append(f"–í–∫–ª–∞–¥—ã—à–∏: {', '.join(inserts)}")

    if custom_photos:

        additions_text.append(f"–°–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: {len(custom_photos)} —à—Ç.")

    

    additions_summary = '; '.join(additions_text) if additions_text else '–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π'

    

    await callback.message.edit_text(

        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! {additions_summary}\n\n"

        f"üé® <b>–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–æ–∂–∫—É –¥–ª—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏</b>\n\n"

        f"–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–±–ª–æ–∂–µ–∫ –≤ —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö. "

        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç—É, –∫–æ—Ç–æ—Ä–∞—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –≤–∞—à–µ–º—É –ø–æ–¥–∞—Ä–∫—É.",

        parse_mode="HTML"

    )

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –≤—ã–±–æ—Ä—É –æ–±–ª–æ–∂–∫–∏

    order_id = data.get('order_id')

    await add_outbox_task(

        order_id=order_id,

        user_id=callback.from_user.id,

        type_="manager_notification",

        content=f"–ó–∞–∫–∞–∑ #{order_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∫ –≤—ã–±–æ—Ä—É –æ–±–ª–æ–∂–∫–∏. –î–æ–ø–æ–ª–Ω–µ–Ω–∏—è: {additions_summary}"

    )

    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–ª–æ–∂–µ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

    await state.set_state(BookFinalStates.waiting_for_cover_options)

    await log_state(callback.message, state)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –æ–±–ª–æ–∂–µ–∫

async def show_cover_library(message, state):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫—É –æ–±–ª–æ–∂–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""

    try:

        # –ü–æ–ª—É—á–∞–µ–º –æ–±–ª–æ–∂–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        from db import get_cover_templates

        cover_templates = await get_cover_templates()

        

        if not cover_templates:

            # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±–ª–æ–∂–µ–∫ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ

            await message.answer(

                "üé® <b>–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –æ–±–ª–æ–∂–µ–∫</b>\n\n"

                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –æ–±–ª–æ–∂–µ–∫ –ø—É—Å—Ç–∞. "

                "–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–ª–æ–∂–µ–∫ –¥–ª—è –≤–∞—Å.",

                parse_mode="HTML"

            )

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–ª–æ–∂–µ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

            await state.set_state(BookFinalStates.waiting_for_cover_options)

            return

        

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–ª–æ–∂–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        await message.answer(

            "üìö –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –æ–±–ª–æ–∂–∫—É –¥–ª—è —Å–≤–æ–µ–π –∫–Ω–∏–≥–∏.\n"
            "–ú—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö —Ü–≤–µ—Ç–∞—Ö, —á—Ç–æ–±—ã –æ–±–ª–æ–∂–∫–∞ –≥–∞—Ä–º–æ–Ω–∏—á–Ω–æ –¥–æ–ø–æ–ª–Ω–∏–ª–∞ —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ üòç",

            parse_mode="HTML"

        )

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –æ–±–ª–æ–∂–∫—É —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã–±–æ—Ä–∞

        cover_message_ids = []

        for i, template in enumerate(cover_templates, 1):

            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±–ª–æ–∂–∫–∏

            keyboard = InlineKeyboardMarkup(inline_keyboard=[

                [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —ç—Ç—É –æ–±–ª–æ–∂–∫—É", callback_data=f"choose_cover_template_{template['id']}")]

            ])

            

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π

            caption = f"üìñ <b>{template['name']}</b>\n\n"

            if template.get('category'):

                caption += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template['category']}\n"

            caption += f"–û–±–ª–æ–∂–∫–∞ #{i} –∏–∑ {len(cover_templates)}"

            

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –æ–±–ª–æ–∂–∫–∏

            photo_path = f"covers/{template['filename']}"

            try:

                sent_message = await message.answer_photo(

                    photo=types.FSInputFile(photo_path),

                    caption=caption,

                    reply_markup=keyboard,

                    parse_mode="HTML"

                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –æ–±–ª–æ–∂–∫–∏

                cover_message_ids.append(sent_message.message_id)

            except Exception as e:

                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–ª–æ–∂–∫–∏ {template['filename']}: {e}")

                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ

                sent_message = await message.answer(

                    f"üìñ <b>{template['name']}</b>\n"

                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"

                    f"–û–±–ª–æ–∂–∫–∞ #{i} –∏–∑ {len(cover_templates)}",

                    reply_markup=keyboard,

                    parse_mode="HTML"

                )

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –æ–±–ª–æ–∂–∫–∏

                cover_message_ids.append(sent_message.message_id)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –æ–±–ª–æ–∂–µ–∫ –≤ state

        await state.update_data(cover_message_ids=cover_message_ids)

        

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –æ–±–ª–æ–∂–∫–∏

        await state.set_state(CoverStates.choosing_cover)

        

    except Exception as e:

        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –æ–±–ª–æ–∂–µ–∫: {e}")

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –æ–±–ª–æ–∂–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–ª–æ–∂–µ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

        await state.set_state(BookFinalStates.waiting_for_cover_options)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–ª–æ–∂–µ–∫ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

@dp.message(StateFilter(BookFinalStates.waiting_for_cover_options))

async def receive_covers_from_manager(message: types.Message, state: FSMContext):

    data = await state.get_data()

    order_id = data.get('order_id')

    

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –æ–±–ª–æ–∂–∫–∞–º–∏

    if message.media_group_id:

        # –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

        media_group = data.get('cover_media_group', {})

        media_group[message.media_group_id] = media_group.get(message.media_group_id, [])

        

        if message.photo:

            media_group[message.media_group_id].append({

                'type': 'photo',

                'file_id': message.photo[-1].file_id,

                'caption': message.caption or f"–û–±–ª–æ–∂–∫–∞ {len(media_group[message.media_group_id]) + 1}"

            })

        elif message.document:

            media_group[message.media_group_id].append({

                'type': 'document',

                'file_id': message.document.file_id,

                'caption': message.caption or f"–û–±–ª–æ–∂–∫–∞ {len(media_group[message.media_group_id]) + 1}"

            })

        

        await state.update_data(cover_media_group=media_group)

        

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        if len(media_group[message.media_group_id]) == 1:

            await message.answer("üé® <b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–ª–æ–∂–µ–∫ –¥–ª—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏:</b>", parse_mode="HTML")

    

    elif message.photo or message.document:

        # –û–¥–∏–Ω–æ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        if message.photo:

            file_id = message.photo[-1].file_id

            caption = message.caption or "–í–∞—Ä–∏–∞–Ω—Ç –æ–±–ª–æ–∂–∫–∏"

        else:

            file_id = message.document.file_id

            caption = message.caption or "–í–∞—Ä–∏–∞–Ω—Ç –æ–±–ª–æ–∂–∫–∏"

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–ª–æ–∂–∫–µ

        covers = data.get('cover_options', [])

        covers.append({

            'file_id': file_id,

            'caption': caption,

            'type': 'photo' if message.photo else 'document'

        })

        await state.update_data(cover_options=covers)

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã–±–æ—Ä–∞

        if len(covers) == 1:

            await message.answer("üé® <b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–ª–æ–∂–µ–∫ –¥–ª—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏:</b>", parse_mode="HTML")

        

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —ç—Ç–æ–π –æ–±–ª–æ–∂–∫–∏

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —ç—Ç—É –æ–±–ª–æ–∂–∫—É", callback_data=f"choose_cover_{len(covers)}")]

        ])

        

        if message.photo:

            sent_message = await message.answer_photo(file_id, caption=caption, reply_markup=keyboard)

        else:

            sent_message = await message.answer_document(file_id, caption=caption, reply_markup=keyboard)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –æ–±–ª–æ–∂–∫–∏ –≤ state

        data = await state.get_data()

        cover_message_ids = data.get('cover_message_ids', [])

        cover_message_ids.append(sent_message.message_id)

        await state.update_data(cover_message_ids=cover_message_ids)

    

    elif message.text:

        # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)

        await state.update_data(cover_options_text=message.text)

        await update_order_status(order_id, "covers_sent")

        

        await message.answer("üé® <b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–ª–æ–∂–µ–∫ –¥–ª—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏:</b>", parse_mode="HTML")

        await message.answer(message.text)

    

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –æ–±–ª–æ–∂–∫–∞, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É

    covers = data.get('cover_options', [])

    if len(covers) >= 1:

        await state.set_state(CoverStates.choosing_cover)

    

    await log_state(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–±–ª–æ–∂–µ–∫
@dp.message(StateFilter(BookFinalStates.waiting_for_cover_options), F.text)
async def handle_text_while_waiting_covers(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–±–ª–æ–∂–µ–∫"""
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ BookFinalStates.waiting_for_cover_options: '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    await save_user_message_to_history(message, state, "–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–±–ª–æ–∂–µ–∫: ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    current_state = await state.get_state()
    
    if current_state and current_state != "BookFinalStates:waiting_for_cover_options":
        await message.answer("‚ùå –û–∂–∏–¥–∞–Ω–∏–µ –æ–±–ª–æ–∂–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.")
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    await log_state(message, state)


@dp.callback_query(F.data.startswith("choose_cover_"))

async def choose_cover_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ –æ–±–ª–æ–∂–∫–∞

    data = await state.get_data()

    if data.get('selected_cover'):

        await callback.answer("‚ùå –û–±–ª–æ–∂–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é.", show_alert=True)

        return

    

    if callback.data.startswith("choose_cover_template_"):

        # –í—ã–±–æ—Ä –æ–±–ª–æ–∂–∫–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

        template_id = int(callback.data.replace("choose_cover_template_", ""))

        

        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–ª–æ–∂–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        from db import get_cover_template_by_id

        template = await get_cover_template_by_id(template_id)

        

        if template:

            selected_cover = {

                'template_id': template_id,

                'name': template['name'],

                'category': template.get('category', ''),

                'filename': template['filename'],

                'type': 'template'

            }

            

            await state.update_data(selected_cover=selected_cover)

            

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

            data = await state.get_data()

            order_id = data.get('order_id')

            if order_id:

                from db import update_order_data

                await update_order_data(order_id, {'selected_cover': selected_cover})

                

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

                await update_order_status(order_id, "cover_selected")
                
                # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é —á–µ—Ä–Ω–æ–≤–∏–∫–∞
                await update_order_status(order_id, "waiting_draft")

            

            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ–±–ª–æ–∂–∫–∏

            await callback.message.edit_caption(

                caption=f"‚úÖ <b>–û–±–ª–æ–∂–∫–∞ –≤—ã–±—Ä–∞–Ω–∞!</b>\n\n"

                       f"üìñ <b>{template['name']}</b>\n"

                       f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",

                parse_mode="HTML",

                reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

            )

            

            # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥—Ä—É–≥–∏—Ö –æ–±–ª–æ–∂–µ–∫ –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

            await remove_cover_buttons_for_user(callback.from_user.id, selected_template_id=template_id)

            

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏

            await callback.message.answer(

                "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞, –∏ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Ç–≤–æ—Ä–∏—Ç –≤–æ–ª—à–µ–±—Å—Ç–≤–æ, –±–µ—Ä–µ–∂–Ω–æ –≤–æ–ø–ª–æ—â–∞—è –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –≤ –∂–∏–∑–Ω—å ‚ú®\n"

                "–°–∫–æ—Ä–æ –≤–µ—Ä–Ω–µ–º—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –æ—á–µ–Ω—å –∂–¥–µ–º –≤–∞—à–µ–π —Ä–µ–∞–∫—Ü–∏–∏ ‚Äî –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –∫–Ω–∏–≥–∞ —Ç—Ä–æ–Ω–µ—Ç —Ç–µ–±—è –¥–æ –º—É—Ä–∞—à–µ–∫! üíéüíï"

            )

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_main_book (–ì–ª–∞–≤–∞ 6: –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–∏–≥–∏)
            from db import create_or_update_user_timer
            await create_or_update_user_timer(callback.from_user.id, order_id, "waiting_main_book", "–ö–Ω–∏–≥–∞")
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_main_book (–ì–ª–∞–≤–∞ 6), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}, –∑–∞–∫–∞–∑ {order_id}")

            

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É

            await add_outbox_task(

                order_id=order_id,

                user_id=callback.from_user.id,

                type_="manager_notification",

                content=f"–ó–∞–∫–∞–∑ #{order_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–±–ª–æ–∂–∫—É '{template['name']}' –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏. –ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —á–µ—Ä–Ω–æ–≤–∏–∫–∞."

            )

            

            await state.set_state(EditBookStates.waiting_for_draft)

        else:

            await callback.answer("‚ùå –û–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é.")

    



    

    else:

        # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

        cover_id = callback.data.replace("choose_cover_", "")

        data = await state.get_data()

        covers = data.get('cover_options', [])

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –æ–±–ª–æ–∂–∫—É –≤ –ø—Ä–æ—Ñ–∏–ª—å

        selected_cover = None

        cover_num = int(cover_id)

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –æ–±–ª–æ–∂–∫–∏ (1-5)

        if 1 <= cover_num <= 5:

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –æ–±–ª–æ–∂–∫–∏ –∏ –Ω–æ–º–µ—Ä –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –∏—Ö –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ

            if covers and cover_num <= len(covers):

                selected_cover = covers[cover_num - 1]

            else:

                # –ï—Å–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ–±–ª–æ–∂–∫–∏ –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –Ω–æ–º–µ—Ä–µ

                selected_cover = {

                    'cover_number': cover_num,

                    'type': 'selected_number',

                    'caption': f'–û–±–ª–æ–∂–∫–∞ {cover_num}'

                }

            

            await state.update_data(selected_cover=selected_cover)

            

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

            order_id = data.get('order_id')

            if order_id:

                from db import update_order_data

                await update_order_data(order_id, {'selected_cover': selected_cover})

        

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ–±–ª–æ–∂–∫–∏

        await callback.message.edit_text(

            f"‚úÖ –û–±–ª–æ–∂–∫–∞ –≤—ã–±—Ä–∞–Ω–∞: {cover_id}",

            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

        )

        

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥—Ä—É–≥–∏—Ö –æ–±–ª–æ–∂–µ–∫ –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

        await remove_cover_buttons_for_user(callback.from_user.id)

        

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏

        await callback.message.answer(

            "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞, –∏ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Ç–≤–æ—Ä–∏—Ç –≤–æ–ª—à–µ–±—Å—Ç–≤–æ, –±–µ—Ä–µ–∂–Ω–æ –≤–æ–ø–ª–æ—â–∞—è –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –≤ –∂–∏–∑–Ω—å ‚ú®\n"

            "–°–∫–æ—Ä–æ –≤–µ—Ä–Ω–µ–º—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –æ—á–µ–Ω—å –∂–¥–µ–º –≤–∞—à–µ–π —Ä–µ–∞–∫—Ü–∏–∏ ‚Äî –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –∫–Ω–∏–≥–∞ —Ç—Ä–æ–Ω–µ—Ç —Ç–µ–±—è –¥–æ –º—É—Ä–∞—à–µ–∫! üíéüíï"

        )

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_main_book (–ì–ª–∞–≤–∞ 6: –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–∏–≥–∏)
        from db import create_or_update_user_timer
        await create_or_update_user_timer(callback.from_user.id, order_id, "waiting_main_book", "–ö–Ω–∏–≥–∞")
        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_main_book (–ì–ª–∞–≤–∞ 6), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}, –∑–∞–∫–∞–∑ {order_id}")

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É

        await add_outbox_task(

            order_id=order_id,

            user_id=callback.from_user.id,

            type_="manager_notification",

            content=f"–ó–∞–∫–∞–∑ #{order_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–±–ª–æ–∂–∫—É {cover_id}. –ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —á–µ—Ä–Ω–æ–≤–∏–∫–∞."

        )

        

        await state.set_state(EditBookStates.waiting_for_draft)

    

    await log_state(callback.message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –æ–±–ª–æ–∂–∫–∏
@dp.message(StateFilter(CoverStates.choosing_cover), F.text)
async def handle_text_while_choosing_cover(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–±–ª–æ–∂–∫–∏"""
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ CoverStates.choosing_cover: '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    await save_user_message_to_history(message, state, "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –æ–±–ª–æ–∂–∫–∏: ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    current_state = await state.get_state()
    
    if current_state and current_state != "CoverStates:choosing_cover":
        await message.answer("‚ùå –í—ã–±–æ—Ä –æ–±–ª–æ–∂–∫–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.")
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    await log_state(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±–ª–æ–∂–∫–∏ –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏

@dp.callback_query(F.data.startswith("select_cover_"))

async def select_cover_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –ª–∏ —É–∂–µ –æ–±–ª–æ–∂–∫–∞

    data = await state.get_data()

    if data.get('selected_cover'):

        await callback.answer("‚ùå –û–±–ª–æ–∂–∫–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞! –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é.", show_alert=True)

        return

    

    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ–±–ª–æ–∂–∫–∏ –∏–∑ callback_data

    cover_id = int(callback.data.replace("select_cover_", ""))

    

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ–±–ª–æ–∂–∫–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    from db import get_cover_template_by_id

    template = await get_cover_template_by_id(cover_id)

    

    if template:

        selected_cover = {

            'template_id': cover_id,

            'name': template['name'],

            'category': template.get('category', ''),

            'filename': template['filename'],

            'type': 'template'

        }

        

        await state.update_data(selected_cover=selected_cover)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        data = await state.get_data()

        order_id = data.get('order_id')

        if order_id:

            from db import update_order_data

            await update_order_data(order_id, {'selected_cover': selected_cover})

        

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

        await update_order_status(order_id, "cover_selected")
        
        # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        await update_order_status(order_id, "waiting_draft")

        

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ–±–ª–æ–∂–∫–∏

        await callback.message.edit_text(

            f"‚úÖ <b>–û–±–ª–æ–∂–∫–∞ –≤—ã–±—Ä–∞–Ω–∞!</b>\n\n"

            f"üìñ <b>{template['name']}</b>\n"

            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}",

            parse_mode="HTML",

            reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

        )

        

        # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥—Ä—É–≥–∏—Ö –æ–±–ª–æ–∂–µ–∫ –≤–º–µ—Å—Ç–æ –ø–æ–∫–∞–∑–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è

        await remove_cover_buttons_for_user(callback.from_user.id, selected_template_id=template_id)

        

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞

        await callback.message.answer(

            "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞, –∏ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Ç–≤–æ—Ä–∏—Ç –≤–æ–ª—à–µ–±—Å—Ç–≤–æ, –±–µ—Ä–µ–∂–Ω–æ –≤–æ–ø–ª–æ—â–∞—è –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –≤ –∂–∏–∑–Ω—å ‚ú®\n"

            "–°–∫–æ—Ä–æ –≤–µ—Ä–Ω–µ–º—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –æ—á–µ–Ω—å –∂–¥–µ–º –≤–∞—à–µ–π —Ä–µ–∞–∫—Ü–∏–∏ ‚Äî –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –∫–Ω–∏–≥–∞ —Ç—Ä–æ–Ω–µ—Ç —Ç–µ–±—è –¥–æ –º—É—Ä–∞—à–µ–∫! üíéüíï"

        )

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_main_book (–ì–ª–∞–≤–∞ 6: –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–∏–≥–∏)
        from db import create_or_update_user_timer
        await create_or_update_user_timer(callback.from_user.id, order_id, "waiting_main_book", "–ö–Ω–∏–≥–∞")
        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_main_book (–ì–ª–∞–≤–∞ 6), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}, –∑–∞–∫–∞–∑ {order_id}")

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É

        await add_outbox_task(

            order_id=order_id,

            user_id=callback.from_user.id,

            type_="manager_notification",

            content=f"–ó–∞–∫–∞–∑ #{order_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –æ–±–ª–æ–∂–∫—É '{template['name']}' –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏. –ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —á–µ—Ä–Ω–æ–≤–∏–∫–∞."

        )

        

        await state.set_state(EditBookStates.waiting_for_draft)

        await log_state(callback.message, state)

    else:

        await callback.answer("‚ùå –û–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±—Ä–∞—Ç—å" –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –æ–±–ª–æ–∂–µ–∫

@dp.callback_query(F.data == "cover_next_step")

async def cover_next_step_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É...")

    

    # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –±–µ–∑ –≤—ã–±–æ—Ä–∞ –æ–±–ª–æ–∂–∫–∏

    data = await state.get_data()

    order_id = data.get('order_id')

    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏

    await callback.message.answer(

        "–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ–±—Ä–∞–Ω–∞, –∏ –Ω–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Ç–≤–æ—Ä–∏—Ç –≤–æ–ª—à–µ–±—Å—Ç–≤–æ, –±–µ—Ä–µ–∂–Ω–æ –≤–æ–ø–ª–æ—â–∞—è –≤–∞—à—É –∏—Å—Ç–æ—Ä–∏—é –≤ –∂–∏–∑–Ω—å ‚ú®\n"

        "–°–∫–æ—Ä–æ –≤–µ—Ä–Ω–µ–º—Å—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –æ—á–µ–Ω—å –∂–¥–µ–º –≤–∞—à–µ–π —Ä–µ–∞–∫—Ü–∏–∏ ‚Äî –Ω–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –∫–Ω–∏–≥–∞ —Ç—Ä–æ–Ω–µ—Ç —Ç–µ–±—è –¥–æ –º—É—Ä–∞—à–µ–∫! üíéüíï"

    )

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_main_book (–ì–ª–∞–≤–∞ 6: –û–∂–∏–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–Ω–∏–≥–∏)
    from db import create_or_update_user_timer
    await create_or_update_user_timer(callback.from_user.id, order_id, "waiting_main_book", "–ö–Ω–∏–≥–∞")
    logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_main_book (–ì–ª–∞–≤–∞ 6), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}, –∑–∞–∫–∞–∑ {order_id}")

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É

    await add_outbox_task(

        order_id=order_id,

        user_id=callback.from_user.id,

        type_="manager_notification",

        content=f"–ó–∞–∫–∞–∑ #{order_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –æ–±–ª–æ–∂–∫–∏ –∏ –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É. –ì–æ—Ç–æ–≤ –∫ —Å–æ–∑–¥–∞–Ω–∏—é —á–µ—Ä–Ω–æ–≤–∏–∫–∞."

    )

    

    await state.set_state(EditBookStates.waiting_for_draft)

    await log_state(callback.message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–æ–µ–π –æ–±–ª–æ–∂–∫–∏ —É–¥–∞–ª–µ–Ω—ã - –æ–±–ª–æ–∂–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏



# –ì–ª–∞–≤–∞ 14. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è

@dp.callback_query(F.data.in_(["edit_done", "edit_change"]))

async def edit_book_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    if callback.data == "edit_done":

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞

        data = await state.get_data()

        order_id = data.get('order_id')

        order_number = get_order_number(callback.from_user.id)

        

        await callback.message.edit_text(

            f"‚è≥ <b>–í–∞—à –∑–∞–∫–∞–∑ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º ‚Ññ{order_number} –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è.</b>\n\n"

            "–ö–æ–º–∞–Ω–¥–∞ —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–æ–≤ –≤–Ω–æ—Å–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —à—Ç—Ä–∏—Ö–∏, —ç—Ç–æ –∑–∞–π–º–µ—Ç 2-3 –¥–Ω—è.\n\n"

            "–ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–Ω–∏–≥–∏ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞!",

            parse_mode="HTML"

        )

        await state.set_state(EditBookStates.done)

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è —Ä—É—á–Ω–æ–π —Å–±–æ—Ä–∫–∏ –∫–Ω–∏–≥–∏

        await add_outbox_task(

            order_id=order_id,

            user_id=callback.from_user.id,

            type_="manager_notification",

            content=f"–ó–∞–∫–∞–∑ #{order_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —á–µ—Ä–Ω–æ–≤–∏–∫ –∫–Ω–∏–≥–∏. –¢—Ä–µ–±—É–µ—Ç—Å—è —Ä—É—á–Ω–∞—è —Å–±–æ—Ä–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏."

        )

        

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏

        await state.set_state(ManagerContentStates.waiting_final)

        

    elif callback.data == "edit_change":

        await callback.message.edit_text(

            "üîÑ <b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π:</b>\n\n"

            "–í—ã –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å:\n"

            "‚Ä¢ <b>–ü–æ —Ç–µ–∫—Å—Ç—É:</b> –∏–∑–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–∞, —Ñ—Ä–∞–∑—ã, –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç\n"

            "‚Ä¢ <b>–ü–æ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º:</b> –∑–∞–º–µ–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏–∑–º–µ–Ω–∏—Ç—å –∏—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ\n"

            "‚Ä¢ <b>–ü–æ –ø–æ—Ä—è–¥–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü:</b> –ø–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n"

            "‚Ä¢ <b>–î—Ä—É–≥–∏–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è:</b> –ª—é–±—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏\n\n"

            "–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å:",

            parse_mode="HTML"

        )

        await state.set_state(EditBookStates.adding_comments)

    

    await log_state(callback.message, state)



# –ì–ª–∞–≤–∞ 14. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è

@dp.message(StateFilter(EditBookStates.adding_comments))

async def save_edit_comments(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

    await save_user_message_to_history(message, state, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —á–µ—Ä–Ω–æ–≤–∏–∫—É –∫–Ω–∏–≥–∏: ")

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    data = await state.get_data()

    comments = data.get("edit_comments", [])

    comments.append(message.text)

    await state.update_data(edit_comments=comments)

    

    await message.answer(

        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!üôèüèª\n"

        "–ú—ã —É—á—Ç—ë–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–Ω–∏–≥–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",

        parse_mode="HTML"

    )

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É

    order_id = data.get('order_id')

    await add_outbox_task(

        order_id=order_id,

        user_id=message.from_user.id,

        type_="manager_notification",

        content=f"–ó–∞–∫–∞–∑ #{order_id}: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {message.text}"

    )

    

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

    await update_order_status(order_id, "editing")

    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞

    await state.set_state(EditBookStates.waiting_for_draft)

    await log_state(message, state)



# –ì–ª–∞–≤–∞ 15. –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏

@dp.callback_query(F.data == "book_delivery_digital")

async def book_delivery_digital_callback(callback: types.CallbackQuery, state: FSMContext):

    data = await state.get_data()

    order_id = data.get('order_id')

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏

    await state.update_data(book_format="–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞")

    

    await callback.message.edit_text(

        "üìÑ <b>–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤—ã–±—Ä–∞–Ω–∞!</b>\n\n"

        "–í–∞—à–∞ –∫–Ω–∏–≥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF. "

        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",

        parse_mode="HTML"

    )

    

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

    await update_order_status(order_id, "delivered")

    

    # –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

    await callback.message.answer(

        "üéâ <b>–í–∞—à–∞ –∫–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å ‚ù§Ô∏è</b>\n\n"

        "–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (PDF). "

        "–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",

        parse_mode="HTML"

    )

    

    # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—á–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏

    await callback.message.answer(

        "üì¶ –¢–µ–ø–µ—Ä—å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–µ—á–∞—Ç–Ω—É—é –∫–Ω–∏–≥—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏!",

        parse_mode="HTML"

    )

    

    await callback.message.answer(

        "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–∫–∂–µ –ø–µ—á–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –≤–∞—à–µ–π –∫–Ω–∏–≥–∏?",

        parse_mode="HTML"

    )

    

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="üì¶ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—á–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é", callback_data="upsell_print")],

        [InlineKeyboardButton(text="üìÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π", callback_data="continue_electronic")]

    ])

    

    await callback.message.answer(

        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",

        reply_markup=keyboard

    )

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É

    await add_outbox_task(

        order_id=order_id,

        user_id=callback.from_user.id,

        type_="manager_notification",

        content=f"–ó–∞–∫–∞–∑ #{order_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–Ω–∏–≥–∏"

    )

    

    await callback.answer()

    await log_state(callback.message, state)



@dp.callback_query(F.data == "book_delivery_print")

async def book_delivery_print_callback(callback: types.CallbackQuery, state: FSMContext):

    data = await state.get_data()

    order_id = data.get('order_id')

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –ø–µ—á–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏

    await state.update_data(book_format="–ü–µ—á–∞—Ç–Ω–∞—è –∫–Ω–∏–≥–∞")

    

    await callback.message.edit_text(

        "üì¶ <b>–ü–µ—á–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤—ã–±—Ä–∞–Ω–∞!</b>\n\n"

        "–î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–µ—á–∞—Ç–Ω–æ–π –∫–Ω–∏–≥–∏ –Ω–∞–º –Ω—É–∂–Ω—ã –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. "

        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 455000, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω, –≥. –ö–∞–∑–∞–Ω—å, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 52, –∫–≤. 43",

        parse_mode="HTML"

    )

    

    await state.set_state(DeliveryStates.waiting_for_address)

    

    await callback.answer()

    await log_state(callback.message, state)



@dp.message(StateFilter(DeliveryStates.waiting_for_address))

async def save_address(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å

    await state.update_data(delivery_address=message.text)

    await message.answer(

        "‚úÖ <b>–ê–¥—Ä–µ—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω!</b>\n\n"

        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–§–ò–û), –Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á",

        parse_mode="HTML"

    )

    await state.set_state(DeliveryStates.waiting_for_recipient)

    await log_state(message, state)



@dp.message(StateFilter(DeliveryStates.waiting_for_recipient))

async def save_recipient(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è

    await state.update_data(delivery_recipient=message.text)

    await message.answer(

        "‚úÖ <b>–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!</b>\n\n"

        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏ (–¥–ª—è –∫—É—Ä—å–µ—Ä–∞), –Ω–∞–ø—Ä–∏–º–µ—Ä: +7 900 000 00 00",

        parse_mode="HTML"

    )

    await state.set_state(DeliveryStates.waiting_for_phone)

    await log_state(message, state)



@dp.message(StateFilter(DeliveryStates.waiting_for_phone))

async def save_phone(message: types.Message, state: FSMContext):

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    phone = message.text.strip()

    

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã, —Å–∫–æ–±–∫–∏, –¥–µ—Ñ–∏—Å—ã –∏ –¥—Ä—É–≥–∏–µ —Å–∏–º–≤–æ–ª—ã

    phone_clean = re.sub(r'[^\d+]', '', phone)

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ –∑–Ω–∞–∫ +

    if not re.match(r'^\+?[\d\s\(\)\-]+$', phone):

        await message.answer(

            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!</b>\n\n"

            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"

            "‚Ä¢ +7 (999) 123-45-67\n"

            "‚Ä¢ 89991234567\n"

            "‚Ä¢ 9991234567\n\n"

            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",

            parse_mode="HTML"

        )

        return

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 10 —Ü–∏—Ñ—Ä)

    digits_only = re.sub(r'[^\d]', '', phone)

    if len(digits_only) < 10:

        await message.answer(

            "‚ùå –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 11 —Ü–∏—Ñ—Ä.\n"

            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üíå",

            parse_mode="HTML"

        )

        return

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É (–Ω–µ –±–æ–ª–µ–µ 15 —Ü–∏—Ñ—Ä)

    if len(digits_only) > 15:

        await message.answer(

            "‚ùå <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π!</b>\n\n"

            "–ù–æ–º–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª–µ–µ 15 —Ü–∏—Ñ—Ä.\n"

            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",

            parse_mode="HTML"

        )

        return

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º

    data = await state.get_data()

    order_id = data.get('order_id')

    address = data.get('delivery_address')

    recipient = data.get('delivery_recipient')

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

    try:

        from db import save_delivery_address

        await save_delivery_address(order_id, message.from_user.id, address, recipient, phone)

    except Exception as e:

        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {e}")

    

    await message.answer(

        f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!</b>\n\n"

        f"üì¶ <b>–ê–¥—Ä–µ—Å:</b> {address}\n"

        f"üë§üèº <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> {recipient}\n"

        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n\n"

        f"–¢–µ–ø–µ—Ä—å –º—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–∏–≥—É –≤ –ø–µ—á–∞—Ç—å üìñ, –∏ –æ–Ω–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —Ç–µ–±–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 1‚Äì2 –Ω–µ–¥–µ–ª—å ‚ú®",

        parse_mode="HTML"

    )

    

    # –°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–≥–ª–∞—Å–Ω–æ –ì–ª–∞–≤–µ 15

    # –£–±—Ä–∞–Ω–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –ì–ª–∞–≤–µ 18

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="–•–æ—á—É –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å –ø–µ—Å–Ω—é! üíï", callback_data="create_song")],

        [InlineKeyboardButton(text="–°–ø–∞—Å–∏–±–æ, –≤–µ—Ä–Ω—É—Å—å –∫ –≤–∞–º –ø–æ–∑–∂–µ! üíé", callback_data="finish_order")]

    ])

    await message.answer(

        "üíå –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª –Ω–∞–º —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏!\n"

        "–•–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫ –µ—â—ë –±–æ–ª–µ–µ –æ—Å–æ–±–µ–Ω–Ω—ã–º? –ú—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –¥–ª—è —Ç–µ–±—è –ø—Ä–æ–±–Ω—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–µ—Å–Ω—é ‚Äî –≤–∞—à–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–µ–≤—Ä–∞—Ç—è—Ç—Å—è –≤ –º—É–∑—ã–∫—É, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–æ–Ω–µ—Ç —Å–µ—Ä–¥—Ü–µ –≤–∞—à–µ–≥–æ –±–ª–∏–∑–∫–æ–≥–æ ‚ú®",

        reply_markup=keyboard,

        parse_mode="HTML"

    )

    

    await state.set_state(DeliveryStates.done)

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É

    await add_outbox_task(

        order_id=order_id,

        user_id=message.from_user.id,

        type_="manager_notification",

        content=f"–ó–∞–∫–∞–∑ #{order_id}: –°–æ—Ö—Ä–∞–Ω–µ–Ω –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ - {address}, –ø–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient}, —Ç–µ–ª: {phone}"

    )

    

    await log_state(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
@dp.message(StateFilter(DeliveryStates.done), F.text)
async def handle_text_after_delivery_done(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏"""
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ DeliveryStates.done: '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    await save_user_message_to_history(message, state, "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏: ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    current_state = await state.get_state()
    
    if current_state and current_state != "DeliveryStates:done":
        await message.answer("‚ùå –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–∫–∏ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.")
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    await log_state(message, state)


# –ê–ø—Å–µ–π–ª –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏

async def upsell_stage(message, state):

    data = await state.get_data()

    format_name = data.get("format", "üìÑ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞")

    logging.info(f"üéØ upsell_stage: format_name = {format_name}")

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ

    if format_name == "üìÑ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞":

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –ø–µ—á–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏

        await message.answer(

            "üì¶ <b>–¢–µ–ø–µ—Ä—å –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–µ—á–∞—Ç–Ω—É—é –∫–Ω–∏–≥—É –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏!</b>\n\n"

            "–î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–µ—á–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–∞–º –Ω—É–∂–Ω—ã –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. "

            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>:",

            parse_mode="HTML"

        )

        

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏

        await state.set_state(DeliveryStates.waiting_for_address)

    else:

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã–±—Ä–∞–ª –ø–µ—á–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é - –Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ø—Å–µ–π–ª –ø–µ—á–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="üíå –°–æ–∑–¥–∞—Ç—å –ø–µ—Å–Ω—é", callback_data="create_song")],

            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_order")]

        ])

        

        await message.answer(

            "üéâ <b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª–∏ –Ω–∞–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞!</b>\n\n"

            "–ê —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –∏ –ø–µ—Å–Ω—é?",

            reply_markup=keyboard,

            parse_mode="HTML"

        )

    

    await log_state(message, state)



@dp.callback_query(F.data.in_(["upsell_link", "upsell_print", "continue_electronic"]))

async def upsell_option_callback(callback: types.CallbackQuery, state: FSMContext):

    data = await state.get_data()

    order_id = data.get('order_id')

    

    if callback.data == "continue_electronic":

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π

        await callback.message.edit_text(

            "üìÑ <b>–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é.</b>\n\n"

            "–í–∞—à–∞ –∫–Ω–∏–≥–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF. "

            "–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",

            parse_mode="HTML"

        )

        

        # –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ "ready" –≤ book_draft_ok_callback

        logging.info(f"üìö –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–±–æ—Ä —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="üíå –°–æ–∑–¥–∞—Ç—å –ø–µ—Å–Ω—é", callback_data="create_song")],

            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_order")],

            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_upsell_choice")]

        ])

        

        await callback.message.answer(

            "üéâ <b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª–∏ –Ω–∞–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞!</b>\n\n"

            "–ê —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –∏ –ø–µ—Å–Ω—é?",

            reply_markup=keyboard,

            parse_mode="HTML"

        )

        

    else:

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ upsell_link –∏ upsell_print

        try:

            if callback.data == "upsell_link":

                # –û–ø–ª–∞—Ç–∞ –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Å—ã–ª–∫–æ–π

                price = 500  # –¶–µ–Ω–∞ –∑–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Å—ã–ª–∫–æ–π

                description = f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–æ–π - –∑–∞–∫–∞–∑ #{order_id}" if order_id else "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–æ–π"

                

                payment_data = await create_payment(order_id, price, description, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —É—Å–ª—É–≥–∞", is_upsell=True)

                

                keyboard = InlineKeyboardMarkup(inline_keyboard=[

                    [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_data['confirmation_url'])],

                    [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_upsell_payment")],


                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_upsell_choice")]

                ])

                

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

                order_data = await get_order_summary_data(order_id, state)

                order_summary = ""

                

                await callback.message.edit_text(

                    f"{order_summary}\n"

                    f"üí≥ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞:</b>\n"

                    f"–°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–æ–π: <b>{price} ‚ÇΩ</b>\n\n"

                    f"–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ:\n\n",

                    reply_markup=keyboard,

                    parse_mode="HTML"

                )

                

            elif callback.data == "upsell_print":

                # –û–ø–ª–∞—Ç–∞ –∑–∞ –ø–µ—á–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é - –¥–æ–ø–ª–∞—Ç–∞ (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–µ—á–∞—Ç–Ω–æ–π –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π)

                price = await get_upgrade_price_difference("–ö–Ω–∏–≥–∞", "üìÑ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞", "üì¶ –ü–µ—á–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è")

                # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                try:
                    ebook_price = await get_product_price_async("–ö–Ω–∏–≥–∞", "üìÑ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞")
                    combo_price = await get_product_price_async("–ö–Ω–∏–≥–∞", "üì¶ –ü–µ—á–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è")
                except:
                    ebook_price = 1990
                    combo_price = 7639

                description = f"–î–æ–ø–ª–∞—Ç–∞ –∑–∞ –ø–µ—á–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–Ω–∏–≥–∏ - –∑–∞–∫–∞–∑ #{order_id}" if order_id else "–î–æ–ø–ª–∞—Ç–∞ –∑–∞ –ø–µ—á–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–Ω–∏–≥–∏"

                

                payment_data = await create_payment(order_id, price, description, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —É—Å–ª—É–≥–∞", is_upsell=True)

                

                keyboard = InlineKeyboardMarkup(inline_keyboard=[

                    [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å", url=payment_data['confirmation_url'])],

                    [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_upsell_payment")],


                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_upsell_choice")]

                ])

                

                await callback.message.edit_text(

                    f"üí≥ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞:\n"

                    f"–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è: {ebook_price} ‚ÇΩ (—É–∂–µ –æ–ø–ª–∞—á–µ–Ω–∞)\n"

                    f"–ü–µ—á–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è: {combo_price} ‚ÇΩ\n"

                    f"–î–æ–ø–ª–∞—Ç–∞: {price} ‚ÇΩ\n\n"

                    f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ–ø–ª–∞—Ç—ã –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –≤–∞–º –ø–µ—á–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –∫–Ω–∏–≥–∏:\n\n",

                    reply_markup=keyboard,

                    parse_mode="HTML"

                )

            

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ state

            await state.update_data(

                upsell_payment_id=payment_data['payment_id'],

                upsell_payment_url=payment_data['confirmation_url'],

                upsell_type="link" if callback.data == "upsell_link" else "print"

            )

            

        except Exception as e:

            logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è upsell –ø–ª–∞—Ç–µ–∂–∞: {e}")

            await callback.message.edit_text(

                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."

            )

    

    await callback.answer()

    await log_state(callback.message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞

@dp.callback_query(F.data == "back_to_upsell_choice")

async def back_to_upsell_choice_callback(callback: types.CallbackQuery, state: FSMContext):

    data = await state.get_data()

    order_id = data.get('order_id')

    

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="üì¶ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—á–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é", callback_data="upsell_print")],

        [InlineKeyboardButton(text="üìÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π", callback_data="continue_electronic")]

    ])

    

    await callback.message.edit_text(

        "üéâ <b>–í–∞—à–∞ –∫–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å ‚ù§Ô∏è</b>\n\n"

        "–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (PDF). "

        "–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!\n\n"

        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç:",

        reply_markup=keyboard,

        parse_mode="HTML"

    )

    

    await callback.answer()

    await log_state(callback.message, state)



# –ì–ª–∞–≤–∞ 17. –ê–ø—Å–µ–π–ª –∏ –ì–ª–∞–≤–∞ 18. –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è

@dp.callback_query(F.data == "create_song")

async def create_song_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    user_id = callback.from_user.id

    from db import get_last_order_username

    last_username = await get_last_order_username(user_id)

    

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∫–Ω–∏–≥–∏

    from db import get_user_active_order

    previous_order = await get_user_active_order(user_id, "–ö–Ω–∏–≥–∞")

    

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞

    # first_name –∏ last_name –ù–ï –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ Telegram

    user_first_name = None

    user_last_name = None

    

    if previous_order and previous_order.get('order_data'):

        try:

            import json

            order_data = json.loads(previous_order.get('order_data', '{}')) if previous_order and isinstance(previous_order.get('order_data'), str) else (previous_order.get('order_data', {}) if previous_order else {})

            user_first_name = order_data.get('first_name', user_first_name)

            user_last_name = order_data.get('last_name', user_last_name)

        except:

            pass

    

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Å–Ω–∏

    await state.clear()

    

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await state.update_data(

        user_id=user_id,

        username=last_username or callback.from_user.username,

        first_name=user_first_name,

        last_name=user_last_name

    )

    

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–º–µ–Ω–∏

    await start_song_creation_flow(callback, state)

    await log_state(callback.message, state)



@dp.callback_query(F.data == "finish_order")

async def finish_order_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    data = await state.get_data()

    order_id = data.get('order_id')

    

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–∫–∞–∑ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞

    await callback.message.edit_text(

        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª –∏–º–µ–Ω–Ω–æ –Ω–∞—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ —Å–æ–∫—Ä–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞üíù\n\n"

        "–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –ø–æ–¥–∞—Ä–∏—Ç—å —ç–º–æ—Ü–∏–∏ –∏ —Ç—Ä–æ–Ω—É—Ç—å —Å–µ—Ä–¥—Ü–µ –±–ª–∏–∑–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è ü´∂üèª\n\n"

        "–ú—ã –±—É–¥–µ–º –∑–¥–µ—Å—å –¥–ª—è —Ç–µ–±—è,\n"

        "–ö–æ–º–∞–Ω–¥–∞ \"–í —Å–∞–º–æ–µ —Å–µ—Ä–¥—Ü–µ\" üíñ",

        parse_mode="HTML"

    )

    

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "–∑–∞–≤–µ—Ä—à–µ–Ω"

    await update_order_status(order_id, "completed")

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞

    await add_outbox_task(

        order_id=order_id,

        user_id=callback.from_user.id,

        type_="manager_notification",

        content=f"–ó–∞–∫–∞–∑ #{order_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–∫–∞–∑. –ö–Ω–∏–≥–∞ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."

    )

    

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await state.clear()

    

    await log_state(callback.message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞

@dp.callback_query(F.data == "check_payment")

async def check_payment_status(callback: types.CallbackQuery, state: FSMContext):

    try:

        data = await state.get_data()

        payment_id = data.get('payment_id')

        order_id = data.get('order_id')

        product = data.get('product', '–ö–Ω–∏–≥–∞')

        

        if not payment_id:

            await callback.answer("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)

            return

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ order_id

        if order_id is None:

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            user_id = callback.from_user.id

            existing_order = await get_user_active_order(user_id, product)

            

            if existing_order:

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑

                order_id = existing_order.get('id') if existing_order else None

                await state.update_data(order_id=order_id)

            else:

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ

                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ state

                user_data = await state.get_data()

                order_data = {

                    "product": product,

                    "user_id": user_id,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π user_id –∏–∑ callback

                    "username": user_data.get('username'),

                    "first_name": user_data.get('first_name'),

                    "last_name": user_data.get('last_name')

                }

                order_id = await create_order(user_id, order_data)

                await state.update_data(order_id=order_id)

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞

        payment_data = await get_payment_status(payment_id)
        
        if not payment_data:
            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
            return
            
        status = payment_data.get('status')

        if status == 'succeeded':
            # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ–≤–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ

            try:

                from db import cleanup_trigger_messages_by_type

                await cleanup_trigger_messages_by_type(order_id, ['song_warming_example', 'song_warming_motivation'])

                logging.info(f"‚úÖ –û—Ç–º–µ–Ω–µ–Ω—ã –ø—Ä–æ–≥—Ä–µ–≤–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

            except Exception as e:

                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–≥—Ä–µ–≤–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

            

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            await update_order_status(order_id, "paid")
            logging.info(f"‚úÖ check_payment_status: –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'paid'")

            

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞
            try:
                import json
                from yookassa_integration import get_payment_by_order_id
                payment = await get_payment_by_order_id(order_id)
                total_amount = float(payment.get('amount', 0)) if payment else 0
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ –∑–∞–∫–∞–∑–∞
                order = await get_order(order_id)
                if order:
                    order_data = json.loads(order.get('order_data', '{}'))
                    product_type = order_data.get('product', product)  # fallback –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é product
                else:
                    product_type = product
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞/–∑–∞–∫–∞–∑–∞: {e}")
                total_amount = 0
                product_type = product

            # –¢—Ä–µ–∫–∏–Ω–≥: –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
            await track_event(
                user_id=callback.from_user.id,
                event_type='purchase_completed',
                event_data={
                    'order_id': order_id,
                    'product': product_type,
                    'amount': total_amount
                },
                product_type=product_type,
                order_id=order_id,
                amount=total_amount
            )

            

            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–≥–ª–∞—Å–∏–µ–º (–Ω–µ –∂–¥–µ–º webhook)
            logging.info(f"üí° check_payment_status: –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–≥–ª–∞—Å–∏–µ")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
            try:
                from db import add_outbox_task
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞
                order = await get_order(order_id)
                product_type = '–ø–æ–¥–∞—Ä–æ–∫'
                if order and order.get('order_data'):
                    import json
                    try:
                        parsed_data = json.loads(order.get('order_data', '{}'))
                        product_type = parsed_data.get('product', '–ø–æ–¥–∞—Ä–æ–∫')
                    except:
                        product_type = '–ø–æ–¥–∞—Ä–æ–∫'
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–≥–ª–∞—Å–∏—è
                consent_message = (
                    f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ! –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id:04d} —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ ‚ù§Ô∏è\n"
                    f"–ß—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å–æ–∑–¥–∞—Ç—å –≤–∞—à –æ—Å–æ–±–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫, –Ω–∞–º –Ω—É–∂–Ω–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.\n\n"
                    f"üìã –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–º, –∫–∞–∫ –º—ã –±–µ—Ä–µ–∂–Ω–æ —Ö—Ä–∞–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, –∑–¥–µ—Å—å:\n"
                    f"1. <a href='https://vsamoeserdtse.ru/approval'>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>\n"
                    f"2. <a href='https://vsamoeserdtse.ru/oferta'>–û—Ñ–µ—Ä—Ç–∞ –æ –∑–∞–∫–ª—é—á–µ–Ω–∏–∏ –¥–æ–≥–æ–≤–æ—Ä–∞ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥, –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>\n\n"
                    f"–î–∞–µ—Ç–µ —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö? üíï"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ outbox –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await add_outbox_task(
                    order_id=order_id,
                    user_id=callback.from_user.id,
                    type_="text_with_buttons",
                    content=consent_message,
                    button_text="‚úÖ –°–æ–≥–ª–∞—Å–µ–Ω|‚ùå –ù–µ —Å–æ–≥–ª–∞—Å–µ–Ω",
                    button_callback="personal_data_consent_yes|personal_data_consent_no"
                )
                logging.info(f"‚úÖ CHECK_PAYMENT: –î–æ–±–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–≥–ª–∞—Å–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂
                logging.info(f"‚úÖ CHECK_PAYMENT: –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∑–∞–∫–∞–∑ {order_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                await update_order_status(order_id, "paid")
                
                # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ "paid"
                from db import create_or_update_user_timer
                product_type = order_data.get('product', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                await create_or_update_user_timer(callback.from_user.id, order_id, "paid", product_type)
                logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ paid, –ø—Ä–æ–¥—É–∫—Ç {product_type}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}, –∑–∞–∫–∞–∑ {order_id}")
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è: {e}")
            
            await callback.answer("–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ")

            

        elif status == 'pending':

            await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.", show_alert=True)

            

        elif status == 'canceled':

            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.", show_alert=True)

            

        else:

            await callback.answer(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}", show_alert=True)

            

    except Exception as e:

        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")

        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

    

    await callback.answer()

    await log_state(callback.message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ upsell –ø–ª–∞—Ç–µ–∂–∞

@dp.callback_query(F.data == "check_upsell_payment")

async def check_upsell_payment_status(callback: types.CallbackQuery, state: FSMContext):

    try:

        data = await state.get_data()

        payment_id = data.get('upsell_payment_id')

        

        if not payment_id:

            await callback.answer("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)

            return

        

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –ÆKassa

        payment_status = await get_payment_status(payment_id)

        

        if not payment_status:

            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

            return

        

        status = payment_status['status']

        

        if status == 'succeeded':

            # –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω - –ø–æ–ª—É—á–∞–µ–º —Ç–∏–ø –¥–æ–ø–ª–∞—Ç—ã
            upsell_type = data.get('upsell_type', 'print')
            order_id = data.get('order_id')

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            if order_id:
                await update_order_status(order_id, "upsell_paid")
                
                # –¢—Ä–µ–∫–∏–Ω–≥: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
                await track_event(
                    user_id=callback.from_user.id,
                    event_type='upsell_purchased',
                    event_data={
                        'order_id': order_id,
                        'upsell_type': upsell_type
                    },
                    order_id=order_id
                )

            if upsell_type == "print":

                # –î–ª—è –ø–µ—á–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏

                await callback.message.edit_text(

                    "‚úÖ <b>–î–æ–ø–ª–∞—Ç–∞ –∑–∞ –ø–µ—á–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"

                    "–¢–µ–ø–µ—Ä—å –Ω–∞–º –Ω—É–∂–Ω—ã –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–µ—á–∞—Ç–Ω–æ–π –∫–Ω–∏–≥–∏.\n\n"

                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: 455000, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω, –≥. –ö–∞–∑–∞–Ω—å, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 52, –∫–≤. 43",

                    parse_mode="HTML"

                )

                

                await state.set_state(DeliveryStates.waiting_for_address)

                

            else:

                # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ upsell

                await callback.message.edit_text(

                    "‚úÖ <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b>\n\n"

                "–í–∞—à–∞ —É—Å–ª—É–≥–∞ –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."

            )

                

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

                keyboard = InlineKeyboardMarkup(inline_keyboard=[

                    [InlineKeyboardButton(text="üíå –°–æ–∑–¥–∞—Ç—å –ø–µ—Å–Ω—é", callback_data="create_song")],

                    [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_order")]

                ])

                

                await callback.message.answer(

                    "üéâ <b>–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª–∏ –Ω–∞–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞!</b>\n\n"

                    "–ê —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –∏ –ø–µ—Å–Ω—é?",

                    reply_markup=keyboard,

                    parse_mode="HTML"

                )

            

        elif status == 'pending':

            await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.", show_alert=True)

            

        elif status == 'canceled':

            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂.", show_alert=True)

            

        else:

            await callback.answer(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {status}", show_alert=True)

            

    except Exception as e:

        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ upsell –ø–ª–∞—Ç–µ–∂–∞: {e}")

        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

    

    await callback.answer()

    await log_state(callback.message, state)












# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –∞–Ω–∫–µ—Ç—ã –ø–µ—Å–Ω–∏ ---

@dp.callback_query(F.data == "continue_with_5_facts")

async def continue_with_5_facts_callback(callback: types.CallbackQuery, state: FSMContext):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å 5 —Ñ–∞–∫—Ç–∞–º–∏'"""

    try:

        data = await state.get_data()

        facts = data.get("song_facts", [])

        

        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã

        unique_facts = []

        for fact in facts:

            fact_clean = fact.strip().lower()

            if fact_clean not in [f.strip().lower() for f in unique_facts]:

                unique_facts.append(fact)

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        user_id = callback.from_user.id

        existing_order = await get_user_active_order(user_id, "–ü–µ—Å–Ω—è")

        

        if existing_order:

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ

            order_id = existing_order.get('id') if existing_order else None

            await state.update_data(order_id=order_id)

            

            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ (—Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∞–¥–º–∏–Ω–∫–∏)

            order_data = {

                "product": "–ü–µ—Å–Ω—è",

                "hero_name": data.get('song_recipient_name', ''),  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏

                "style": data.get('song_style', ''),  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏

                "answers": unique_facts,  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏ (—Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ–≤)

                "song_gender": data.get('song_gender'),

                "song_relation": data.get('song_relation'),

                "song_recipient_name": data.get('song_recipient_name'),

                "song_gift_reason": data.get('song_gift_reason'),

                "song_style": data.get('song_style'),

                "song_quiz_special": data.get('song_quiz_special'),

                "song_quiz_memory": data.get('song_quiz_memory'),

                "song_facts": unique_facts,

                "username": data.get('username'),

                "first_name": data.get('first_name'),

                "last_name": data.get('last_name')

            }

            

            # –û–±–Ω–æ–≤–ª—è–µ–º order_data –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∑–∞–∫–∞–∑–µ

            await update_order_data(order_id, order_data)

        else:

            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ (—Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∞–¥–º–∏–Ω–∫–∏)

            order_data = {

                "product": "–ü–µ—Å–Ω—è",

                "user_id": data.get('user_id'),

                "username": data.get('username'),

                "first_name": data.get('first_name'),

                "last_name": data.get('last_name'),

                "hero_name": data.get('song_recipient_name', ''),  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏

                "style": data.get('song_style', ''),  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏

                "answers": unique_facts,  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏ (—Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ–≤)

                "song_gender": data.get('song_gender'),

                "song_relation": data.get('song_relation'),

                "song_recipient_name": data.get('song_recipient_name'),

                "song_gift_reason": data.get('song_gift_reason'),

                "song_style": data.get('song_style'),

                "song_quiz_special": data.get('song_quiz_special'),

                "song_quiz_memory": data.get('song_quiz_memory'),

                "song_facts": unique_facts

            }

            

            order_id = await create_order(user_id, order_data)

            await state.update_data(order_id=order_id)

        

        # –î–ª—è –ø–µ—Å–Ω–∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏

        await update_order_status(order_id, "waiting_draft")

        

        # --- –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–µ—Å–Ω–∏ ---

        await callback.message.edit_text(

            f"üéô –í–∞—à–∞ –ø–µ—Å–Ω—è –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º ‚Ññ{order_id:04d} —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ üíå\n"

            f"–ú—ã –±–µ—Ä–µ–∂–Ω–æ —Å–æ–±—Ä–∞–ª–∏ –≤–∞—à–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ç–µ–ø–µ—Ä—å –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –∏—Ö –≤ –º—É–∑—ã–∫—É. –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –æ–Ω–∞ –æ–∂–∏–≤—ë—Ç üé∂"

        )
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_full_song (–ì–ª–∞–≤–∞ 4: –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –ø–µ—Å–Ω–∏)
        from db import create_or_update_user_timer
        await create_or_update_user_timer(callback.from_user.id, order_id, "waiting_full_song", "–ü–µ—Å–Ω—è")
        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_full_song (–ì–ª–∞–≤–∞ 4), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}, –∑–∞–∫–∞–∑ {order_id}")

        

        # --- –û–∂–∏–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≥—Ä–µ–≤ ‚Äî –ø–ª–∞–Ω–∏—Ä—É–µ–º 1‚Äì2 —Å–æ–æ–±—â–µ–Ω–∏—è ---

        try:

            from db import add_delayed_message

            # 1) –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Å–Ω–∏

            await add_delayed_message(

                order_id=order_id,

                user_id=user_id,

                message_type="song_warming_example",

                content="üí° –û–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤–∫–ª—é—á–∏–ª –ø–µ—Å–Ω—é –≤–æ –≤—Ä–µ–º—è —É–∂–∏–Ω–∞ —Å –∂–µ–Ω–æ–π. –ë—ã–ª–æ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ –¥–æ —Å–ª—ë–∑!",

                delay_minutes=1440  # —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞

            )

            # 2) –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

            await add_delayed_message(

                order_id=order_id,

                user_id=user_id,

                message_type="song_warming_motivation",

                content="‚ú® –ü–µ—Å–Ω—è ‚Äî —ç—Ç–æ –±–æ–ª—å—à–µ, —á–µ–º –ø–æ–¥–∞—Ä–æ–∫. –≠—Ç–æ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ. –ò –º—ã –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏!",

                delay_minutes=2880  # —á–µ—Ä–µ–∑ 48 —á–∞—Å–æ–≤

            )

        except Exception as e:

            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ–≤–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

        

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–µ—Å–Ω–∏

        await state.set_state(SongDraftStates.waiting_for_draft)

        

        await callback.answer()

        await log_state(callback.message, state)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ continue_with_5_facts_callback: {e}")

        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



@dp.callback_query(F.data == "add_more_facts")

async def add_more_facts_callback(callback: types.CallbackQuery, state: FSMContext):

    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è'"""

    try:

        await callback.message.edit_text(

            "üí° –û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤—å—Ç–µ –µ—â—ë 1-3 —Ñ–∞–∫—Ç–∞ –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏.\n\n"

            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ –æ–¥–Ω–æ–º—É —Ñ–∞–∫—Ç—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–æ–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º."

        )

        

        # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è —Å–±–æ—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤

        await callback.answer()

        await log_state(callback.message, state)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ add_more_facts_callback: {e}")

        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü

@dp.callback_query(F.data.startswith("choose_page_"))

async def choose_individual_page(callback: types.CallbackQuery, state: FSMContext):

    try:

        page_num = int(callback.data.replace("choose_page_", ""))

        print(f"üîç –û–¢–õ–ê–î–ö–ê: choose_individual_page: callback.data={callback.data}, page_num={page_num}")

        

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞

        data = await state.get_data()

        order_id = data.get('order_id')

        selected_pages = data.get(f"selected_pages_{order_id}", [])

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É–∂–µ –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞

        selection_finished = data.get(f"page_selection_finished_{order_id}", False)

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É

        current_state = await state.get_state()

        if current_state and current_state != "BookFinalStates:choosing_pages":

            await callback.answer("‚ùå –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.")

            return

        

        if page_num in selected_pages:

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω—è—Ç—å –≤—ã–±–æ—Ä

            if selection_finished:

                await callback.answer("‚úÖ –í—ã —É–∂–µ –≤—Å—ë –≤—ã–±—Ä–∞–ª–∏! –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω.")

                return

            # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö

            selected_pages.remove(page_num)

            await callback.answer(f"‚ùå –í—ã–±—Ä–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(selected_pages)}/24")

        else:

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤ 24 —Å—Ç—Ä–∞–Ω–∏—Ü—ã

            if len(selected_pages) >= 24:

                await callback.answer("‚ùå –í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ 24 —Å—é–∂–µ—Ç–∞! –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–≤—ã–±—Ä–∞—Ç—å, —É–±—Ä–∞–≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö.")

                return

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º

            selected_pages.append(page_num)

            await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(selected_pages)}/24")

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞

        await state.update_data({f"selected_pages_{order_id}": selected_pages})

        

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º

        progress_text = f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Ä–æ–≤–Ω–æ 24)\n\n"

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏ –º–∏–Ω–∏–º—É–º (24 —Å—Ç—Ä–∞–Ω–∏—Ü—ã)

        minimum_reached = len(selected_pages) >= 24

        minimum_already_processed = data.get(f"minimum_processed_{order_id}", False)

        

        if minimum_reached and not minimum_already_processed:

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

            if order_id:

                await save_selected_pages(order_id, selected_pages)

                print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {selected_pages}")

            

            # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –º–∏–Ω–∏–º—É–º –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞

            await state.update_data({f"minimum_processed_{order_id}": True})

            

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–£–±—Ä–∞—Ç—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö" –¥–ª—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã

            current_caption = callback.message.caption or ""

            description_part = extract_page_description(current_caption)

            

            new_caption = f"‚úÖ {description_part}\n\n{progress_text}"

            

            keyboard_buttons = []

            keyboard_buttons.append([InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö", callback_data=f"choose_page_{page_num}")])

            new_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

            

            await callback.message.edit_caption(

                caption=new_caption,

                reply_markup=new_keyboard

            )

            

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑

            continue_message_sent = data.get(f"continue_message_sent_{order_id}", False)

            if not continue_message_sent:

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"

                continue_keyboard = InlineKeyboardMarkup(inline_keyboard=[

                    [InlineKeyboardButton(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏", callback_data="continue_book_creation")]

                ])

                

                await callback.message.answer(

                    "üéâ <b>–û—Ç–ª–∏—á–Ω–æ! –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!</b>\n\n"

                    "‚úÖ –í—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω\n"

                    "üìö –í–∞—à–∞ –∫–Ω–∏–≥–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å 24 —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã\n\n"

                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏:",

                    reply_markup=continue_keyboard,

                    parse_mode="HTML"

                )

                

                # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ

                await state.update_data({f"continue_message_sent_{order_id}": True})

                print(f"üîç –û–¢–õ–ê–î–ö–ê: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å' –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

            

            print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∏–Ω–∏–º—É–º 24 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}, –Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –æ—Ç–∫–ª—é—á–µ–Ω")

            return  # –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—â–µ —Ä–∞–∑

        elif len(selected_pages) < 24:

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–∞–∂–µ –µ—Å–ª–∏ –º–∏–Ω–∏–º—É–º –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç

            if order_id:

                await save_selected_pages(order_id, selected_pages)

                print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {selected_pages} (–º–∏–Ω–∏–º—É–º –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç)")

            

            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–ª–æ –º–µ–Ω—å—à–µ 24, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏

            if len(selected_pages) < 24:

                if minimum_already_processed:

                    await state.update_data({f"minimum_processed_{order_id}": False})

                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–±—Ä–æ—à–µ–Ω —Ñ–ª–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ < 24)")

                

                # –ù–ï —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å"

                # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–µ–Ω—è–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ

        current_caption = callback.message.caption or ""

        description_part = extract_page_description(current_caption)

        

        # –ú–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–ª–∏ –Ω–µ—Ç

        if page_num in selected_pages:

            new_caption = f"‚úÖ {description_part}\n\n{progress_text}"

        else:

            new_caption = f"üìñ {description_part}\n\n{progress_text}"

        

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è

        keyboard_buttons = []

        

        if selection_finished:

            # –í—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω - —Å–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞

            if page_num in selected_pages:

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü

                keyboard_buttons.append([InlineKeyboardButton(text="‚úÖ –í—ã–±—Ä–∞–Ω–æ (–≤—ã —É–∂–µ –≤—Å—ë –≤—ã–±—Ä–∞–ª–∏)", callback_data="selection_finished")])

            # –î–ª—è –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ–æ–±—â–µ

        else:

            # –í—ã–±–æ—Ä –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω—ã–µ –∫–Ω–æ–ø–∫–∏

            if page_num in selected_pages:

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–£–±—Ä–∞—Ç—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö"

                keyboard_buttons.append([InlineKeyboardButton(text="–£–±—Ä–∞—Ç—å –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö", callback_data=f"choose_page_{page_num}")])

            else:

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í—ã–±—Ä–∞—Ç—å"

                keyboard_buttons.append([InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", callback_data=f"choose_page_{page_num}")])

        

        new_keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

        

        await callback.message.edit_caption(

            caption=new_caption,

            reply_markup=new_keyboard

        )

        

        # –ë–æ–ª—å—à–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –º–∏–Ω–∏–º—É–º–µ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ choose_individual_page: {e}")

        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")





    

    await callback.answer()

    await log_state(callback.message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω"

@dp.callback_query(F.data == "selection_finished")

async def selection_finished_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer("‚úÖ –í—ã —É–∂–µ –≤—Å—ë –≤—ã–±—Ä–∞–ª–∏! –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü

@dp.callback_query(F.data.startswith("remove_page_"))

async def remove_individual_page(callback: types.CallbackQuery, state: FSMContext):

    try:

        page_num = int(callback.data.replace("remove_page_", ""))

        print(f"üîç –û–¢–õ–ê–î–ö–ê: remove_individual_page: callback.data={callback.data}, page_num={page_num}")

        

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞

        data = await state.get_data()

        order_id = data.get('order_id')

        selected_pages = data.get(f"selected_pages_{order_id}", [])

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω –ª–∏ —É–∂–µ –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞

        selection_finished = data.get(f"page_selection_finished_{order_id}", False)

        

        if selection_finished:

            await callback.answer("‚úÖ –í—ã —É–∂–µ –≤—Å—ë –≤—ã–±—Ä–∞–ª–∏! –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω.")

            return

        

        # –£–±–∏—Ä–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞)

        if page_num in selected_pages:

            selected_pages.remove(page_num)

            await callback.answer(f"‚ùå –í—ã–±—Ä–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {len(selected_pages)}/24")

        else:

            await callback.answer("‚ÑπÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –±—ã–ª–∞ –≤—ã–±—Ä–∞–Ω–∞")

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞

        await state.update_data({f"selected_pages_{order_id}": selected_pages})

        

        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–ª–æ 0 (–ø–æ–ª–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –≤—Å–µ—Ö –≤—ã–±–æ—Ä–æ–≤), —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

        if len(selected_pages) == 0:

            minimum_already_notified = data.get(f"minimum_notified_{order_id}", False)

            if minimum_already_notified:

                await state.update_data({f"minimum_notified_{order_id}": False})

                print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–±—Ä–æ—à–µ–Ω —Ñ–ª–∞–≥ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} (–ø–æ–ª–Ω–∞—è –æ—Ç–º–µ–Ω–∞)")

        

        # –£–î–ê–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –° –§–û–¢–û–ì–†–ê–§–ò–ï–ô –ò–ó –ß–ê–¢–ê

        try:

            await callback.message.delete()

            print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page_num} —É–¥–∞–ª–µ–Ω–æ –∏–∑ —á–∞—Ç–∞")

            

        except Exception as delete_error:

            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}")

            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

            await callback.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞")

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ remove_individual_page: {e}")

        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    

    await log_state(callback.message, state)



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±–ª–æ–∂–µ–∫

async def remove_cover_buttons_from_other_messages(user_id: int, selected_template_id: int):

    """–£–¥–∞–ª—è–µ—Ç –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Å –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±–ª–æ–∂–µ–∫ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –æ–¥–Ω–æ–π"""

    try:

        from db import get_cover_templates

        cover_templates = await get_cover_templates()

        

        # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞

        from aiogram import Bot

        bot = Bot.get_current()

        

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –æ–±–ª–æ–∂–∫–∞–º, –∫—Ä–æ–º–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π

        for template in cover_templates:

            if template['id'] != selected_template_id:

                try:

                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç—Ç–æ–π –æ–±–ª–æ–∂–∫–æ–π

                    # –≠—Ç–æ —Å–ª–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è message_id, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                    pass

                except Exception as e:

                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±–ª–æ–∂–∫–æ–π {template['id']}: {e}")

    except Exception as e:

        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ remove_cover_buttons_from_other_messages: {e}")



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –≥–æ–ª–æ—Å–æ–≤

async def send_voice_examples(message: types.Message, user_gender: str):

    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –≥–æ–ª–æ—Å–æ–≤ –ø–µ—Ä–µ–¥ –≤—ã–±–æ—Ä–æ–º —Å—Ç–∏–ª—è"""

    try:

        logging.info(f"üéµ send_voice_examples –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–æ–ª–æ–º: '{user_gender}'")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω
        if not user_gender or user_gender == '':
            logging.warning(f"‚ö†Ô∏è –ü–æ–ª –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º '–ø–∞—Ä–µ–Ω—å' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            user_gender = '–ø–∞—Ä–µ–Ω—å'

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        from db import get_voice_styles

        voices = await get_voice_styles()

        

        if not voices:

            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏–º–µ—Ä—ã –≥–æ–ª–æ—Å–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

            return

        

        # –í—ã–±–∏—Ä–∞–µ–º –≥–æ–ª–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞

        matching_voices = []

        logging.info(f"üéµ –ü–æ–∏—Å–∫ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª–∞: '{user_gender}', –¥–æ—Å—Ç—É–ø–Ω–æ –≥–æ–ª–æ—Å–æ–≤: {len(voices)}")

        for voice in voices:

            voice_gender = voice.get('gender', 'male').lower()

            logging.info(f"üéµ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ–ª–æ—Å: {voice.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}, –ø–æ–ª: '{voice_gender}'")

            if user_gender == "–¥–µ–≤—É—à–∫–∞" and voice_gender in ['female', '–∂–µ–Ω—Å–∫–∏–π']:

                matching_voices.append(voice)

                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å: {voice.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")

            elif user_gender == "–ø–∞—Ä–µ–Ω—å" and voice_gender in ['male', '–º—É–∂—Å–∫–æ–π']:

                matching_voices.append(voice)

                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å: {voice.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")

        

        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥–æ–ª–æ—Å–æ–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π

        if not matching_voices:

            logging.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª–∞ '{user_gender}', –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π")

            matching_voices = [voices[0]]

            logging.info(f"üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–æ–ª–æ—Å: {voices[0].get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}, –ø–æ–ª: '{voices[0].get('gender', 'male')}'")

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 3 –ø—Ä–∏–º–µ—Ä–∞ –≥–æ–ª–æ—Å–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –æ–∫—Ä–∞—Å–∫–∞–º–∏

        await message.answer("–ö–∞–∂–¥–∞—è –∏—Å—Ç–æ—Ä–∏—è –∑–≤—É—á–∏—Ç –ø–æ-—Å–≤–æ–µ–º—É, –∞ –∫–∞–∫ –∑–≤—É—á–∏—Ç —Ç–≤–æ—è?\n–ü–æ—Å–ª—É—à–∞–π –ø—Ä–∏–º–µ—Ä—ã, –∏ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π.")

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ 3 –ø—Ä–∏–º–µ—Ä–æ–≤ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –ø–µ—Å–µ–Ω

        for i, voice in enumerate(matching_voices[:3]):

            audio_path = f"voices/{voice['filename']}"

            

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –ø–µ—Å–Ω–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞ –≥–æ–ª–æ—Å–∞

            song_styles = ["–ù–µ–∂–Ω–∞—è –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è –ø–µ—Å–Ω—è ‚ù§Ô∏è‚Äçüî•", "–í–µ—Å—ë–ª—ã–π –∏ –∂–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫üéâ", "–ì–ª—É–±–æ–∫–∞—è –∏ –ª–∏—Ä–∏—á–Ω–∞—è –º–µ–ª–æ–¥–∏—è üíì"]

            style_name = song_styles[i] if i < len(song_styles) else "–ì–ª—É–±–æ–∫–∞—è –∏ –ª–∏—Ä–∏—á–Ω–∞—è –º–µ–ª–æ–¥–∏—è üíì"

            

            if os.path.exists(audio_path):

                await message.answer_audio(

                    types.FSInputFile(audio_path),

                    caption=f"–ü—Ä–∏–º–µ—Ä {style_name.lower()}",

                    title=f"–ü—Ä–∏–º–µ—Ä {style_name.lower()}",

                    performer="BookAI Bot"

                )

            else:

                logging.warning(f"‚ö†Ô∏è –§–∞–π–ª –≥–æ–ª–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_path}")

                await message.answer(f"–ü—Ä–∏–º–µ—Ä {style_name.lower()} (—Ñ–∞–π–ª –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)")

        

        logging.info(f"üéµ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–º–µ—Ä—ã –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –≥–æ–ª–æ—Å–æ–≤: {e}")

        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä—ã –≥–æ–ª–æ—Å–æ–≤.")



# Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è waiting_recipient_name

async def handle_song_recipient_name_fallback(message: types.Message, state: FSMContext):

    """Fallback –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è waiting_recipient_name"""

    try:

        logging.info(f"üéµ Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ song_recipient_name –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        logging.info(f"üéµ –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: '{message.text}'")

        await state.update_data(song_recipient_name=message.text)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∫–∏

        await save_user_message_to_history(message, state, "–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–µ—Å–Ω–∏: ")

        

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è

        data = await state.get_data()

        order_id = data.get('order_id')

        if order_id:

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ first_name –∏ last_name

            first_name = data.get('first_name', '')

            last_name = data.get('last_name', '')

            sender_name = ""

            if first_name and first_name != 'None':

                sender_name = first_name

            if last_name and last_name != 'None':

                if sender_name:

                    sender_name += f" {last_name}"

                else:

                    sender_name = last_name

            

            order_data = {

                "product": "–ü–µ—Å–Ω—è",

                "user_gender": data.get('song_gender', ''),

                "song_relation": data.get('song_relation', ''),

                "song_recipient_name": message.text,

                "hero_name": message.text,  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏

                "song_gender": data.get('song_gender', ''),

                "username": data.get('username'),

                "first_name": data.get('first_name'),

                "last_name": data.get('last_name'),

                "sender_name": sender_name  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

            }

            await update_order_data(order_id, order_data)

            await update_order_status(order_id, "recipient_name_entered")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Å–Ω–∏
        product = data.get('product', '')
        if product != "–ü–µ—Å–Ω—è":
            logging.info(f"üîç –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤–æ–¥–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product}")
            return

        logging.info(f"üéµ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤–æ–¥–µ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

        try:

            await message.answer("–ù–∞–ø–∏—à–∏ –ø–æ –∫–∞–∫–æ–º—É –ø–æ–≤–æ–¥—É –º—ã —Å–æ–∑–¥–∞—ë–º –ø–µ—Å–Ω—é üé∂\n–ò–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –±–µ–∑ –ø–æ–≤–æ–¥–∞?")

            logging.info(f"üéµ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤–æ–¥–µ –ø–æ–¥–∞—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

        except Exception as send_error:

            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≤–æ–¥–µ: {send_error}")

            raise send_error

        

        await state.set_state(SongRelationStates.waiting_gift_reason)

        await log_state(message, state)

        logging.info(f"üéµ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ waiting_gift_reason –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_song_recipient_name_fallback: {e}")

        import traceback

        logging.error(f"‚ùå Traceback: {traceback.format_exc()}")

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



# Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è waiting_gift_reason

async def handle_song_gift_reason_fallback(message: types.Message, state: FSMContext):

    """Fallback –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è waiting_gift_reason"""

    try:

        logging.info(f"üéµ Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ song_gift_reason –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        logging.info(f"üéµ –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: '{message.text}'")

        await state.update_data(song_gift_reason=message.text)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∫–∏

        await save_user_message_to_history(message, state, "–ü–æ–≤–æ–¥ –ø–æ–¥–∞—Ä–∫–∞: ")

        

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –ø–æ–≤–æ–¥–æ–º –ø–æ–¥–∞—Ä–∫–∞

        data = await state.get_data()

        order_id = data.get('order_id')

        if order_id:

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ first_name –∏ last_name

            first_name = data.get('first_name', '')

            last_name = data.get('last_name', '')

            sender_name = ""

            if first_name and first_name != 'None':

                sender_name = first_name

            if last_name and last_name != 'None':

                if sender_name:

                    sender_name += f" {last_name}"

                else:

                    sender_name = last_name

            

            order_data = {

                "product": "–ü–µ—Å–Ω—è",

                "user_gender": data.get('song_gender', ''),

                "song_relation": data.get('song_relation', ''),

                "song_recipient_name": data.get('song_recipient_name', ''),

                "hero_name": data.get('song_recipient_name', ''),

                "song_gift_reason": message.text,

                "song_gender": data.get('song_gender', ''),

                "username": data.get('username'),

                "first_name": data.get('first_name'),

                "last_name": data.get('last_name'),

                "sender_name": sender_name

            }

            await update_order_data(order_id, order_data)

            await update_order_status(order_id, "gift_reason_entered")

        

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞

        await update_order_status(order_id, "voice_selection")

        

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª –∫–ª–∏–µ–Ω—Ç–∞

        user_gender = data.get('song_gender', '')

        

        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        from db import get_voice_styles

        voices = await get_voice_styles()

        

        if voices:

            # –í—ã–±–∏—Ä–∞–µ–º –≥–æ–ª–æ—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞

            selected_voice = None

            if user_gender == 'female':

                # –î–ª—è –∂–µ–Ω—â–∏–Ω –≤—ã–±–∏—Ä–∞–µ–º –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å

                for voice in voices:

                    if voice.get('gender') == 'male':

                        selected_voice = voice

                        break

            else:

                # –î–ª—è –º—É–∂—á–∏–Ω –≤—ã–±–∏—Ä–∞–µ–º –∂–µ–Ω—Å–∫–∏–π –≥–æ–ª–æ—Å

                for voice in voices:

                    if voice.get('gender') == 'female':

                        selected_voice = voice

                        break

            

            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≥–æ–ª–æ—Å, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π

            if not selected_voice and voices:

                selected_voice = voices[0]

            

            if selected_voice:

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

                first_name = data.get('first_name', '')

                last_name = data.get('last_name', '')

                sender_name = ""

                if first_name and first_name != 'None':

                    sender_name = first_name

                if last_name and last_name != 'None':

                    if sender_name:

                        sender_name += f" {last_name}"

                    else:

                        sender_name = last_name

                

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º

                order_data = {

                    "product": "–ü–µ—Å–Ω—è",

                    "user_gender": user_gender,

                    "song_relation": data.get('song_relation', ''),

                    "song_recipient_name": data.get('song_recipient_name', ''),

                    "hero_name": data.get('song_recipient_name', ''),

                    "song_gift_reason": message.text,

                    "song_gender": user_gender,

                    "song_voice": selected_voice['name'],

                    "song_voice_gender": selected_voice.get('gender', 'male'),

                    "username": data.get('username'),

                    "first_name": data.get('first_name'),

                    "last_name": data.get('last_name'),

                    "sender_name": sender_name

                }

                await update_order_data(order_id, order_data)

                

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–±—Ä–∞–Ω –ª–∏ —É–∂–µ —Å—Ç–∏–ª—å –ø–µ—Å–Ω–∏
                song_style = data.get('song_style')
                logging.info(f"üîç –û–¢–õ–ê–î–ö–ê: song_style = '{song_style}', user_id = {message.from_user.id}")
                if not song_style:
                    # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –≥–æ–ª–æ—Å–æ–≤ –∑–¥–µ—Å—å - –ø—É—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è song_gift_reason
                    logging.info(f"üéµ Fallback: –ø—Ä–∏–º–µ—Ä—ã –≥–æ–ª–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è song_gift_reason")
                else:
                    # –°—Ç–∏–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    logging.info(f"üéµ –°—Ç–∏–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

            else:

                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥–æ–ª–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        else:

            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≥–æ–ª–æ—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_song_gift_reason_fallback: {e}")

        import traceback

        logging.error(f"‚ùå Traceback: {traceback.format_exc()}")

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



# Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è collecting_facts

async def handle_song_facts_fallback(message: types.Message, state: FSMContext):

    """Fallback –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è collecting_facts"""

    try:

        logging.info(f"üéµ Fallback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ song_facts –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        logging.info(f"üéµ –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: '{message.text}'")

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∫–∏

        await save_user_message_to_history(message, state, "–§–∞–∫—Ç –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ: ")

        

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∞–∫—Ç—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

        data = await state.get_data()

        current_facts = data.get('song_facts', [])

        

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–∫—Ç

        current_facts.append(message.text)

        await state.update_data(song_facts=current_facts)

        

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å —Ñ–∞–∫—Ç–∞–º–∏

        order_id = data.get('order_id')

        if order_id:

            import json

            order_data = {

                "song_facts": json.dumps(current_facts, ensure_ascii=False)

            }

            await update_order_data(order_id, order_data)

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–∫—Ç–æ–≤

        if len(current_facts) >= 5:

            # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–∞–∫—Ç–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É

            await message.answer("–û—Ç–ª–∏—á–Ω–æ! –ú—ã —Å–æ–±—Ä–∞–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π –ø–µ—Å–Ω–∏ üéµ\n\n–¢–µ–ø–µ—Ä—å –º—ã –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏. –°–∫–æ—Ä–æ –≤–µ—Ä–Ω–µ–º—Å—è —Å –ø–µ—Ä–≤—ã–º–∏ –Ω–æ—Ç–∞–º–∏!")

            

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ–º–æ

            await state.set_state(SongDraftStates.waiting_for_demo)

            await update_order_status(order_id, "demo_content")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ–º–æ
            from db import create_or_update_user_timer
            await create_or_update_user_timer(message.from_user.id, order_id, "waiting_demo_song", "–ü–µ—Å–Ω—è")
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_demo_song, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}, –∑–∞–∫–∞–∑ {order_id}")

            logging.info(f"üéµ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ–∂–∏–¥–∞–Ω–∏—é –¥–µ–º–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        else:

            # –ù—É–∂–Ω–æ –µ—â–µ —Ñ–∞–∫—Ç–æ–≤

            remaining = 5 - len(current_facts)

            await message.answer(f"–°–ø–∞—Å–∏–±–æ! –£ –Ω–∞—Å —É–∂–µ {len(current_facts)} —Ñ–∞–∫—Ç–æ–≤. –ù—É–∂–Ω–æ –µ—â–µ {remaining} —Ñ–∞–∫—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–¥–µ–∞–ª—å–Ω–æ–π –ø–µ—Å–Ω–∏ üé∂\n\n–ü–æ–¥–µ–ª–∏—Å—å –µ—â–µ —á–µ–º-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω—ã–º –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ!")

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_song_facts_fallback: {e}")

        import traceback

        logging.error(f"‚ùå Traceback: {traceback.format_exc()}")

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



# --- –ì–ª–∞–≤–∞ 2.8. –ê–Ω–∫–µ—Ç–∞ –¥–ª—è –ø–µ—Å–Ω–∏ ---

@dp.message(StateFilter(SongFactsStates.collecting_facts))

async def song_facts_collect(message: types.Message, state: FSMContext):

    logging.info(f"üéµ song_facts_collect –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, —Ç–µ–∫—Å—Ç: '{message.text}'")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    order_id = data.get('order_id')
    if order_id:
        from db import add_message_history, create_or_update_order_notification
        await add_message_history(order_id, "user", message.text)
        await create_or_update_order_notification(order_id)
        logging.info(f"‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞ {order_id}: {message.text[:50]}...")

    facts = (await state.get_data()).get("song_facts", [])

    

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–∫—Ç–æ–≤

    text = message.text.strip()

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–æ–≤

    # –ò—â–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (–Ω–æ–º–µ—Ä–∞, –º–∞—Ä–∫–µ—Ä—ã, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫)

    if any(char in text for char in ['\n', '‚Ä¢', '-', '1.', '2.', '3.', '4.', '5.', '6.', '7.', '8.']) or re.search(r'\d+[a-z]?[\.\)]', text):

        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç—ã

        lines = text.split('\n')

        new_facts = []

        

        for line in lines:

            line = line.strip()

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

            if not line:

                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–æ–º–µ—Ä –≤ –Ω–∞—á–∞–ª–µ

            if re.match(r'^\d+[a-z]?[\.\)]', line):

                # –ï—Å–ª–∏ –¥–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å

                new_facts.append(line)

            else:

                # –£–±–∏—Ä–∞–µ–º –Ω–æ–º–µ—Ä–∞ –∏ –º–∞—Ä–∫–µ—Ä—ã –≤ –Ω–∞—á–∞–ª–µ —Å—Ç—Ä–æ–∫–∏ (–≤–∫–ª—é—á–∞—è —Ñ–æ—Ä–º–∞—Ç "1)a", "2)b", "1.", "1)" –∏ —Ç.–¥.)

                line = re.sub(r'^\d+[a-z]?[\.\)]?\s*', '', line)

                line = line.lstrip('0123456789.‚Ä¢- ')

                if line and len(line) > 0:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ñ–∞–∫—Ç–∞ (–ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—É—é –¥–ª–∏–Ω—É)

                    new_facts.append(line)

        

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        print(f"üîç –û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–∫—Ç–æ–≤: –Ω–∞–π–¥–µ–Ω–æ {len(new_facts)} —Ñ–∞–∫—Ç–æ–≤")

        print(f"üîç –û–¢–õ–ê–î–ö–ê: –§–∞–∫—Ç—ã: {new_facts}")

        

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤—Å–µ (–ø—Ä–æ–≤–µ—Ä—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã)

        if len(new_facts) > 1:

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º

            existing_facts = [f.strip().lower() for f in facts]

            unique_new_facts = []

            for fact in new_facts:

                if fact.strip().lower() not in existing_facts:

                    unique_new_facts.append(fact)

            

            if unique_new_facts:

                facts.extend(unique_new_facts)

                await state.update_data(song_facts=facts)

                await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ {len(unique_new_facts)} –Ω–æ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤.")

            else:

                await message.answer("–≠—Ç–∏ —Ñ–∞–∫—Ç—ã —É–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ.")

        elif len(new_facts) == 1:

            # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–∫—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ (–ø—Ä–æ–≤–µ—Ä—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã)

            existing_facts = [f.strip().lower() for f in facts]

            if new_facts[0].strip().lower() not in existing_facts:

                facts.append(new_facts[0])

                await state.update_data(song_facts=facts)

                await message.answer("–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")

            else:

                await message.answer("–≠—Ç–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")

            

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ —Å–ø–∏—Å–∫–æ–º

            unique_facts_temp = []

            for fact in facts:

                fact_clean = fact.strip().lower()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ–≤

                if fact_clean not in [f.strip().lower() for f in unique_facts_temp]:

                    unique_facts_temp.append(fact)

            

            if len(unique_facts_temp) >= 5 and len(unique_facts_temp) < 8:

                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞

                keyboard = InlineKeyboardMarkup(inline_keyboard=[

                    [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_with_5_facts")],

                    [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="add_more_facts")]

                ])

                

                await message.answer(

                    f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–æ–±—Ä–∞–ª–∏ {len(unique_facts_temp)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n"

                    "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë 1-3 –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏.",

                    reply_markup=keyboard

                )

                return

            elif len(unique_facts_temp) >= 8:

                # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —Ñ–∞–∫—Ç–æ–≤ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å

                keyboard = InlineKeyboardMarkup(inline_keyboard=[

                    [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_with_5_facts")]

                ])

                

                await message.answer(

                    f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–æ–±—Ä–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π ({len(unique_facts_temp)}).\n\n"

                    "–¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–µ—Å–Ω—é!",

                    reply_markup=keyboard

                )

                return

            else:

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ 5 —Ñ–∞–∫—Ç–æ–≤

                remaining = 5 - len(unique_facts_temp)

                

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å

                progress_text = f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {len(unique_facts_temp)}/5 –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ–±—Ä–∞–Ω–æ\n\n"

                

                if len(unique_facts_temp) > 0:

                    progress_text += "<b>–°–æ–±—Ä–∞–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"

                    for i, fact in enumerate(unique_facts_temp, 1):

                        # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

                        display_fact = fact[:50] + "..." if len(fact) > 50 else fact

                        progress_text += f"{i}. {display_fact}\n"

                    progress_text += "\n"

                

                if remaining == 1:

                    progress_text += f"–î–æ–±–∞–≤—å –µ—â—ë {remaining} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∞—à–µ–º –±–ª–∏–∑–∫–æ–º –∏–ª–∏ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ üß©\n"

                    progress_text += "–≠—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∏—á–Ω–æ–π –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π."

                elif remaining < 5:

                    progress_text += f"–î–æ–±–∞–≤—å –µ—â—ë {remaining} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∞—à–µ–º –±–ª–∏–∑–∫–æ–º –∏–ª–∏ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ üß©\n"

                    progress_text += "–≠—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∏—á–Ω–æ–π –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π."

                else:

                    progress_text += f"–î–æ–±–∞–≤—å –µ—â—ë {remaining} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–∞—à–µ–º –±–ª–∏–∑–∫–æ–º –∏–ª–∏ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ üß©\n"

                    progress_text += "–≠—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∏—á–Ω–æ–π –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π."

                

                await message.answer(progress_text, parse_mode="HTML")

                await log_state(message, state)

                return

        else:

            # –ï—Å–ª–∏ —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –Ω–æ –µ—Å—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω —Å –Ω–æ–º–µ—Ä–∞–º–∏, –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–±–∏—Ç—å –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é

            if re.search(r'\d+[a-z]?[\.\)]', text) and '\n' not in text:

                # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É "—á–∏—Å–ª–æ+–±—É–∫–≤–∞+—Ç–æ—á–∫–∞/—Å–∫–æ–±–∫–∞"

                matches = re.findall(r'\d+[a-z]?[\.\)]\s*([^0-9]*)', text)

                if len(matches) > 1:

                    new_facts = [match.strip() for match in matches if match.strip() and len(match.strip()) > 0]

                    if len(new_facts) > 1:

                        facts.extend(new_facts)

                        await state.update_data(song_facts=facts)

                        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_facts)} —Ñ–∞–∫—Ç–æ–≤.")

                        

                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ —Å–ø–∏—Å–∫–æ–º

                        unique_facts_temp = []

                        for fact in facts:

                            fact_clean = fact.strip().lower()

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ–≤

                            if fact_clean not in [f.strip().lower() for f in unique_facts_temp]:

                                unique_facts_temp.append(fact)

                        

                        if len(unique_facts_temp) >= 5:

                            await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –ø–µ—Å–Ω–∏.")

                            

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                            data = await state.get_data()

                            user_id = message.from_user.id

                            existing_order = await get_user_active_order(user_id, "–ü–µ—Å–Ω—è")

                            

                            if existing_order:

                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ

                                order_id = existing_order.get('id') if existing_order else None

                                await state.update_data(order_id=order_id)

                                

                                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ (—Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∞–¥–º–∏–Ω–∫–∏)

                                order_data = {

                                    "product": "–ü–µ—Å–Ω—è",

                                    "hero_name": data.get('song_recipient_name', ''),  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏

                                    "style": data.get('song_style', ''),  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏

                                    "answers": unique_facts_temp,  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏ (—Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ–≤)

                                    "song_gender": data.get('song_gender'),

                                    "song_relation": data.get('song_relation'),

                                    "song_recipient_name": data.get('song_recipient_name'),

                                    "song_gift_reason": data.get('song_gift_reason'),

                                    "song_style": data.get('song_style'),

                                    "song_quiz_special": data.get('song_quiz_special'),

                                    "song_quiz_memory": data.get('song_quiz_memory'),

                                    "song_facts": unique_facts_temp

                                }

                                

                                # –û–±–Ω–æ–≤–ª—è–µ–º order_data –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –∑–∞–∫–∞–∑–µ

                                await update_order_data(order_id, order_data)

                            else:

                                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ (—Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∞–¥–º–∏–Ω–∫–∏)

                                order_data = {

                                    "product": "–ü–µ—Å–Ω—è",

                                    "user_id": data.get('user_id'),

                                    "username": data.get('username'),

                                    "first_name": data.get('first_name'),

                                    "last_name": data.get('last_name'),

                                    "hero_name": data.get('song_recipient_name', ''),  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏

                                    "style": data.get('song_style', ''),  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏

                                    "answers": unique_facts_temp,  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏ (—Å–ø–∏—Å–æ–∫ —Ñ–∞–∫—Ç–æ–≤)

                                    "song_gender": data.get('song_gender'),

                                    "song_relation": data.get('song_relation'),

                                    "song_recipient_name": data.get('song_recipient_name'),

                                    "song_gift_reason": data.get('song_gift_reason'),

                                    "song_style": data.get('song_style'),

                                    "song_quiz_special": data.get('song_quiz_special'),

                                    "song_quiz_memory": data.get('song_quiz_memory'),

                                    "song_facts": unique_facts_temp

                                }

                                

                                order_id = await create_order(user_id, order_data)

                                await state.update_data(order_id=order_id)

                            

                            # –î–ª—è –ø–µ—Å–Ω–∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –æ–∂–∏–¥–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞

                            await update_order_status(order_id, "waiting_draft")

                            

                            # --- –ì–ª–∞–≤–∞ 2.5. –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∞—É–¥–∏–æ ---

                            await message.answer(f"üéô –í–∞—à–∞ –ø–µ—Å–Ω—è –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º ‚Ññ{order_id:04d} —É–∂–µ –≤ —Ä–∞–±–æ—Ç–µ üíå\n"

                            f"–ú—ã –±–µ—Ä–µ–∂–Ω–æ —Å–æ–±—Ä–∞–ª–∏ –≤–∞—à–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ —Ç–µ–ø–µ—Ä—å –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–µ–≤—Ä–∞—â–∞—Ç—å –∏—Ö –≤ –º—É–∑—ã–∫—É. –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –æ–Ω–∞ –æ–∂–∏–≤—ë—Ç üé∂")
                            
                            # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_full_song (–ì–ª–∞–≤–∞ 4: –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –ø–µ—Å–Ω–∏)
                            from db import create_or_update_user_timer
                            await create_or_update_user_timer(message.from_user.id, order_id, "waiting_full_song", "–ü–µ—Å–Ω—è")
                            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_full_song (–ì–ª–∞–≤–∞ 4), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id}, –∑–∞–∫–∞–∑ {order_id}")

                            

                            # --- –ì–ª–∞–≤–∞ 2.9. –û–∂–∏–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≥—Ä–µ–≤ ‚Äî –ø–ª–∞–Ω–∏—Ä—É–µ–º 1‚Äì2 —Å–æ–æ–±—â–µ–Ω–∏—è ---

                            try:

                                from db import add_delayed_message

                                # 1) –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Å–Ω–∏

                                await add_delayed_message(

                                    order_id=order_id,

                                    user_id=user_id,

                                    message_type="song_warming_example",

                                    content="üí° –û–¥–∏–Ω –∏–∑ –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤–∫–ª—é—á–∏–ª –ø–µ—Å–Ω—é –≤–æ –≤—Ä–µ–º—è —É–∂–∏–Ω–∞ —Å –∂–µ–Ω–æ–π. –ë—ã–ª–æ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ –¥–æ —Å–ª—ë–∑!",

                                    delay_minutes=1440  # —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞

                                )

                                # 2) –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

                                await add_delayed_message(

                                    order_id=order_id,

                                    user_id=user_id,

                                    message_type="song_warming_motivation",

                                    content="‚ú® –ü–µ—Å–Ω—è ‚Äî —ç—Ç–æ –±–æ–ª—å—à–µ, —á–µ–º –ø–æ–¥–∞—Ä–æ–∫. –≠—Ç–æ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ. –ò –º—ã –ø–æ—á—Ç–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏!",

                                    delay_minutes=2880  # —á–µ—Ä–µ–∑ 48 —á–∞—Å–æ–≤

                                )

                            except Exception as e:

                                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ–≤–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

                            

                            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ–º–æ-–∞—É–¥–∏–æ

                            await state.set_state(SongDraftStates.waiting_for_demo)

                            await log_state(message, state)

                            return

                        else:

                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ 5 —Ñ–∞–∫—Ç–æ–≤

                            remaining = 5 - len(unique_facts_temp)

                            

                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å

                            progress_text = f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {len(unique_facts_temp)}/5 –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ–±—Ä–∞–Ω–æ\n\n"

                            

                            if len(unique_facts_temp) > 0:

                                progress_text += "<b>–°–æ–±—Ä–∞–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"

                                for i, fact in enumerate(unique_facts_temp, 1):

                                    # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

                                    display_fact = fact[:50] + "..." if len(fact) > 50 else fact

                                    progress_text += f"{i}. {display_fact}\n"

                                progress_text += "\n"

                            

                            if remaining == 1:

                                progress_text += f"–î–æ–±–∞–≤—å –µ—â—ë {remaining} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∞—à–µ–º –±–ª–∏–∑–∫–æ–º –∏–ª–∏ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ üß©\n"

                                progress_text += "–≠—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∏—á–Ω–æ–π –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π."

                            elif remaining < 5:

                                progress_text += f"–î–æ–±–∞–≤—å –µ—â—ë {remaining} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∞—à–µ–º –±–ª–∏–∑–∫–æ–º –∏–ª–∏ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ üß©\n"

                                progress_text += "–≠—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∏—á–Ω–æ–π –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π."

                            else:

                                progress_text += f"–î–æ–±–∞–≤—å –µ—â—ë {remaining} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–∞—à–µ–º –±–ª–∏–∑–∫–æ–º –∏–ª–∏ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ üß©\n"

                                progress_text += "–≠—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∏—á–Ω–æ–π –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π."

                            

                            await message.answer(progress_text, parse_mode="HTML")

                            await log_state(message, state)

                            return

                    else:

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º

                        existing_facts = [f.strip().lower() for f in facts]

                        if text.strip().lower() not in existing_facts:

                            facts.append(text)

                            await state.update_data(song_facts=facts)

                            await message.answer("–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")

                        else:

                            await message.answer("–≠—Ç–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")

                else:

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º

                    existing_facts = [f.strip().lower() for f in facts]

                    if text.strip().lower() not in existing_facts:

                        facts.append(text)

                        await state.update_data(song_facts=facts)

                        await message.answer("–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")

                    else:

                        await message.answer("–≠—Ç–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")

            else:

                # –ï—Å–ª–∏ —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–µ –¥–∞–ª–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–¥–∏–Ω —Ñ–∞–∫—Ç (–ø—Ä–æ–≤–µ—Ä—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã)

                existing_facts = [f.strip().lower() for f in facts]

                if text.strip().lower() not in existing_facts:

                    facts.append(text)

                    await state.update_data(song_facts=facts)

                    await message.answer("–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")

                else:

                    await message.answer("–≠—Ç–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")

    else:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω —Å –±—É–∫–≤–∞–º–∏ –±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫

        if re.search(r'\d+[a-z]?[\.\)]', text):

            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ "—á–∏—Å–ª–æ+–±—É–∫–≤–∞+—Ç–æ—á–∫–∞/—Å–∫–æ–±–∫–∞"

            matches = re.findall(r'\d+[a-z]?[\.\)]\s*([^0-9]*)', text)

            new_facts = []

            for i, match in enumerate(matches):

                match = match.strip()

                if match and len(match) > 0:  # –î–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ —Ç–∏–ø–∞ "a", "b", "c" –ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—É—é –¥–ª–∏–Ω—É

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–º–µ—Ä –∫ —Ñ–∞–∫—Ç—É

                    new_facts.append(f"{i+1}){match}")

            

            if len(new_facts) > 1:

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è—é—Ç—Å—è –ª–∏ –≤—Å–µ —Ñ–∞–∫—Ç—ã –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–∞–º–∏

                all_numbers = all(re.match(r'^\d+$', fact.strip()) for fact in new_facts)

                if all_numbers:

                    # –ï—Å–ª–∏ –≤—Å–µ —Ñ–∞–∫—Ç—ã - —á–∏—Å–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫–∞–∫ –µ—Å—Ç—å

                    facts.extend([fact.strip() for fact in new_facts])

                else:

                    # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º —Å –Ω–æ–º–µ—Ä–∞–º–∏

                    facts.extend(new_facts)

                await state.update_data(song_facts=facts)

                await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ {len(new_facts)} —Ñ–∞–∫—Ç–æ–≤.")

                

                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ —Å–ø–∏—Å–∫–æ–º

                unique_facts_temp = []

                for fact in facts:

                    if re.match(r'^\d+[a-z]?[\.\)]', fact):

                        unique_facts_temp.append(fact)

                    else:

                        fact_clean = fact.strip().lower()

                        if fact_clean not in [f.strip().lower() for f in unique_facts_temp]:

                            unique_facts_temp.append(fact)

                

                if len(unique_facts_temp) >= 5 and len(unique_facts_temp) < 8:

                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞

                    keyboard = InlineKeyboardMarkup(inline_keyboard=[

                        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_with_5_facts")],

                        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="add_more_facts")]

                    ])

                    

                    await message.answer(

                        f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–æ–±—Ä–∞–ª–∏ {len(unique_facts_temp)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n"

                        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë 1-3 –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏.",

                        reply_markup=keyboard

                    )

                    return

                elif len(unique_facts_temp) >= 8:

                    # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —Ñ–∞–∫—Ç–æ–≤ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å

                    keyboard = InlineKeyboardMarkup(inline_keyboard=[

                        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_with_5_facts")]

                    ])

                    

                    await message.answer(

                        f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–æ–±—Ä–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π ({len(unique_facts_temp)}).\n\n"

                        "–¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–µ—Å–Ω—é!",

                        reply_markup=keyboard

                    )

                    return

                else:

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –µ—Å–ª–∏ –µ—â–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–ª–∏ 5 —Ñ–∞–∫—Ç–æ–≤

                    remaining = 5 - len(unique_facts_temp)

                    

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å

                    progress_text = f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {len(unique_facts_temp)}/5 –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ–±—Ä–∞–Ω–æ\n\n"

                    

                    if len(unique_facts_temp) > 0:

                        progress_text += "<b>–°–æ–±—Ä–∞–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"

                        for i, fact in enumerate(unique_facts_temp, 1):

                            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

                            display_fact = fact[:50] + "..." if len(fact) > 50 else fact

                            progress_text += f"{i}. {display_fact}\n"

                        progress_text += "\n"

                    

                    if remaining == 1:

                        progress_text += f"–î–æ–±–∞–≤—å –µ—â—ë {remaining} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∞—à–µ–º –±–ª–∏–∑–∫–æ–º –∏–ª–∏ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ üß©\n"

                        progress_text += "–≠—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∏—á–Ω–æ–π –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π."

                    elif remaining < 5:

                        progress_text += f"–î–æ–±–∞–≤—å –µ—â—ë {remaining} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∞—à–µ–º –±–ª–∏–∑–∫–æ–º –∏–ª–∏ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ üß©\n"

                        progress_text += "–≠—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∏—á–Ω–æ–π –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π."

                    else:

                        progress_text += f"–î–æ–±–∞–≤—å –µ—â—ë {remaining} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–∞—à–µ–º –±–ª–∏–∑–∫–æ–º –∏–ª–∏ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ üß©\n"

                        progress_text += "–≠—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∏—á–Ω–æ–π –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π."

                    

                    await message.answer(progress_text, parse_mode="HTML")

                    await log_state(message, state)

                    return

            else:

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º

                existing_facts = [f.strip().lower() for f in facts]

                if text.strip().lower() not in existing_facts:

                    facts.append(text)

                    await state.update_data(song_facts=facts)

                    await message.answer("–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")

                else:

                    await message.answer("–≠—Ç–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–ª–∏–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏

        elif len(text.split('.')) > 2 and len(text) > 100:

            # –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–∫—Ç–æ–≤ –≤ –æ–¥–Ω–æ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏

            # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –∑–∞–ø—è—Ç—ã–º –∏–ª–∏ –¥—Ä—É–≥–∏–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º

            parts = text.split(',')

            if len(parts) > 2:

                new_facts = []

                for part in parts:

                    part = part.strip()

                    if part and len(part) > 0:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è —Ñ–∞–∫—Ç–∞ (–ø—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±—É—é –¥–ª–∏–Ω—É)

                        new_facts.append(part)

                

                if len(new_facts) > 1:

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º

                    existing_facts = [f.strip().lower() for f in facts]

                    unique_new_facts = []

                    for fact in new_facts:

                        if fact.strip().lower() not in existing_facts:

                            unique_new_facts.append(fact)

                    

                    if unique_new_facts:

                        facts.extend(unique_new_facts)

                        await state.update_data(song_facts=facts)

                        await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ {len(unique_new_facts)} –Ω–æ–≤—ã—Ö —Ñ–∞–∫—Ç–æ–≤.")

                    else:

                        await message.answer("–≠—Ç–∏ —Ñ–∞–∫—Ç—ã —É–∂–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ.")

                else:

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º

                    existing_facts = [f.strip().lower() for f in facts]

                    if text.strip().lower() not in existing_facts:

                        facts.append(text)

                        await state.update_data(song_facts=facts)

                        await message.answer("–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")

                    else:

                        await message.answer("–≠—Ç–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")

            else:

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º

                existing_facts = [f.strip().lower() for f in facts]

                if text.strip().lower() not in existing_facts:

                    facts.append(text)

                    await state.update_data(song_facts=facts)

                    await message.answer("–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")

                else:

                    await message.answer("–≠—Ç–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")

        else:

            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –¥–æ–±–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–¥–∏–Ω —Ñ–∞–∫—Ç (–ø—Ä–æ–≤–µ—Ä—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã)

            existing_facts = [f.strip().lower() for f in facts]

            if text.strip().lower() not in existing_facts:

                facts.append(text)

                await state.update_data(song_facts=facts)

                await message.answer("–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ‚úÖ")

            else:

                await message.answer("–≠—Ç–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ —Ä–∞–Ω–µ–µ")

    

    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è —Ñ–∞–∫—Ç—ã

    unique_facts = []

    for fact in facts:

        fact_clean = fact.strip().lower()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ–≤

        if fact_clean not in [f.strip().lower() for f in unique_facts]:

            unique_facts.append(fact)

    

    await state.update_data(song_facts=unique_facts)

    

    if len(unique_facts) >= 5 and len(unique_facts) < 8:

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="continue_with_5_facts")],

            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="add_more_facts")]

        ])

        

        await message.answer(

            f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–æ–±—Ä–∞–ª–∏ {len(unique_facts)} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π.\n\n"

            "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë 1-3 –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –±–æ–ª–µ–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–µ—Å–Ω–∏.",

            reply_markup=keyboard

        )

        return

    elif len(unique_facts) >= 8:

        # –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —Ñ–∞–∫—Ç–æ–≤ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å 8 —Ñ–∞–∫—Ç–∞–º–∏", callback_data="continue_with_5_facts")]

        ])

        

        await message.answer(

            f"üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã —Å–æ–±—Ä–∞–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π ({len(unique_facts)}).\n\n"

            "–¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø–µ—Å–Ω—é!",

            reply_markup=keyboard

        )

        return

    else:

        remaining = 5 - len(unique_facts)

        

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å

        progress_text = f"üìä <b>–ü—Ä–æ–≥—Ä–µ—Å—Å:</b> {len(unique_facts)}/5 –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ–±—Ä–∞–Ω–æ\n\n"

        

        if len(unique_facts) > 0:

            progress_text += "<b>–°–æ–±—Ä–∞–Ω–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è:</b>\n"

            for i, fact in enumerate(unique_facts, 1):

                # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

                display_fact = fact[:50] + "..." if len(fact) > 50 else fact

                progress_text += f"{i}. {display_fact}\n"

            progress_text += "\n"

        

        if remaining == 1:

            progress_text += f"–î–æ–±–∞–≤—å –µ—â—ë {remaining} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≤–∞—à–µ–º –±–ª–∏–∑–∫–æ–º –∏–ª–∏ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ üß©\n"

            progress_text += "–≠—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∏—á–Ω–æ–π –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π."

        elif remaining < 5:

            progress_text += f"–î–æ–±–∞–≤—å –µ—â—ë {remaining} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤–∞—à–µ–º –±–ª–∏–∑–∫–æ–º –∏–ª–∏ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ üß©\n"

            progress_text += "–≠—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∏—á–Ω–æ–π –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π."

        else:

            progress_text += f"–î–æ–±–∞–≤—å –µ—â—ë {remaining} –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –≤–∞—à–µ–º –±–ª–∏–∑–∫–æ–º –∏–ª–∏ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ üß©\n"

            progress_text += "–≠—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–º–æ–≥—É—Ç –Ω–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ª–∏—á–Ω–æ–π –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π."

        

        await message.answer(progress_text, parse_mode="HTML")

        await log_state(message, state)



# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ –ø–µ—Å–Ω–µ ---

@dp.message(StateFilter(SongFinalStates.collecting_feedback))

async def save_song_feedback(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    data = await state.get_data()

    feedback = data.get("song_feedback", [])

    feedback.append(message.text)

    await state.update_data(song_feedback=feedback)

    

    await message.answer(

        "‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏!\n"

        "–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥ –ø—Ä–∞–≤–∫–∞–º–∏, —á—Ç–æ–±—ã –ø–µ—Å–Ω—è –∑–∞–∑–≤—É—á–∞–ª–∞ –∏–º–µ–Ω–Ω–æ —Ç–∞–∫, –∫–∞–∫ –≤—ã –º–µ—á—Ç–∞–ª–∏ ‚ú® –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–∞–º —Å–æ–æ–±—â–∏–º! üíû"

    )

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é

    order_id = data.get('order_id')

    await add_outbox_task(

        order_id=order_id,

        user_id=message.from_user.id,

        type_="manager_notification",

        content=f"–ó–∞–∫–∞–∑ #{order_id}: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Å–Ω–∏: {message.text}"

    )

    try:

        from db import add_message_history

        await add_message_history(order_id, sender="user", message=f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —á–µ—Ä–Ω–æ–≤–∏–∫—É: {message.text}")

    except Exception:

        pass

    

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

    await update_order_status(order_id, "editing")

    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞

    await state.set_state(SongDraftStates.waiting_for_draft)

    await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ–º–æ —É–¥–∞–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è receive_song_demo



# –£–ë–†–ê–ù–û: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞



# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

async def save_user_message_to_history(message: types.Message, state: FSMContext, context: str = ""):

    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞"""

    try:

        data = await state.get_data()

        order_id = data.get('order_id')

        

        if order_id and message.text:

            from db import add_message_history, create_or_update_order_notification

            message_text = f"{context}{message.text}" if context else message.text

            await add_message_history(order_id, "user", message_text)

            

            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞

            await create_or_update_order_notification(order_id)

            logging.info(f"‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞ {order_id}: {message_text[:50]}...")

            print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞ {order_id}: {message_text}")

            print(f"üîî –û–¢–õ–ê–î–ö–ê: –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

        elif message.text:

            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–∞ –µ—â–µ –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞

            from db import save_early_user_message

            message_text = f"{context}{message.text}" if context else message.text

            await save_early_user_message(message.from_user.id, message_text)

            logging.info(f"üìù –°–û–•–†–ê–ù–ï–ù–û: –†–∞–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message_text[:50]}...")

            print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–∞–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message_text}")

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")

        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")



# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞

def extract_page_description(caption: str) -> str:

    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""

    if not caption:

        return "–°—Ç—Ä–∞–Ω–∏—Ü–∞"

    

    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–°—Ç—Ä–∞–Ω–∏—Ü–∞ 2")

    page_match = re.search(r'–°—Ç—Ä–∞–Ω–∏—Ü–∞\s+(\d+)', caption)

    if page_match:

        page_number = page_match.group(1)

        return f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number}"

    

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–æ–º–µ—Ä, –∏—â–µ–º –ª—é–±—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∏–∫–æ–Ω–∫–∏ –¥–æ –ø–µ—Ä–≤–æ–≥–æ \n\n

    lines = caption.split('\n\n')

    if len(lines) > 0:

        first_line = lines[0]

        # –£–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫–∏ –∏–∑ –Ω–∞—á–∞–ª–∞ —Å—Ç—Ä–æ–∫–∏

        clean_line = re.sub(r'^[üìñüì∏‚úÖ‚ùå]+\s*', '', first_line).strip()

        if clean_line:

            return clean_line

    

    return "–°—Ç—Ä–∞–Ω–∏—Ü–∞"



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞

async def update_all_page_messages(chat_id: int, state: FSMContext):

    """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞"""

    try:

        data = await state.get_data()

        order_id = data.get('order_id')

        selected_pages = data.get(f"selected_pages_{order_id}", [])

        

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü

        # –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Ö –∫–Ω–æ–ø–æ–∫

        

        print(f"üîç –û–¢–õ–ê–î–ö–ê: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —á–∞—Ç–∞ {chat_id}")

        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order_id}, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {selected_pages}")

        

        # –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü

        # –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Ö –∫–Ω–æ–ø–æ–∫, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤—ã–±–æ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω

        

        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º - –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç

        # –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –æ–±–Ω–æ–≤–∏—Ç—å –∏—Ö –∫–Ω–æ–ø–∫–∏

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ update_all_page_messages: {e}")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü

@dp.callback_query(F.data == "finish_page_selection")

async def finish_page_selection_callback(callback: types.CallbackQuery, state: FSMContext):

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É

        current_state = await state.get_state()

        if current_state and current_state != "BookFinalStates:choosing_pages":

            await callback.answer("‚ùå –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.")

            return

        

        data = await state.get_data()

        order_id = data.get('order_id')

        selected_pages = data.get(f"selected_pages_{order_id}", [])

        selected_count = len(selected_pages)

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–æ —Ä–æ–≤–Ω–æ 24 —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        if selected_count != 24:

            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–≤–Ω–æ 24 —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∑–∞—Ç–µ–º –∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤—ã–±–æ—Ä.")

            return

        

        await callback.answer()

        

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        await callback.message.edit_caption(

            caption=f"üéâ <b>–í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"

                   f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {selected_count}/24\n"

                   f"üìö –í–∞—à–∞ –∫–Ω–∏–≥–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å {selected_count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü\n\n"

                   f"–í–∞—à –≤—ã–±–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–∞–Ω–¥–µ —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–Ω–∏–≥–∏!",

            parse_mode="HTML"

        )

        

        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞

        await state.update_data({f"page_selection_finished_{order_id}": True})

        

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü

        await update_all_page_messages(callback.message.chat.id, state)

        

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏

        await show_first_last_page_selection(callback.message, state)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ finish_page_selection_callback: {e}")

        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    

    await log_state(callback.message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"

@dp.callback_query(F.data == "continue_book_creation")

async def continue_book_creation_callback(callback: types.CallbackQuery, state: FSMContext):

    try:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É

        current_state = await state.get_state()

        if current_state and current_state != "BookFinalStates:choosing_pages":

            await callback.answer("‚ùå –í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.")

            return

        

        data = await state.get_data()

        order_id = data.get('order_id')

        selected_pages = data.get(f"selected_pages_{order_id}", [])

        selected_count = len(selected_pages)

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–æ —Ä–æ–≤–Ω–æ 24 —Å—Ç—Ä–∞–Ω–∏—Ü—ã

        if selected_count != 24:

            await callback.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–≤–Ω–æ 24 —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∑–∞—Ç–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏.")

            return

        

        await callback.answer("üéâ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –∫–Ω–∏–≥–∏!")

        

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        await callback.message.edit_text(

            f"üéâ <b>–í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"

            f"‚úÖ –í—ã–±—Ä–∞–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü: {selected_count}/24\n"

            f"üìö –í–∞—à–∞ –∫–Ω–∏–≥–∞ –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å {selected_count} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü\n\n"

            f"–í–∞—à –≤—ã–±–æ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–∞–Ω–¥–µ —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π –∫–Ω–∏–≥–∏!",

            parse_mode="HTML"

        )

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        if order_id:

            await save_selected_pages(order_id, selected_pages)

            print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {selected_pages}")

        

        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞

        await state.update_data({f"page_selection_finished_{order_id}": True})

        

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü

        await update_all_page_messages(callback.message.chat.id, state)

        

        # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–Ω–∏–≥–∏

        await show_first_last_page_selection(callback.message, state)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ continue_book_creation_callback: {e}")

        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    

    await log_state(callback.message, state)





# --- –ì–ª–∞–≤–∞ 2.1. –í—ã–±–æ—Ä –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ü–µ—Å–Ω—è) ---

@dp.callback_query(F.data.in_(["song_gender_female", "song_gender_male"]))

async def song_gender_chosen(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    gender = "–¥–µ–≤—É—à–∫–∞" if callback.data == "song_gender_female" else "–ø–∞—Ä–µ–Ω—å"

    await state.update_data(song_gender=gender)

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –µ–≥–æ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    data = await state.get_data()

    if not data.get('first_name'):

        await callback.message.edit_text("–ü–æ–¥–µ–ª–∏—Å—å, –∫–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç üíå –ù–∞–º –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å, —á—Ç–æ–±—ã –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ —Ç–µ–±–µ –ª–∏—á–Ω–æ")

        await state.set_state(UserDataStates.waiting_first_name)

        await state.update_data(after_name_input="song_relation")

        await log_state(callback.message, state)

        return

    

    # –ï—Å–ª–∏ –∏–º—è –µ—Å—Ç—å - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è

    await show_song_relation_choice(callback.message, state, gender)



async def show_song_relation_choice(message, state, gender):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Å–Ω–∏ (–¥–ª—è callback)"""

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª–∞

    data = await state.get_data()

    order_id = data.get('order_id')

    if order_id:

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ first_name

        first_name = data.get('first_name', '')

        sender_name = first_name if first_name and first_name != 'None' else ""

        

        order_data = {

            "product": "–ü–µ—Å–Ω—è",

            "user_gender": gender,

            "song_gender": gender,

            "username": data.get('username'),

            "first_name": data.get('first_name'),

            "last_name": data.get('last_name'),

            "sender_name": sender_name  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

        }

        await update_order_data(order_id, order_data)

        await update_order_status(order_id, "gender_selected")

    

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è

    if gender == "–ø–∞—Ä–µ–Ω—å":

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="–õ—é–±–∏–º–æ–π", callback_data="song_rel_to_man")],

            [InlineKeyboardButton(text="–ú–∞–º–µ", callback_data="song_rel_to_mom")],

            [InlineKeyboardButton(text="–ü–∞–ø–µ", callback_data="song_rel_to_dad")],

            [InlineKeyboardButton(text="–î–æ—á–µ—Ä–∏", callback_data="song_rel_to_daughter")],

            [InlineKeyboardButton(text="–î–µ–≤—É—à–∫–µ", callback_data="song_rel_to_girlfriend")],

            [InlineKeyboardButton(text="–ë–∞–±—É—à–∫–µ", callback_data="song_rel_to_grandma")],

            [InlineKeyboardButton(text="–î–µ–¥—É—à–∫–µ", callback_data="song_rel_to_grandpa")],

            [InlineKeyboardButton(text="–°–µ—Å—Ç—Ä–µ", callback_data="song_rel_to_sister")],

            [InlineKeyboardButton(text="–ë—Ä–∞—Ç—É", callback_data="song_rel_to_brother")],

            [InlineKeyboardButton(text="–°—ã–Ω—É", callback_data="song_rel_to_son")],

        ])

    else:

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="–õ—é–±–∏–º–æ–º—É", callback_data="song_rel_to_man")],

            [InlineKeyboardButton(text="–ú–∞–º–µ", callback_data="song_rel_to_mom")],

            [InlineKeyboardButton(text="–ü–∞–ø–µ", callback_data="song_rel_to_dad")],

            [InlineKeyboardButton(text="–î–æ—á–µ—Ä–∏", callback_data="song_rel_to_daughter")],

            [InlineKeyboardButton(text="–ü–æ–¥—Ä—É–≥–µ", callback_data="song_rel_to_girlfriend")],

            [InlineKeyboardButton(text="–ë–∞–±—É—à–∫–µ", callback_data="song_rel_to_grandma")],

            [InlineKeyboardButton(text="–î–µ–¥—É—à–∫–µ", callback_data="song_rel_to_grandpa")],

            [InlineKeyboardButton(text="–°–µ—Å—Ç—Ä–µ", callback_data="song_rel_to_sister")],

            [InlineKeyboardButton(text="–ë—Ä–∞—Ç—É", callback_data="song_rel_to_brother")],

            [InlineKeyboardButton(text="–°—ã–Ω—É", callback_data="song_rel_to_son")],

        ])

    await message.edit_text("–ö–∞–∂–¥—É—é –ø–µ—Å–Ω—é –º—ã –¥–µ–ª–∞–µ–º —Å –∑–∞–±–æ—Ç–æ–π –æ —Ç–æ–º, –∫—Ç–æ –µ—ë –ø–æ–ª—É—á–∏—Ç üíñ\n–ü–æ–¥—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –∫–æ–≥–æ –º—ã —Å–æ–∑–¥–∞—ë–º —Ç–≤–æ—é –ø–µ—Å–Ω—é:", reply_markup=keyboard)

    await state.set_state(SongRelationStates.choosing_relation)

    await log_state(message, state)



async def show_song_relation_choice_after_name(message, state, gender):

    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Å–Ω–∏ (–ø–æ—Å–ª–µ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏)"""

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª–∞

    data = await state.get_data()

    order_id = data.get('order_id')

    if order_id:

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ first_name

        first_name = data.get('first_name', '')

        sender_name = first_name if first_name and first_name != 'None' else ""

        

        order_data = {

            "product": "–ü–µ—Å–Ω—è",

            "user_gender": gender,

            "song_gender": gender,

            "username": data.get('username'),

            "first_name": data.get('first_name'),

            "last_name": data.get('last_name'),

            "sender_name": sender_name  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

        }

        await update_order_data(order_id, order_data)

        await update_order_status(order_id, "gender_selected")

    

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è

    if gender == "–ø–∞—Ä–µ–Ω—å":

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="–õ—é–±–∏–º–æ–π", callback_data="song_rel_to_man")],

            [InlineKeyboardButton(text="–ú–∞–º–µ", callback_data="song_rel_to_mom")],

            [InlineKeyboardButton(text="–ü–∞–ø–µ", callback_data="song_rel_to_dad")],

            [InlineKeyboardButton(text="–î–æ—á–µ—Ä–∏", callback_data="song_rel_to_daughter")],

            [InlineKeyboardButton(text="–î–µ–≤—É—à–∫–µ", callback_data="song_rel_to_girlfriend")],

            [InlineKeyboardButton(text="–ë–∞–±—É—à–∫–µ", callback_data="song_rel_to_grandma")],

            [InlineKeyboardButton(text="–î–µ–¥—É—à–∫–µ", callback_data="song_rel_to_grandpa")],

            [InlineKeyboardButton(text="–°–µ—Å—Ç—Ä–µ", callback_data="song_rel_to_sister")],

            [InlineKeyboardButton(text="–ë—Ä–∞—Ç—É", callback_data="song_rel_to_brother")],

            [InlineKeyboardButton(text="–°—ã–Ω—É", callback_data="song_rel_to_son")],

        ])

    else:

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="–õ—é–±–∏–º–æ–º—É", callback_data="song_rel_to_man")],

            [InlineKeyboardButton(text="–ú–∞–º–µ", callback_data="song_rel_to_mom")],

            [InlineKeyboardButton(text="–ü–∞–ø–µ", callback_data="song_rel_to_dad")],

            [InlineKeyboardButton(text="–î–æ—á–µ—Ä–∏", callback_data="song_rel_to_daughter")],

            [InlineKeyboardButton(text="–ü–æ–¥—Ä—É–≥–µ", callback_data="song_rel_to_girlfriend")],

            [InlineKeyboardButton(text="–ë–∞–±—É—à–∫–µ", callback_data="song_rel_to_grandma")],

            [InlineKeyboardButton(text="–î–µ–¥—É—à–∫–µ", callback_data="song_rel_to_grandpa")],

            [InlineKeyboardButton(text="–°–µ—Å—Ç—Ä–µ", callback_data="song_rel_to_sister")],

            [InlineKeyboardButton(text="–ë—Ä–∞—Ç—É", callback_data="song_rel_to_brother")],

            [InlineKeyboardButton(text="–°—ã–Ω—É", callback_data="song_rel_to_son")],

        ])

    await message.answer("–ö–∞–∂–¥—É—é –ø–µ—Å–Ω—é –º—ã –¥–µ–ª–∞–µ–º —Å –∑–∞–±–æ—Ç–æ–π –æ —Ç–æ–º, –∫—Ç–æ –µ—ë –ø–æ–ª—É—á–∏—Ç üíñ\n–ü–æ–¥—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª—è –∫–æ–≥–æ –º—ã —Å–æ–∑–¥–∞—ë–º —Ç–≤–æ—é –ø–µ—Å–Ω—é:", reply_markup=keyboard)

    await state.set_state(SongRelationStates.choosing_relation)

    await log_state(message, state)



# --- –ì–ª–∞–≤–∞ 2.2. –í—ã–±–æ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏ –ø–æ–≤–æ–¥–∞ (–ü–µ—Å–Ω—è) ---

@dp.callback_query(F.data.startswith("song_rel_to_"))

async def song_relation_chosen(callback: types.CallbackQuery, state: FSMContext):

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –º–∞–ø–ø–∏–Ω–≥–∞
    data = await state.get_data()
    gender = data.get('song_gender', '')

    relations = {

        "song_rel_to_man": "–õ—é–±–∏–º–æ–º—É",

        "song_rel_to_mom": "–ú–∞–º–µ",

        "song_rel_to_dad": "–ü–∞–ø–µ",

        "song_rel_to_girlfriend": "–î–µ–≤—É—à–∫–µ" if gender == "–ø–∞—Ä–µ–Ω—å" else "–ü–æ–¥—Ä—É–≥–µ",  # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        "song_rel_to_grandma": "–ë–∞–±—É—à–∫–µ",

        "song_rel_to_grandpa": "–î–µ–¥—É—à–∫–µ",

        "song_rel_to_sister": "–°–µ—Å—Ç—Ä–µ",

        "song_rel_to_brother": "–ë—Ä–∞—Ç—É",

        "song_rel_to_son": "–°—ã–Ω—É",

        "song_rel_to_daughter": "–î–æ—á–µ—Ä–∏",

        "song_rel_to_woman": "–õ—é–±–∏–º–æ–π",

        "song_rel_to_boyfriend": "–ü–∞—Ä–Ω—é",

    }

    relation = relations.get(callback.data, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å —É—á–µ—Ç–æ–º –ø–æ–ª–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    def get_mapped_relation_for_song_save(relation, gender):
        if relation == "–î–µ–¥—É—à–∫–µ":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–í–Ω—É–∫ - –¥–µ–¥—É—à–∫–µ"
            else:
                return "–í–Ω—É—á–∫–∞ - –¥–µ–¥—É—à–∫–µ"
        elif relation == "–ë–∞–±—É—à–∫–µ":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–í–Ω—É–∫ - –±–∞–±—É—à–∫–µ"
            else:
                return "–í–Ω—É—á–∫–∞ - –±–∞–±—É—à–∫–µ"
        elif relation == "–ú–∞–º–µ":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–°—ã–Ω ‚Äì –º–∞–º–µ"
            else:
                return "–î–æ—á–∫–∞- –º–∞–º–µ"
        elif relation == "–ü–∞–ø–µ":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–°—ã–Ω ‚Äì –ø–∞–ø–µ"
            else:
                return "–î–æ—á–∫–∞- –ø–∞–ø–µ"
        elif relation == "–°—ã–Ω—É":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–ü–∞–ø–∞ - —Å—ã–Ω—É"
            else:
                return "–ú–∞–º–∞ - —Å—ã–Ω—É"
        elif relation == "–î–æ—á–∫–µ" or relation == "–î–æ—á–µ—Ä–∏":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–ü–∞–ø–∞ - –¥–æ—á–∫–µ"
            else:
                return "–ú–∞–º–∞ - –¥–æ—á–∫–µ"
        elif relation == "–ë—Ä–∞—Ç—É":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–ë—Ä–∞—Ç - –±—Ä–∞—Ç—É"
            else:
                return "–°–µ—Å—Ç—Ä–∞ - –±—Ä–∞—Ç—É"
        elif relation == "–°–µ—Å—Ç—Ä–µ":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–ë—Ä–∞—Ç ‚Äì —Å–µ—Å—Ç—Ä–µ"
            else:
                return "–°–µ—Å—Ç—Ä–∞ - —Å–µ—Å—Ç—Ä–µ"
        elif relation == "–ü–∞—Ä–Ω—é":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–ü–∞—Ä–µ–Ω—å - –¥–µ–≤—É—à–∫–µ"
            else:
                return "–î–µ–≤—É—à–∫–∞ - –ø–∞—Ä–Ω—é"
        elif relation == "–î–µ–≤—É—à–∫–µ":
            # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if gender == "–º–∞–ª—å—á–∏–∫" or gender == "–ø–∞—Ä–µ–Ω—å":
                return "–ü–∞—Ä–µ–Ω—å - –¥–µ–≤—É—à–∫–µ"
            else:
                return "–î–µ–≤—É—à–∫–∞ - –ø–∞—Ä–Ω—é"
        elif relation == "–ú—É–∂—É":
            return "–ñ–µ–Ω–∞ - –º—É–∂—É"
        elif relation == "–ñ–µ–Ω–µ":
            return "–ú—É–∂ - –∂–µ–Ω–µ"
        else:
            return relation

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å —É—á–µ—Ç–æ–º –ø–æ–ª–∞
    mapped_relation = get_mapped_relation_for_song_save(relation, gender)
    
    await state.update_data(song_relation=mapped_relation)

    

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è

    data = await state.get_data()

    order_id = data.get('order_id')

    if order_id:

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ first_name –∏ last_name

        first_name = data.get('first_name', '')

        last_name = data.get('last_name', '')

        sender_name = ""

        if first_name and first_name != 'None':

            sender_name = first_name

        if last_name and last_name != 'None':

            if sender_name:

                sender_name += f" {last_name}"

            else:

                sender_name = last_name

        

        order_data = {

            "product": "–ü–µ—Å–Ω—è",

            "user_gender": data.get('song_gender', ''),

            "song_relation": relation,

            "song_gender": data.get('song_gender', ''),

            "username": data.get('username'),

            "first_name": data.get('first_name'),

            "last_name": data.get('last_name'),

            "sender_name": sender_name  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

        }

        await update_order_data(order_id, order_data)

        await update_order_status(order_id, "recipient_selected")

    

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è

    await callback.message.edit_text("–ù–∞–ø–∏—à–∏ –∏–º—è —Ç–æ–≥–æ –∫–æ–º—É –±—É–¥–µ—Ç –ø–æ—Å–≤—è—â–µ–Ω–∞ —Ç–≤–æ—è –ø–µ—Å–Ω—è üéµ\n–û–Ω–æ —Å—Ç–∞–Ω–µ—Ç –≥–ª–∞–≤–Ω—ã–º, –∏ –ø–µ—Å–Ω—è –ø—Ä–æ–∑–≤—É—á–∏—Ç –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–µ–ø–ª–æ ‚ù§Ô∏è")

    await state.set_state(SongRelationStates.waiting_recipient_name)

    logging.info(f"üéµ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_recipient_name –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")

    await callback.answer()

    await log_state(callback.message, state)



@dp.message(StateFilter(SongRelationStates.waiting_recipient_name))

async def song_recipient_name(message: types.Message, state: FSMContext):

    try:

        logging.info(f"üéµ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ song_recipient_name –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        logging.info(f"üéµ –ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç: '{message.text}'")

        current_state = await state.get_state()

        logging.info(f"üéµ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")

        await state.update_data(song_recipient_name=message.text)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∫–∏

        await save_user_message_to_history(message, state, "–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –ø–µ—Å–Ω–∏: ")

        

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è

        data = await state.get_data()

        order_id = data.get('order_id')

        if order_id:

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ first_name –∏ last_name

            first_name = data.get('first_name', '')

            last_name = data.get('last_name', '')

            sender_name = ""

            if first_name and first_name != 'None':

                sender_name = first_name

            if last_name and last_name != 'None':

                if sender_name:

                    sender_name += f" {last_name}"

                else:

                    sender_name = last_name

            

            order_data = {

                "product": "–ü–µ—Å–Ω—è",

                "user_gender": data.get('song_gender', ''),

                "song_relation": data.get('song_relation', ''),

                "song_recipient_name": message.text,

                "hero_name": message.text,  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏

                "song_gender": data.get('song_gender', ''),

                "username": data.get('username'),

                "first_name": data.get('first_name'),

                "last_name": data.get('last_name'),

                "sender_name": sender_name  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

            }

            await update_order_data(order_id, order_data)

            await update_order_status(order_id, "recipient_name_entered")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Å–Ω–∏
        product = data.get('product', '')
        if product != "–ü–µ—Å–Ω—è":
            logging.info(f"üîç –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤–æ–¥–µ –ø–µ—Å–Ω–∏ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∞: {product}")
            return

        logging.info(f"üéµ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤–æ–¥–µ –ø–æ–¥–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

        try:

            await message.answer("–ù–∞–ø–∏—à–∏ –ø–æ –∫–∞–∫–æ–º—É –ø–æ–≤–æ–¥—É –º—ã —Å–æ–∑–¥–∞—ë–º –ø–µ—Å–Ω—é üé∂\n–ò–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –±–µ–∑ –ø–æ–≤–æ–¥–∞?")

            logging.info(f"üéµ –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤–æ–¥–µ –ø–æ–¥–∞—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

        except Exception as send_error:

            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–≤–æ–¥–µ: {send_error}")

            raise send_error

        

        await state.set_state(SongRelationStates.waiting_gift_reason)

        await log_state(message, state)

        logging.info(f"üéµ –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ waiting_gift_reason –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ song_recipient_name: {e}")

        import traceback

        logging.error(f"‚ùå Traceback: {traceback.format_exc()}")

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



@dp.message(StateFilter(SongRelationStates.waiting_gift_reason))

async def song_gift_reason(message: types.Message, state: FSMContext):

    print("–§–£–ù–ö–¶–ò–Ø –í–´–ó–í–ê–ù–ê!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤—ã–±–∏—Ä–∞–µ—Ç —Å—Ç–∏–ª—å, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    current_state = await state.get_state()
    if current_state == SongStyleStates.choosing_style:
        logging.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∏–ª—è–º–∏
    data = await state.get_data()
    style_message_sending = data.get('style_message_sending', False)
    if style_message_sending:
        logging.info(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∏–ª—è–º–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ")
        return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –±—ã—Å—Ç—Ä–æ–º –≤–≤–æ–¥–µ
    await state.update_data(style_message_sending=True)
    
    try:
        await state.update_data(song_gift_reason=message.text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
        await save_user_message_to_history(message, state, "–ü–æ–≤–æ–¥ –ø–æ–¥–∞—Ä–∫–∞: ")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –ø–æ–≤–æ–¥–æ–º –ø–æ–¥–∞—Ä–∫–∞
        data = await state.get_data()
        order_id = data.get('order_id')

        if order_id:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ first_name –∏ last_name
            first_name = data.get('first_name', '')
            last_name = data.get('last_name', '')

            sender_name = ""

            if first_name and first_name != 'None':
                sender_name = first_name

            if last_name and last_name != 'None':
                if sender_name:
                    sender_name += f" {last_name}"
                else:
                    sender_name = last_name

            

            order_data = {
                "product": "–ü–µ—Å–Ω—è",
                "user_gender": data.get('song_gender', ''),
                "song_relation": data.get('song_relation', ''),
                "song_recipient_name": data.get('song_recipient_name', ''),
                "hero_name": data.get('song_recipient_name', ''),  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏
                "song_gift_reason": message.text,

                "song_gender": data.get('song_gender', ''),
                "username": data.get('username'),
                "first_name": data.get('first_name'),
                "last_name": data.get('last_name'),
                "sender_name": sender_name  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            }

            await update_order_data(order_id, order_data)
            await update_order_status(order_id, "gift_reason_entered")

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞
            await update_order_status(order_id, "voice_selection")

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª –∫–ª–∏–µ–Ω—Ç–∞
            user_gender = data.get('song_gender', '')

            # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥–æ–ª–æ—Å–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            voices = await get_voice_styles()

            if voices:
                # –§–∏–ª—å—Ç—Ä—É–µ–º –≥–æ–ª–æ—Å–∞ –ø–æ –ø–æ–ª—É –∫–ª–∏–µ–Ω—Ç–∞
                matching_voices = []

                for voice in voices:
                    voice_gender = voice.get('gender', 'male').lower()

                    if user_gender == "–¥–µ–≤—É—à–∫–∞" and voice_gender in ['female', '–∂–µ–Ω—Å–∫–∏–π']:
                        matching_voices.append(voice)
                    elif user_gender == "–ø–∞—Ä–µ–Ω—å" and voice_gender in ['male', '–º—É–∂—Å–∫–æ–π']:
                        matching_voices.append(voice)

                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –≥–æ–ª–æ—Å–æ–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                if not matching_voices:
                    matching_voices = [voices[0]]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –ª–∏ —É–∂–µ –ø—Ä–∏–º–µ—Ä—ã –≥–æ–ª–æ—Å–æ–≤
                song_style = data.get('song_style')
                if not song_style:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 3 –ø—Ä–∏–º–µ—Ä–∞ –≥–æ–ª–æ—Å–æ–≤ —Å —Ä–∞–∑–Ω—ã–º–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –æ–∫—Ä–∞—Å–∫–∞–º–∏
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–º–µ—Ä–æ–≤ –≥–æ–ª–æ—Å–æ–≤
                    await send_voice_examples(message, data.get('song_gender', '–ø–∞—Ä–µ–Ω—å'))
                else:
                    logging.info(f"üéµ –°—Ç–∏–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø—Ä–∏–º–µ—Ä–æ–≤ –≥–æ–ª–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≥–æ–ª–æ—Å
                selected_voice = matching_voices[0]

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.update_data(
                    song_voice=selected_voice['name'], 
                    song_voice_gender=selected_voice.get('gender', 'male')
                )

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –≥–æ–ª–æ—Å–æ–º
                order_data.update({
                    "song_voice": selected_voice['name'],
                    "song_voice_gender": selected_voice.get('gender', 'male')
                })

                await update_order_data(order_id, order_data)

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—Ç–∏–ª—è –ø–µ—Å–Ω–∏
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∏–ª—è–º–∏
            from db import get_order
            order_info = await get_order(order_id)
            song_style_message_sent = order_info.get('song_style_message_sent', 0) if order_info else 0
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ FSM
            current_state = await state.get_state()
            if current_state == SongStyleStates.choosing_style:
                logging.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è")
                return
            
            if not song_style_message_sent:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ù–µ–∂–Ω–∞—è –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è –ø–µ—Å–Ω—è ‚ù§Ô∏è‚Äçüî•", callback_data="song_style_gentle")],
                    [InlineKeyboardButton(text="–í–µ—Å—ë–ª—ã–π –∏ –∂–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫üéâ", callback_data="song_style_bright")],
                    [InlineKeyboardButton(text="–ì–ª—É–±–æ–∫–∞—è –∏ –ª–∏—Ä–∏—á–Ω–∞—è –º–µ–ª–æ–¥–∏—è üíì", callback_data="song_style_artist")],
                ])

                await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –ø–µ—Å–Ω–∏: ü§ó", reply_markup=keyboard)

                # –°–Ω–∞—á–∞–ª–∞ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –≤—ã–∑–æ–≤—ã
                await state.set_state(SongStyleStates.choosing_style)

                # –ó–∞—Ç–µ–º –æ—Ç–º–µ—á–∞–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∏–ª—è–º–∏ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                await update_order_data(order_id, {'song_style_message_sent': 1})
                
                logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∏–ª—è–º–∏ –ø–µ—Å–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
            else:
                # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                await state.set_state(SongStyleStates.choosing_style)

    
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ song_gift_reason: {e}")
    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –≤ –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞)
        await state.update_data(style_message_sending=False)

    await log_state(message, state)



# --- –ì–ª–∞–≤–∞ 2.3. –í—ã–±–æ—Ä —Å—Ç–∏–ª—è –ø–µ—Å–Ω–∏ ---

@dp.callback_query(F.data.startswith("song_style_"))

async def song_style_chosen(callback: types.CallbackQuery, state: FSMContext):

    styles = {

        "song_style_gentle": "–ù–µ–∂–Ω–∞—è –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–∞—è –ø–µ—Å–Ω—è ‚ù§Ô∏è‚Äçüî•",

        "song_style_bright": "–í–µ—Å—ë–ª—ã–π –∏ –∂–∏–∑–Ω–µ—Ä–∞–¥–æ—Å—Ç–Ω—ã–π —Ç—Ä–µ–∫üéâ",

        "song_style_artist": "–ì–ª—É–±–æ–∫–∞—è –∏ –ª–∏—Ä–∏—á–Ω–∞—è –º–µ–ª–æ–¥–∏—è üíì",

    }

    style = styles.get(callback.data, "–ì–ª—É–±–æ–∫–∞—è –∏ –ª–∏—Ä–∏—á–Ω–∞—è –º–µ–ª–æ–¥–∏—è üíì")

    await state.update_data(song_style=style)

    

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ —Å –¥–∞–Ω–Ω—ã–º–∏ —Å—Ç–∏–ª—è

    data = await state.get_data()

    order_id = data.get('order_id')

    user_id = callback.from_user.id

    

    if order_id:

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ first_name –∏ last_name

        first_name = data.get('first_name', '')

        last_name = data.get('last_name', '')

        sender_name = ""

        if first_name and first_name != 'None':

            sender_name = first_name

        if last_name and last_name != 'None':

            if sender_name:

                sender_name += f" {last_name}"

            else:

                sender_name = last_name

        

        # –£ –Ω–∞—Å —É–∂–µ –µ—Å—Ç—å order_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ - –æ–±–Ω–æ–≤–ª—è–µ–º —ç—Ç–æ—Ç –∑–∞–∫–∞–∑

        order_data = {

            "product": "–ü–µ—Å–Ω—è",

            "user_gender": data.get('song_gender', ''),

            "song_relation": data.get('song_relation', ''),

            "song_recipient_name": data.get('song_recipient_name', ''),

            "hero_name": data.get('song_recipient_name', ''),  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏

            "song_style": style,

            "style": style,  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏

            "song_gift_reason": data.get('song_gift_reason', ''),

            "song_gender": data.get('song_gender', ''),

            "relation": data.get('song_relation', ''),  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏

            "gift_reason": data.get('song_gift_reason', ''),  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏

            "song_voice": data.get('song_voice', ''),  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å

            "song_voice_gender": data.get('song_voice_gender', ''),  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª –≥–æ–ª–æ—Å–∞

            "username": data.get('username'),

            "first_name": data.get('first_name'),

            "last_name": data.get('last_name'),

            "sender_name": sender_name  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

        }

        print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}:")

        print(f"üìä –î–∞–Ω–Ω—ã–µ: {order_data}")

        await update_order_data(order_id, order_data)

        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å

        from db import get_order_data_debug

        saved_data = await get_order_data_debug(order_id)

        print(f"üîç –ü–†–û–í–ï–†–ö–ê: –î–∞–Ω–Ω—ã–µ –≤ –ë–î –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {saved_data}")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è

        required_fields = ['hero_name', 'style', 'relation', 'gift_reason']

        missing_fields = [field for field in required_fields if not saved_data.get(field)]

        if missing_fields:

            print(f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è –≤ –ë–î: {missing_fields}")

        else:

            print(f"‚úÖ –í—Å–µ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤ –ë–î")

    else:

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ first_name –∏ last_name

        first_name = data.get('first_name', '')

        last_name = data.get('last_name', '')

        sender_name = ""

        if first_name and first_name != 'None':

            sender_name = first_name

        if last_name and last_name != 'None':

            if sender_name:

                sender_name += f" {last_name}"

            else:

                sender_name = last_name

        

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ (–≤–∫–ª—é—á–∞—è –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏)

        order_data = {

            "product": "–ü–µ—Å–Ω—è",

            "user_id": data.get('user_id'),

            "username": data.get('username'),

            "first_name": data.get('first_name'),

            "last_name": data.get('last_name'),

            "sender_name": sender_name,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

            "song_gender": data.get('song_gender'),

            "song_relation": data.get('song_relation'),

            "song_recipient_name": data.get('song_recipient_name'),

            "song_gift_reason": data.get('song_gift_reason'),

            "song_style": style,

            "song_voice": data.get('song_voice', ''),  # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≥–æ–ª–æ—Å

            "song_voice_gender": data.get('song_voice_gender', ''),  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª –≥–æ–ª–æ—Å–∞

            "hero_name": data.get('song_recipient_name', ''),  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏

            "style": style,  # –î–ª—è –∞–¥–º–∏–Ω–∫–∏

            "relation": data.get('song_relation', ''),  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏

            "gift_reason": data.get('song_gift_reason', '')  # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏

        }

        

        print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:")

        print(f"üìä –î–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞: {order_data}")

        order_id = await create_order(user_id, order_data)

        await state.update_data(order_id=order_id)

        print(f"‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω —Å ID {order_id}")

    

    # --- –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç—É ---

    await update_order_status(order_id, "demo_content")

    

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –≥–æ–ª–æ—Å–µ

    selected_voice = data.get('song_voice', '–ù–µ —É–∫–∞–∑–∞–Ω')

    

    await callback.message.edit_text(f"‚úÖ –í—ã–±—Ä–∞–Ω —Å—Ç–∏–ª—å: {style}")

    

    await callback.message.answer(

        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!‚ò∫Ô∏è\n\n"

        f"–ú—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ —Å–æ–±–∏—Ä–∞—Ç—å –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é, —Å–∫–æ—Ä–æ –º—ã –≤–µ—Ä–Ω–µ–º—Å—è –∏ —Ç—ã —É—Å–ª—ã—à–∏—à—å –ø–µ—Ä–≤—ã–µ –Ω–æ—Ç—ã üé∂"

    )

    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–µ–º–æ

    await state.set_state(SongDraftStates.waiting_for_demo)

    # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_demo_song (–ì–ª–∞–≤–∞ 2: –î–µ–º–æ-–ø–µ—Å–Ω—è)
    from db import create_or_update_user_timer
    await create_or_update_user_timer(callback.from_user.id, order_id, "waiting_demo_song", "–ü–µ—Å–Ω—è")
    logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ waiting_demo_song (–ì–ª–∞–≤–∞ 2), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id}, –∑–∞–∫–∞–∑ {order_id}")

    await callback.answer()

    await log_state(callback.message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è –ø–µ—Å–Ω–∏
@dp.message(StateFilter(SongStyleStates.choosing_style), F.text)
async def handle_text_in_song_style_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∏–ª—è –ø–µ—Å–Ω–∏"""
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ SongStyleStates.choosing_style: '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    await save_user_message_to_history(message, state, "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —Å—Ç–∏–ª—è –ø–µ—Å–Ω–∏: ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    current_state = await state.get_state()
    
    if current_state and current_state != "SongStyleStates:choosing_style":
        await message.answer("‚ùå –í—ã–±–æ—Ä —Å—Ç–∏–ª—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.")
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    await log_state(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥–æ–ª–æ—Å–∞ –¥–ª—è –ø–µ—Å–Ω–∏ (–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)

@dp.callback_query(F.data.startswith("song_voice_"))

async def song_voice_chosen(callback: types.CallbackQuery, state: FSMContext):

    # –ì–æ–ª–æ—Å —Ç–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª–∞ –∫–ª–∏–µ–Ω—Ç–∞

    await callback.answer("üé§ –ì–æ–ª–æ—Å —É–∂–µ –≤—ã–±—Ä–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø–æ–ª–∞!")



# –£–ë–†–ê–ù–û: –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω –ø–µ—Ä–µ–¥ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º



@dp.message(StateFilter(SongQuizStates.quiz_q2))

async def song_quiz_q2(message: types.Message, state: FSMContext):

    await state.update_data(song_quiz_special=message.text)

    await message.answer("–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç –∏–∑ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ —Å —ç—Ç–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º –≤—ã –≤—Å–ø–æ–º–∏–Ω–∞–µ—Ç–µ —á–∞—â–µ –≤—Å–µ–≥–æ?")

    await state.set_state(SongQuizStates.quiz_q3)

    await log_state(message, state)



@dp.message(StateFilter(SongQuizStates.quiz_q3))

async def song_quiz_q3(message: types.Message, state: FSMContext):

    await state.update_data(song_quiz_memory=message.text)

    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤

    data = await state.get_data()

    relation = data.get("song_relation", "–ø–æ–ª—É—á–∞—Ç–µ–ª—è")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª —Å–æ–∑–¥–∞—Ç–µ–ª—è –ø–µ—Å–Ω–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
    song_gender = data.get("song_gender", "–ø–∞—Ä–µ–Ω—å")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –¥–ª—è –∑–∞–º–µ–Ω—ã
    sender_name = data.get("first_name", "") or data.get("username", "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    recipient_name = data.get("song_recipient_name", "–ø–æ–ª—É—á–∞—Ç–µ–ª—å")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–≤—è–∑–∏
    song_questions = await get_song_questions_for_relation(relation, song_gender)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    intro_text = ""
    
    for question in song_questions:
        # –ó–∞–º–µ–Ω—è–µ–º –∏–º–µ–Ω–∞ –≤ —Ç–µ–∫—Å—Ç–µ
        question_with_names = question.replace("(–∏–º—è)", sender_name)
        question_with_names = question_with_names.replace("(–∏–º—è)", recipient_name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –µ—Å—Ç—å (–≤–∫–ª—é—á–∞—è –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–±–∑–∞—Ü–µ–≤)
        intro_text += f"{question_with_names}\n"
    
    await message.answer(intro_text, parse_mode="HTML")

    await state.set_state(SongFactsStates.collecting_facts)

    await log_state(message, state)



# --- –ì–ª–∞–≤–∞ 2.5. –î–µ–º–æ-–≤–µ—Ä—Å–∏—è –ø–µ—Å–Ω–∏ ---

@dp.message(StateFilter(SongDraftStates.waiting_for_demo))

async def receive_song_demo(message: types.Message, state: FSMContext):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∞ –Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if message.from_user.id not in ADMIN_IDS:

        # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

        data = await state.get_data()

        order_id = data.get('order_id')

        

        if order_id:

            try:

                from db import add_message_history

                await add_message_history(order_id, "user", message.text or f"[{message.content_type.upper()}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

                

                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞

                from db import create_or_update_order_notification

                await create_or_update_order_notification(order_id)

                print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_demo –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {message.text}")

                print(f"üîî –û–¢–õ–ê–î–ö–ê: –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

            except Exception as e:

                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")

        

        logging.info(f"üéµ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_demo")

        return

    

    # –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é –ø–µ—Å–Ω–∏

    data = await state.get_data()

    order_id = data.get('order_id')

    

    logging.info(f"üéµ –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–µ–º–æ –ø–µ—Å–Ω–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ–º–æ-–∞—É–¥–∏–æ

    await state.update_data(song_demo=message.text)

    await update_order_status(order_id, "demo_sent")
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    from db import get_order, get_active_timers_for_order, deactivate_user_timers, create_or_update_user_timer, get_message_templates
    
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ –∑–∞–∫–∞–∑–∞
    order = await get_order(order_id)
    if not order:
        logging.error(f"‚ùå –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user_id = order.get('user_id')
    if not user_id:
        logging.error(f"‚ùå user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–∫–∞–∑–µ {order_id}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –î–û –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    active_timers_before = await get_active_timers_for_order(order_id)
    logging.info(f"üîç –ê–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –î–û –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {active_timers_before}")
    
    # –¢–∞–π–º–µ—Ä —Å–æ–∑–¥–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ update_order_status –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ demo_sent
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∞–±–ª–æ–Ω—ã –¥–ª—è demo_received_song
    templates = await get_message_templates()
    demo_templates = [t for t in templates if t.get('order_step') == 'demo_received_song']
    logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(demo_templates)} —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è demo_received_song: {[t.get('message_type') for t in demo_templates]}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã –¥–ª—è waiting_demo_song (–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –º–µ—à–∞—Ç—å)
    waiting_templates = [t for t in templates if t.get('order_step') == 'waiting_demo_song']
    logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(waiting_templates)} —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è waiting_demo_song: {[t.get('message_type') for t in waiting_templates]}")

    

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    await message.answer(

        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ ‚ú®\n"

        "–î–µ–º–æ-–≤–µ—Ä—Å–∏—è —Ç–≤–æ–µ–π –ø–µ—Å–Ω–∏ –≥–æ—Ç–æ–≤–∞ üíå\n"

        "–ú—ã —Å–æ–±—Ä–∞–ª–∏ –µ—ë –ø–µ—Ä–≤—ã–µ –Ω–æ—Ç—ã —Å —Ç–µ–ø–ª–æ–º –∏ —É–∂–µ –∑–Ω–∞–µ–º, –∫–∞–∫ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∏—Ö –≤ –ø–æ–ª–Ω—É—é –º–µ–ª–æ–¥–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–æ–Ω–µ—Ç –¥–æ –º—É—Ä–∞—à–µ–∫.\n\n"

        "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∞–≤—Ç–æ—Ä—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é —Å —Ç–≤–æ–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏, –º–æ–º–µ–Ω—Ç–∞–º–∏ –∏ —á—É–≤—Å—Ç–≤–∞–º–∏, –Ω–∞–º –Ω—É–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üß©\n\n"

        "–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–æ–π–Ω–∞ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∑–≤—É—á–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ —Å—Ç–∞—Ç—å –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –ø–æ–¥–∞—Ä–∫–æ–º –¥–ª—è —Ç–µ–±—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è ‚ù§Ô∏è‚Äçüî•"

    )
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ demo_received_song –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    from db import create_or_update_user_timer, deactivate_user_timers
    await deactivate_user_timers(user_id, order_id)
    await create_or_update_user_timer(user_id, order_id, "demo_received_song", "–ü–µ—Å–Ω—è")
    logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ demo_received_song –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∑–∞–∫–∞–∑ {order_id}")

    

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É", callback_data="continue_after_song_demo")]

    ])

    

    logging.info(f"üîò –°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É' —Å callback_data='continue_after_song_demo'")

    logging.info(f"üîò –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {keyboard.inline_keyboard}")

    

    await message.answer("–ñ–º–∏ \"–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É\", –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –º—ã –º–æ–∂–µ–º –¥–æ–ø–∏—Å–∞—Ç—å –ø–µ—Å–Ω—é.", reply_markup=keyboard)

    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã

    await state.set_state(SongDraftStates.demo_received)

    await log_state(message, state)



# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É" –ø–æ—Å–ª–µ –¥–µ–º–æ ---

@dp.callback_query(F.data == "continue_after_song_demo")

async def after_song_demo_continue(callback: types.CallbackQuery, state: FSMContext):

    logging.info(f"üîò –ö–Ω–æ–ø–∫–∞ '–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É' –Ω–∞–∂–∞—Ç–∞! User ID: {callback.from_user.id}")

    logging.info(f"üîò Callback data: {callback.data}")

    logging.info(f"üîò Current state: {await state.get_state()}")

    

    try:

        data = await state.get_data()

        order_id = data.get('order_id')

        

        # –ì–ª–∞–≤–∞ 2.6. –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –ø–µ—Å–Ω–∏

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –¥–ª—è –ø–µ—Å–Ω–∏

        price = await get_product_price_async("–ü–µ—Å–Ω—è", "üíå –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è")

        

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂

        description = f"–ü–µ—Å–Ω—è - –∑–∞–∫–∞–∑ #{order_id}" if order_id else "–ü–µ—Å–Ω—è"

        payment_data = await create_payment(order_id, price, description, "–ü–µ—Å–Ω—è")

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞

        await state.update_data(

            payment_id=payment_data['payment_id'],

            payment_url=payment_data['confirmation_url'],

            product="–ü–µ—Å–Ω—è"

        )

        

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞

        order_summary = ""

        

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å –ø–µ—Å–Ω—é", url=payment_data['confirmation_url'])],

            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],


        ])

        

        await safe_edit_message(

            callback.message,

            f"{order_summary}\n"

            f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b>\n"

            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price} ‚ÇΩ</b>\n\n"

            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ:",

            reply_markup=keyboard,

            parse_mode="HTML"

        )

        

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

        await update_order_status(order_id, "waiting_payment")

        

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ 24 –∏ 48 —á–∞—Å–æ–≤

        from db import create_payment_reminder_messages

        await create_payment_reminder_messages(order_id, callback.from_user.id)

        

        await callback.answer()

        await log_state(callback.message, state)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ after_song_demo_continue: {e}")

        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



@dp.callback_query(F.data == "listen_song")

async def listen_song_callback(callback: types.CallbackQuery, state: FSMContext):

    logging.info(f"üîò –ö–Ω–æ–ø–∫–∞ 'listen_song' –Ω–∞–∂–∞—Ç–∞! User ID: {callback.from_user.id}")

    logging.info(f"üîò Callback data: {callback.data}")

    logging.info(f"üîò Current state: {await state.get_state()}")

    

    try:

        data = await state.get_data()

        order_id = data.get('order_id')

        

        # –ì–ª–∞–≤–∞ 2.6. –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –ø–µ—Å–Ω–∏

        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –¥–ª—è –ø–µ—Å–Ω–∏

        price = await get_product_price_async("–ü–µ—Å–Ω—è", "üíå –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è")

        

        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂

        description = f"–ü–µ—Å–Ω—è - –∑–∞–∫–∞–∑ #{order_id}" if order_id else "–ü–µ—Å–Ω—è"

        payment_data = await create_payment(order_id, price, description, "–ü–µ—Å–Ω—è")

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞

        await state.update_data(

            payment_id=payment_data['payment_id'],

            payment_url=payment_data['confirmation_url'],

            product="–ü–µ—Å–Ω—è"

        )

        

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞

        order_summary = ""

        

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å –ø–µ—Å–Ω—é", url=payment_data['confirmation_url'])],

            [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],


        ])

        

        await safe_edit_message(

            callback.message,

            f"{order_summary}\n"

            f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b>\n"

            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price} ‚ÇΩ</b>\n\n"

            f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ:",

            reply_markup=keyboard,

            parse_mode="HTML"

        )

        

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

        await update_order_status(order_id, "waiting_payment")

        

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ 24 –∏ 48 —á–∞—Å–æ–≤

        from db import create_payment_reminder_messages

        await create_payment_reminder_messages(order_id, callback.from_user.id)

        

        await callback.answer()

        await log_state(callback.message, state)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ listen_song_callback: {e}")

        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –¥–µ–º–æ ---

@dp.message(StateFilter(SongDraftStates.demo_received))

async def handle_user_message_after_demo(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–º–æ"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

    data = await state.get_data()

    order_id = data.get('order_id')

    

    if order_id:

        try:

            from db import add_message_history

            await add_message_history(order_id, "user", message.text or f"[{message.content_type.upper()}] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

            

            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞

            from db import create_or_update_order_notification

            await create_or_update_order_notification(order_id)

            print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ demo_received –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {message.text}")

            print(f"üîî –û–¢–õ–ê–î–ö–ê: –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

        except Exception as e:

            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")

    

    logging.info(f"üéµ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ demo_received —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é")



# --- –ì–ª–∞–≤–∞ 2.6. –ü—Ä–æ–±–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–µ—Å–Ω–∏ (–ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã) ---

@dp.message(StateFilter(SongDraftStates.waiting_for_draft))

async def receive_song_draft(message: types.Message, state: FSMContext):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∞ –Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ

    data = await state.get_data()

    order_id = data.get('order_id')

    

    if order_id:

        order = await get_order(order_id)

        if order and order.get('user_id') == message.from_user.id:

            # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            try:

                from db import add_message_history

                await add_message_history(order_id, "user", message.text)

                logging.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞ {order_id}: {message.text[:50]}...")

            except Exception as e:

                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")

            

            logging.info(f"üéµ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_draft")

            return

    

    # –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–µ—Å–Ω–∏ (–ì–ª–∞–≤–∞ 2.10. –ü—Ä–µ–¥—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–µ—Å–Ω–∏)

    logging.info(f"üéµ –ü–æ–ª—É—á–µ–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–µ—Å–Ω–∏ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")

    

    logging.info(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: order_id={order_id}")

    

    await state.update_data(song_draft=message.text)

    await update_order_status(order_id, "draft_sent")

    

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    await message.answer("üéâ –í–æ—Ç –æ–Ω–∞ - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–≤–æ–µ–π –ø–µ—Å–Ω–∏ ‚ù§Ô∏è\n\n"

                        "–ú—ã –≤–ª–æ–∂–∏–ª–∏ –≤ —ç—Ç—É –ø–µ—Å–Ω—é –º–Ω–æ–≥–æ –ª—é–±–≤–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ–º –Ω–µ –º–µ–Ω—å—à–µ —Ç–µ–±—è. –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω–∞ —Ç—Ä–æ–Ω–µ—Ç –¥–æ –º—É—Ä–∞—à–µ–∫ ü•π")

    

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="–í—Å–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –æ—Ç–ª–∏—á–Ω–∞—è –ø–µ—Å–Ω—è", callback_data="song_draft_ok")],

        [InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="song_draft_edit")]

    ])

    

    logging.info("üîò –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø–µ—Å–Ω–∏")

    

    await message.answer("üéâ –í–æ—Ç –æ–Ω–∞ - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–≤–æ–µ–π –ø–µ—Å–Ω–∏ ‚ù§Ô∏è\n\n"

                        "–ú—ã –≤–ª–æ–∂–∏–ª–∏ –≤ —ç—Ç—É –ø–µ—Å–Ω—é –º–Ω–æ–≥–æ –ª—é–±–≤–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ–º –Ω–µ –º–µ–Ω—å—à–µ —Ç–µ–±—è. –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω–∞ —Ç—Ä–æ–Ω–µ—Ç –¥–æ –º—É—Ä–∞—à–µ–∫ ü•π", reply_markup=keyboard)

    await state.set_state(SongDraftStates.draft_received)

    await log_state(message, state)



# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø–µ—Å–Ω–∏ ---

@dp.callback_query(F.data == "song_draft_ok")

async def song_draft_ok_callback(callback: types.CallbackQuery, state: FSMContext):

    data = await state.get_data()

    order_id = data.get('order_id')

    

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–∏–ª —á–µ—Ä–Ω–æ–≤–∏–∫ - —ç—Ç–æ—Ç –∂–µ —Ç—Ä–µ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π

    try:

        from db import add_message_history

        await add_message_history(order_id, sender="user", message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–í—Å—ë —Å—É–ø–µ—Ä' - —á–µ—Ä–Ω–æ–≤–∏–∫ –æ–¥–æ–±—Ä–µ–Ω")

    except Exception:

        pass

    

    await callback.message.answer("üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –ø–µ—Å–Ω—è –≥–æ—Ç–æ–≤–∞!\n\n–≠—Ç–æ—Ç —Ç—Ä–µ–∫ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π —Ç–≤–æ–µ–π –ø–µ—Å–Ω–∏. –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω–∞ –≤—ã–∑–æ–≤–µ—Ç —Å–∏–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏! üíñ")

    

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "ready" - –ø–µ—Å–Ω—è –≥–æ—Ç–æ–≤–∞

    await update_order_status(order_id, "ready")

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ–≤–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–Ω–∏–≥–∏ —Å—Ä–∞–∑—É

    await callback.message.answer("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª–∏ –Ω–∞–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–∫–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ üíù")

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–±–Ω—É—é –∫–Ω–∏–≥—É", callback_data="create_book_after_song")],

        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Å—å –∫ –≤–∞–º —á—É—Ç—å –ø–æ–∑–∂–µ ‚ù§Ô∏è", callback_data="finish_song_order")]

    ])

    

    await callback.message.answer(

        "–î–∞–≤–∞–π —Å–æ–±–µ—Ä—ë–º –µ—â—ë –±–æ–ª—å—à–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∫–Ω–∏–≥–µ —Å–æ —Å–ª–æ–≤–∞–º–∏, –º–æ–º–µ–Ω—Ç–∞–º–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏.\n\n"

        "üóù –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —ç—Ç–æ–π –∫–Ω–∏–≥–∏ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –º—ã –æ–∂–∏–≤–∏–º —Ç–æ, —á—Ç–æ –Ω–µ —É—Å–ø–µ–ª–æ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Ñ–æ—Ç–æ: –æ—Å–æ–±–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏, –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞, —Å–∫–∞–∑–∞–Ω–Ω—ã–µ —à—ë–ø–æ—Ç–æ–º, –∏ —á—É–≤—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –±–µ—Ä–µ–∂–µ–º.\n\n"

        "–≠—Ç–æ —Å–æ–∫—Ä–æ–≤–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫, –≥–¥–µ –æ–∂–∏–≤—É—Ç —Å–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –º–≥–Ω–æ–≤–µ–Ω–∏—è ‚ú®\n"

        "–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ?",

        reply_markup=keyboard

    )

    

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await state.set_state(SongFinalStates.final_received)

    

    await callback.answer()

    await log_state(callback.message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ final_received (–ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø–µ—Å–Ω–∏)
@dp.message(StateFilter(SongFinalStates.final_received), F.text)
async def handle_text_after_song_approval(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø–µ—Å–Ω–∏"""
    
    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ SongFinalStates.final_received: '{message.text}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    await save_user_message_to_history(message, state, "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–µ—Å–Ω–∏: ")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É
    current_state = await state.get_state()
    
    if current_state and current_state != "SongFinalStates:final_received":
        await message.answer("‚ùå –ü–µ—Å–Ω—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í—ã –ø–µ—Ä–µ—à–ª–∏ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.")
        return
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É - —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    
    await log_state(message, state)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–µ—Å–Ω–∏ ---

@dp.callback_query(F.data == "create_book_after_song")

async def create_book_after_song_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    # –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ —á–∞—Å—Ç–∏—á–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π
    data = await state.get_data()
    preserved_data = {
        'user_id': data.get('user_id'),
        'username': data.get('username'), 
        'first_name': data.get('first_name'),
        'last_name': data.get('last_name'),
        'recipient_name': data.get('song_recipient_name'),  # –í–ê–ñ–ù–û: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–∑ –ø–µ—Å–Ω–∏
    }
    
    # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Å–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ
    await state.clear()
    await state.update_data(**preserved_data)
    logging.info(f"üíæ –°–û–•–†–ê–ù–ï–ù–´ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –∫–Ω–∏–≥–µ: {preserved_data}")

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –∫–Ω–∏–≥–∏

    user_id = callback.from_user.id

    

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–µ—Å–Ω–∏

    from db import get_user_active_order, get_last_order_username

    previous_order = await get_user_active_order(user_id, "–ü–µ—Å–Ω—è")

    last_username = await get_last_order_username(user_id)

    

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞

    # first_name –∏ last_name –ù–ï –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑ Telegram

    user_first_name = None

    user_last_name = None

    

    if previous_order and previous_order.get('order_data'):

        try:

            import json

            order_data = json.loads(previous_order.get('order_data', '{}')) if previous_order and isinstance(previous_order.get('order_data'), str) else (previous_order.get('order_data', {}) if previous_order else {})

            user_first_name = order_data.get('first_name', user_first_name)

            user_last_name = order_data.get('last_name', user_last_name)

        except:

            pass

    

    # –î–∞–Ω–Ω—ã–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—ã—à–µ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏, –Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    current_data = await state.get_data()
    if not current_data.get('first_name'):
        await state.update_data(
            first_name=user_first_name,
            last_name=user_last_name
        )
        logging.info(f"üíæ –û–ë–ù–û–í–õ–ï–ù–´ –∏–º–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: first_name='{user_first_name}', last_name='{user_last_name}'")

    

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–º–µ–Ω–∏

    await start_book_creation_flow(callback, state)

    

    await log_state(callback.message, state)



@dp.callback_query(F.data == "finish_song_order")

async def finish_song_order_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    await callback.message.edit_text(

        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª –∏–º–µ–Ω–Ω–æ –Ω–∞—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ —Å–æ–∫—Ä–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞üíù\n\n"

        "–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –ø–æ–¥–∞—Ä–∏—Ç—å —ç–º–æ—Ü–∏–∏ –∏ —Ç—Ä–æ–Ω—É—Ç—å —Å–µ—Ä–¥—Ü–µ –±–ª–∏–∑–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è ü´∂üèª\n\n"

        "–ú—ã –±—É–¥–µ–º –∑–¥–µ—Å—å –¥–ª—è —Ç–µ–±—è,\n"

        "–ö–æ–º–∞–Ω–¥–∞ \"–í —Å–∞–º–æ–µ —Å–µ—Ä–¥—Ü–µ\" üíñ"

    )

    

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await state.clear()

    

    await log_state(callback.message, state)



# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø–µ—Å–Ω–∏ ---

@dp.callback_query(F.data == "song_draft_edit")

async def song_draft_edit_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.message.answer("–ü–æ–¥–µ–ª–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø–µ—Å–Ω–µ? ‚ú®\n"

                                 "–£–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ: –≤ –∫–∞–∫–æ–º –∫—É–ø–ª–µ—Ç–µ, –∫–∞–∫–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Å—Ç—Ä–æ—á–∫—É –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å ‚Äî —Ç–∞–∫ –º—ã —Å–º–æ–∂–µ–º –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ üíï")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∫–∏, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –∫ –ø—Ä–∞–≤–∫–∞–º

    try:

        data = await state.get_data()

        order_id = data.get('order_id')

        from db import add_message_history

        await add_message_history(order_id, sender="user", message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å' –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")

    except Exception:

        pass

    await state.set_state(SongFinalStates.collecting_feedback)

    await callback.answer()

    await log_state(callback.message, state)



# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∫–Ω–∏–≥–∏ ---

@dp.callback_query(F.data == "book_draft_ok")

async def book_draft_ok_callback(callback: types.CallbackQuery, state: FSMContext):

    logging.info(f"üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ book_draft_ok –≤—ã–∑–≤–∞–Ω! User ID: {callback.from_user.id}")

    

    data = await state.get_data()

    order_id = data.get('order_id')

    format_choice = data.get('format', '')

    logging.info(f"üìã Order ID: {order_id}, Format: {format_choice}")

    

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–¥–æ–±—Ä–∏–ª —á–µ—Ä–Ω–æ–≤–∏–∫ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ì–ª–∞–≤–µ 15 (–¥–æ—Å—Ç–∞–≤–∫–∞)

    try:

        from db import add_message_history

        await add_message_history(order_id, sender="user", message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–í—Å—ë —Å—É–ø–µ—Ä' - —á–µ—Ä–Ω–æ–≤–∏–∫ –æ–¥–æ–±—Ä–µ–Ω")

        logging.info(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞")

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "ready" - –∫–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞ –∫ –¥–æ—Å—Ç–∞–≤–∫–µ

    logging.info(f"üìã –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –Ω–∞ 'ready'")

    await update_order_status(order_id, "ready")

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä —Ñ–æ—Ä–º–∞—Ç–∞

    if format_choice == "üì¶ –ü–µ—á–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è":

        # –ï—Å–ª–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ –ø–µ—á–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏

        logging.info(f"üì¶ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã–±—Ä–∞–ª –ø–µ—á–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏")

        

        await callback.message.answer(

            "üì¶ <b>–ü–µ—á–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤—ã–±—Ä–∞–Ω–∞!</b>\n\n"

            "–î–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–µ—á–∞—Ç–Ω–æ–π –∫–Ω–∏–≥–∏ –Ω–∞–º –Ω—É–∂–Ω—ã –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ. "

            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 455000, –†–µ—Å–ø—É–±–ª–∏–∫–∞ –¢–∞—Ç–∞—Ä—Å—Ç–∞–Ω, –≥. –ö–∞–∑–∞–Ω—å, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 52, –∫–≤. 43",

            parse_mode="HTML"

        )

        

        await state.set_state(DeliveryStates.waiting_for_address)

        

    else:

        # –ï—Å–ª–∏ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É

        logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–Ω–∏–≥–∏...")

        

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–∞ "waiting_final" –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏

        await update_order_status(order_id, "waiting_final")

        logging.info(f"üìö –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'waiting_final' –¥–ª—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏")

        

        await callback.message.answer(

            "üéâ <b>–í–∞—à–∞ –∫–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—Å ‚ù§Ô∏è</b>\n\n"

            "–ú—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –¥–ª—è –≤–∞—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é (PDF). "

            "–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",

            parse_mode="HTML"

        )

        

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—á–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="üì¶ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—á–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é", callback_data="upsell_print")],

            [InlineKeyboardButton(text="üìÑ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π", callback_data="continue_electronic")]

        ])

        

        await callback.message.answer(

            "–•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–∞–∫–∂–µ –ø–µ—á–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é –≤–∞—à–µ–π –∫–Ω–∏–≥–∏?",

            reply_markup=keyboard,

            parse_mode="HTML"

        )

    

    logging.info(f"‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ book_draft_ok –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

    await callback.answer()

    await log_state(callback.message, state)



# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∫–Ω–∏–≥–∏ ---

@dp.callback_query(F.data == "book_draft_edit")

async def book_draft_edit_callback(callback: types.CallbackQuery, state: FSMContext):

    logging.info(f"üéØ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ book_draft_edit –≤—ã–∑–≤–∞–Ω! User ID: {callback.from_user.id}")

    

    await callback.message.answer("–û–ø–∏—à–∏ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–Ω–∏–≥–µ. \n–ü—Ä–∏–º–µ—Ä: —É–∫–∞–∂–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∏ —á—Ç–æ –Ω–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏–∑–º–µ–Ω–∏—Ç—å.")

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∫–∏, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ—à–µ–ª –∫ –ø—Ä–∞–≤–∫–∞–º

    try:

        data = await state.get_data()

        order_id = data.get('order_id')

        from db import add_message_history

        await add_message_history(order_id, sender="user", message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å' –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")

        logging.info(f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")

    

    logging.info(f"üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ EditBookStates.adding_comments")

    await state.set_state(EditBookStates.adding_comments)

    await callback.answer()

    await log_state(callback.message, state)



# --- –¢–µ—Å—Ç–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ–ø–ª–∞—Ç—ã ---





# --- –ì–ª–∞–≤–∞ 2.7. –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–µ—Å–Ω–∏ ---

@dp.callback_query(F.data == "song_pay_2990")

async def song_pay_link(callback: types.CallbackQuery, state: FSMContext):

    logging.info(f"üîò –ö–Ω–æ–ø–∫–∞ 'üéô –ü–µ—Å–Ω—è ‚Äî 2990‚ÇΩ' –Ω–∞–∂–∞—Ç–∞! User ID: {callback.from_user.id}")

    

    try:

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞

        data = await state.get_data()

        order_id = data.get('order_id')

        product = data.get('product', '–ü–µ—Å–Ω—è')

        

        logging.info(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: order_id={order_id}, product={product}")

        

        if not order_id:

            await callback.message.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")

            await callback.answer()

            return

        

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–µ—Å–Ω–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        try:

            price = await get_product_price_async("–ü–µ—Å–Ω—è", "üíå –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è")

            format_name = "üíå –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è"

        except:

            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ

            price = 2990

            format_name = "üíå –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è"

        

        logging.info(f"üí∞ –¶–µ–Ω–∞ –ø–µ—Å–Ω–∏: {price} ‚ÇΩ")

        

        await state.update_data(format=format_name, price=price)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        from db import update_order_data

        await update_order_data(order_id, {'format': format_name, 'price': price})

        

        try:

            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa

            description = format_payment_description("–ü–µ—Å–Ω—è", format_name, order_id)

            payment_data = await create_payment(order_id, price, description, "–ü–µ—Å–Ω—è")

            

            logging.info(f"üí≥ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: {payment_data['payment_id']}")

            

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ state

            await state.update_data(

                payment_id=payment_data['payment_id'],

                payment_url=payment_data['confirmation_url']

            )

            

            keyboard = InlineKeyboardMarkup(inline_keyboard=[

                [InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å –ø–µ—Å–Ω—é", url=payment_data['confirmation_url'])],

                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],


            ])

            

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞

            data = await state.get_data()

            order_summary = ""

            

            await safe_edit_message(

                callback.message,

                f"{order_summary}\n"

                f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b>\n"

                f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{format_name}</b>\n"

                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price} ‚ÇΩ</b>\n\n"

                f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ:",

                reply_markup=keyboard,

                parse_mode="HTML"

            )

            

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

            await update_order_status(order_id, "waiting_payment")

            

            # –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ 24 –∏ 48 —á–∞—Å–æ–≤

            from db import create_payment_reminder_messages

            await create_payment_reminder_messages(order_id, callback.from_user.id)

            

        except Exception as e:

            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")

            


            keyboard = InlineKeyboardMarkup(inline_keyboard=[


            ])

            

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞

            data = await state.get_data()

            order_summary = ""

            

            await safe_edit_message(

                callback.message,

                f"{order_summary}\n"

                f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b>\n"

                f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{format_name}</b>\n"

                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price} ‚ÇΩ</b>\n\n",

                reply_markup=keyboard,

                parse_mode="HTML"

            )

        

        await callback.answer()

        await log_state(callback.message, state)

        

    except Exception as e:

        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ song_pay_link: {e}")

        await callback.message.answer(

            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."

        )

        await callback.answer()



# --- –ì–ª–∞–≤–∞ 2.7.1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–µ—Å–Ω—è ‚Äî 2990P" –∏–∑ –∞–¥–º–∏–Ω–∫–∏ ---

@dp.callback_query(F.data == "song_final_payment")

async def song_final_payment_handler(callback: types.CallbackQuery, state: FSMContext):

    logging.info(f"üîò –ö–Ω–æ–ø–∫–∞ 'üéô –ü–µ—Å–Ω—è ‚Äî 2990‚ÇΩ' (song_final_payment) –Ω–∞–∂–∞—Ç–∞! User ID: {callback.from_user.id}")

    logging.info(f"üîò Callback data: {callback.data}")

    logging.info(f"üîò Current state: {await state.get_state()}")

    

    try:

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞

        data = await state.get_data()

        order_id = data.get('order_id')

        product = data.get('product', '–ü–µ—Å–Ω—è')

        

        logging.info(f"üìã –î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞: order_id={order_id}, product={product}")

        

        if not order_id:

            await callback.message.answer("–û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")

            await callback.answer()

            return

        

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –ø–µ—Å–Ω–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

        try:

            price = await get_product_price_async("–ü–µ—Å–Ω—è", "üíå –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è")

            format_name = "üíå –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è"

        except:

            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ

            price = 2990

            format_name = "üíå –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è"

        

        logging.info(f"üí∞ –¶–µ–Ω–∞ –ø–µ—Å–Ω–∏: {price} ‚ÇΩ")

        

        await state.update_data(format=format_name, price=price)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        from db import update_order_data

        await update_order_data(order_id, {'format': format_name, 'price': price})

        

        try:

            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa

            description = format_payment_description("–ü–µ—Å–Ω—è", format_name, order_id)

            payment_data = await create_payment(order_id, price, description, "–ü–µ—Å–Ω—è")

            

            logging.info(f"üí≥ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: {payment_data['payment_id']}")

            

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ state

            await state.update_data(

                payment_id=payment_data['payment_id'],

                payment_url=payment_data['confirmation_url']

            )

            

            keyboard = InlineKeyboardMarkup(inline_keyboard=[

                [InlineKeyboardButton(text="–ó–∞–∫–∞–∑–∞—Ç—å –ø–µ—Å–Ω—é", url=payment_data['confirmation_url'])],

                [InlineKeyboardButton(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="check_payment")],


            ])

            

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞

            data = await state.get_data()

            order_summary = ""

            

            await safe_edit_message(

                callback.message,

                f"{order_summary}\n"

                f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b>\n"

                f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{format_name}</b>\n"

                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price} ‚ÇΩ</b>\n\n"

                f"–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç—ã –Ω–∏–∂–µ:",

                reply_markup=keyboard,

                parse_mode="HTML"

            )

            

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

            await update_order_status(order_id, "waiting_payment")

            

            # –°–æ–∑–¥–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ 24 –∏ 48 —á–∞—Å–æ–≤

            from db import create_payment_reminder_messages

            await create_payment_reminder_messages(order_id, callback.from_user.id)

            

        except Exception as e:

            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")

            


            keyboard = InlineKeyboardMarkup(inline_keyboard=[


            ])

            

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É –∑–∞–∫–∞–∑–∞

            data = await state.get_data()

            order_summary = ""

            

            await safe_edit_message(

                callback.message,

                f"{order_summary}\n"

                f"üí≥ <b>–û–ø–ª–∞—Ç–∞:</b>\n"

                f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{format_name}</b>\n"

                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price} ‚ÇΩ</b>\n\n",

                reply_markup=keyboard,

                parse_mode="HTML"

            )

        

        await callback.answer()

        await log_state(callback.message, state)

        

    except Exception as e:

        logging.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ song_final_payment_handler: {e}")

        await callback.message.answer(

            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."

        )

        await callback.answer()





# --- –ì–ª–∞–≤–∞ 2.9. –û–∂–∏–¥–∞–Ω–∏–µ –∏ –ø—Ä–æ–≥—Ä–µ–≤ ---

@dp.message(StateFilter(SongWaitingStates.waiting_and_warming))

async def song_waiting_and_warming(message: types.Message, state: FSMContext):

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è

    # –≠—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≥—Ä–µ–≤–∞ –∏ —É–¥–µ—Ä–∂–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–∞

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    order_id = data.get('order_id')
    if order_id:
        from db import add_message_history, create_or_update_order_notification
        await add_message_history(order_id, "user", message.text)
        await create_or_update_order_notification(order_id)
        logging.info(f"‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞ {order_id}: {message.text[:50]}...")

    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –ú—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –≤–∞—à–µ–π –ø–µ—Å–Ω–µ–π.")

    await log_state(message, state)



# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø–µ—Å–Ω–∏ (–ì–ª–∞–≤–∞ 2.5) ---

@dp.message(Command("send_draft"))

async def send_song_draft(message: types.Message, state: FSMContext):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–µ–Ω–µ–¥–∂–µ—Ä (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–æ–ª–∏)

    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞

    

    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã (—Ñ–æ—Ä–º–∞—Ç: /send_draft USER_ID)

    try:

        user_id = int(message.text.split()[1])

        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ:

        # 1. –ü–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î

        # 2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ SongDraftStates.waiting_for_draft

        # 3. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

        await message.answer(f"–ß–µ—Ä–Ω–æ–≤–∏–∫ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}. –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–î.")

    except (IndexError, ValueError):

        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /send_draft USER_ID")

    

    await log_state(message, state)



# --- –ì–ª–∞–≤–∞ 2.7. –†–∞–±–æ—Ç–∞ —Å –æ—Ç–∫–∞–∑–æ–º –æ—Ç –æ–ø–ª–∞—Ç—ã (—ç–º—É–ª—è—Ü–∏—è —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /remind_song) ---

@dp.message(StateFilter(lambda c: c.text == "/remind_song"))

async def remind_song_payment(message: types.Message, state: FSMContext):

    await message.answer("–í–æ–∑–º–æ–∂–Ω–æ, —Ü–µ–Ω–∞ –≤–∞—Å —Å–º—É—Ç–∏–ª–∞? –ú—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º.")

    await asyncio.sleep(5)

    await message.answer("–ì–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –ø–µ—Å–Ω—é –ø—Ä–æ—â–µ, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ –∏—Å–∫—Ä–µ–Ω–Ω–µ–π. –î–∞–π—Ç–µ –∑–Ω–∞—Ç—å, –µ—Å–ª–∏ –≤–∞–º —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.")

    await log_state(message, state)



# --- –ì–ª–∞–≤–∞ 2.10. –ü—Ä–µ–¥—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–µ—Å–Ω–∏ ---

@dp.message(StateFilter(SongFinalStates.waiting_for_final))

async def receive_song_final(message: types.Message, state: FSMContext):

    # –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–µ—Å–Ω–∏

    await state.update_data(song_final=message.text)

    await update_order_status((await state.get_data()).get('order_id'), "final_sent")

    

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    await message.answer("üéâ –í–æ—Ç –æ–Ω–∞ - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–≤–æ–µ–π –ø–µ—Å–Ω–∏ ‚ù§Ô∏è\n\n"

                        "–ú—ã –≤–ª–æ–∂–∏–ª–∏ –≤ —ç—Ç—É –ø–µ—Å–Ω—é –º–Ω–æ–≥–æ –ª—é–±–≤–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ–º –Ω–µ –º–µ–Ω—å—à–µ —Ç–µ–±—è. –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω–∞ —Ç—Ä–æ–Ω–µ—Ç –¥–æ –º—É—Ä–∞—à–µ–∫ ü•π")

    await message.answer(message.text)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä—Å–∏—é

    

    # –ö–Ω–æ–ø–∫–∏ —Ç–∞–∫–∏–µ –∂–µ, –∫–∞–∫ –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —á–µ—Ä–Ω–æ–≤–∏–∫–∞

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="–í—Å–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –æ—Ç–ª–∏—á–Ω–∞—è –ø–µ—Å–Ω—è", callback_data="song_draft_ok")],

        [InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="song_draft_edit")]

    ])

    await message.answer("üéâ –í–æ—Ç –æ–Ω–∞ - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–≤–æ–µ–π –ø–µ—Å–Ω–∏ ‚ù§Ô∏è\n\n"

                        "–ú—ã –≤–ª–æ–∂–∏–ª–∏ –≤ —ç—Ç—É –ø–µ—Å–Ω—é –º–Ω–æ–≥–æ –ª—é–±–≤–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ–º –Ω–µ –º–µ–Ω—å—à–µ —Ç–µ–±—è. –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω–∞ —Ç—Ä–æ–Ω–µ—Ç –¥–æ –º—É—Ä–∞—à–µ–∫ ü•π", reply_markup=keyboard)

    await state.set_state(SongDraftStates.draft_received)

    await log_state(message, state)



@dp.callback_query(F.data.in_(["song_final_ok", "song_final_edit"]))

async def song_final_feedback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    if callback.data == "song_final_ok":

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –¥–æ—Å—Ç–∞–≤–∫–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏

        await callback.message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ—è –ø–µ—Å–Ω—è –≥–æ—Ç–æ–≤–∞ –∫ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏.")

        await state.set_state(SongFinalStates.waiting_for_final)

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É

        data = await state.get_data()

        order_id = data.get('order_id')

        await add_outbox_task(

            order_id=order_id,

            user_id=callback.from_user.id,

            type_="manager_notification",

            content=f"–ó–∞–∫–∞–∑ #{order_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–µ–¥—Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–µ—Å–Ω–∏. –ì–æ—Ç–æ–≤ –∫ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏."

        )

        

    elif callback.data == "song_final_edit":

        await callback.message.answer(

            "–ü–æ–¥–µ–ª–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å –≤ –ø–µ—Å–Ω–µ? ‚ú®\n"

            "–£–∫–∞–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ: –≤ –∫–∞–∫–æ–º –∫—É–ø–ª–µ—Ç–µ, –∫–∞–∫–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Å—Ç—Ä–æ—á–∫—É –Ω—É–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å ‚Äî —Ç–∞–∫ –º—ã —Å–º–æ–∂–µ–º –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ üíï"

        )

        await state.set_state(SongFinalStates.collecting_feedback)

    

    await log_state(callback.message, state)





# --- –ì–ª–∞–≤–∞ 2.12. –î–æ—Å—Ç–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–µ—Å–Ω–∏ ---

@dp.message(StateFilter(SongFinalStates.waiting_for_final))

async def deliver_final_song(message: types.Message, state: FSMContext):

    # –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –ø–µ—Å–Ω–∏

    data = await state.get_data()

    order_id = data.get('order_id')

    

    await update_order_status(order_id, "ready")

    

    # –ì–ª–∞–≤–∞ 2.12. –î–æ—Å—Ç–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–µ—Å–Ω–∏

    await message.answer("üéµ –í–∞—à–∞ –ø–µ—Å–Ω—è –≥–æ—Ç–æ–≤–∞! –ö–∞–∫ –≤–∞–º? –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω–∞ –≤—ã–∑–æ–≤–µ—Ç —Å–∏–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏ üíñ")

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ–≤–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–Ω–∏–≥–∏ —Å—Ä–∞–∑—É

    await message.answer("üìñ –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª–∏ –Ω–∞–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞. –ê —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –∏ –∫–Ω–∏–≥—É?")

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="üìñ –°–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É", callback_data="create_book_after_song")],

        [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_song_order")]

    ])

    

    await message.answer("üìö –ö–Ω–∏–≥–∞ —Å—Ç–∞–Ω–µ—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫ –≤–∞—à–µ–π –ø–µ—Å–Ω–µ!", reply_markup=keyboard)

    

    # –ü–µ—Å–Ω—è —Å—á–∏—Ç–∞–µ—Ç—Å—è –≥–æ—Ç–æ–≤–æ–π –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π

    await state.set_state(SongFinalStates.final_received)

    await log_state(message, state)



# --- –ì–ª–∞–≤–∞ 2.13. –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ ---

@dp.callback_query(F.data == "song_liked")

async def song_liked_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é

    try:

        data = await state.get_data()

        order_id = data.get('order_id')

        from db import add_message_history

        await add_message_history(order_id, sender="user", message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è")

    except Exception:

        pass

    

    # –°–æ–≥–ª–∞—Å–Ω–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø.7: –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–í—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å" –≤—ã–¥–∞–µ–º —Ç–æ–ª—å–∫–æ "–û—Ç–ª–∏—á–Ω–æ..." –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫

    await callback.message.answer(

        "üéâ –û—Ç–ª–∏—á–Ω–æ! –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª–∏ –Ω–∞–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –ø–æ–¥–∞—Ä–∫–∞!"

    )

    await log_state(callback.message, state)



@dp.callback_query(F.data == "song_needs_edit")

async def song_needs_edit_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é

    try:

        data = await state.get_data()

        order_id = data.get('order_id')

        from db import add_message_history

        await add_message_history(order_id, sender="user", message="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–µ—Å–Ω–∏")

    except Exception:

        pass

    

    await callback.message.answer("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å? –ú—ã –≥–æ—Ç–æ–≤—ã –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏.")

    await state.set_state(SongFinalStates.collecting_final_feedback)

    await log_state(callback.message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±–æ—Ä–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–∞–≤–æ–∫

@dp.message(StateFilter(SongFinalStates.collecting_final_feedback))

async def collect_final_feedback(message: types.Message, state: FSMContext):

    data = await state.get_data()

    order_id = data.get('order_id')

    

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—É

    try:

        from db import add_message_history

        await add_message_history(order_id, sender="user", message=f"–ü—Ä–∞–≤–∫–∏ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–µ—Å–Ω–µ: {message.text}")

    except Exception:

        pass

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä—É

    await add_outbox_task(

        order_id=order_id,

        user_id=message.from_user.id,

        type_="manager_notification",

        content=f"–ó–∞–∫–∞–∑ #{order_id}: –ü—Ä–∞–≤–∫–∏ –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–µ—Å–Ω–µ: {message.text}"

    )

    

    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏! –ú—ã –≤–Ω–µ—Å–µ–º –ø—Ä–∞–≤–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é.")

    

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–∂–∏–¥–∞–Ω–∏—é —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏

    await state.set_state(SongFinalStates.waiting_for_final)

    await update_order_status(order_id, "editing")

    await log_state(message, state)



# –°—Ç–∞—Ä—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

@dp.callback_query(F.data == "song_final_ok")

async def song_feedback_and_completion(callback: types.CallbackQuery, state: FSMContext):

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫

    await song_liked_callback(callback, state)



# –£–î–ê–õ–ï–ù –î–£–ë–õ–ò–†–£–Æ–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ create_book_after_song_callback –≤—ã—à–µ

    

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∏–º–µ–Ω–∏

    await start_book_creation_flow(callback, state)

    await log_state(callback.message, state)



@dp.callback_query(F.data == "finish_song_order")

async def finish_song_order(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    data = await state.get_data()

    order_id = data.get('order_id')

    

    await callback.message.answer(

        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª –∏–º–µ–Ω–Ω–æ –Ω–∞—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ —Å–æ–∫—Ä–æ–≤–µ–Ω–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞üíù\n\n"

        "–ö–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å —Å–Ω–æ–≤–∞ –ø–æ–¥–∞—Ä–∏—Ç—å —ç–º–æ—Ü–∏–∏ –∏ —Ç—Ä–æ–Ω—É—Ç—å —Å–µ—Ä–¥—Ü–µ –±–ª–∏–∑–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è ü´∂üèª\n\n"

        "–ú—ã –±—É–¥–µ–º –∑–¥–µ—Å—å –¥–ª—è —Ç–µ–±—è,\n"

        "–ö–æ–º–∞–Ω–¥–∞ \"–í —Å–∞–º–æ–µ —Å–µ—Ä–¥—Ü–µ\" üíñ",

        parse_mode="HTML"

    )

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞

    await add_outbox_task(

        order_id=order_id,

        user_id=callback.from_user.id,

        type_="manager_notification",

        content=f"–ó–∞–∫–∞–∑ #{order_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –∑–∞–∫–∞–∑ –ø–µ—Å–Ω–∏. –ü–µ—Å–Ω—è –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."

    )

    

    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    await state.clear()

    await log_state(callback.message, state)



@dp.callback_query(F.data == "send_phone")

async def on_send_phone(callback: types.CallbackQuery, state: FSMContext):

    await callback.message.answer(

        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ üìé ‚Üí –ö–æ–Ω—Ç–∞–∫—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µ."

    )

    await callback.answer()

    await log_state(callback.message, state)







@dp.callback_query(F.data == "decline_phone")

async def on_decline_phone(callback: types.CallbackQuery, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –Ω–æ–º–µ—Ä –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω

    await state.update_data(phone=None)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞

    await show_welcome_message(callback.message, state)

    await callback.answer()

    await log_state(callback.message, state)



@dp.callback_query(F.data == "start_create_book")

async def choose_product(callback: types.CallbackQuery, state: FSMContext):

    try:

        await callback.answer()

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="üíå –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è", callback_data="product_song")],

            [InlineKeyboardButton(text="üìñ –ö–Ω–∏–≥–∞", callback_data="product_book")]

        ])

        await callback.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?", reply_markup=keyboard)

        await state.set_state(ProductStates.choosing_product)

        await log_state(callback.message, state)

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ choose_product: {e}")

        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

        try:

            await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")

        except:

            pass



# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞

async def process_book_choice(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–Ω–∏–≥–∏"""

    try:

        data = await state.get_data()

        product = "–ö–Ω–∏–≥–∞"

        await state.update_data(product=product)

        user_id = message.from_user.id

        order_id = data.get('order_id')

        

        if not order_id:

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            user_data = await state.get_data()

            

            # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            from db import get_last_order_username

            last_username = await get_last_order_username(user_id)

            

            order_data = {

                "product": product,

                "user_id": user_id,

                "username": last_username or user_data.get('username') or message.from_user.username,

                "first_name": user_data.get('first_name') or message.from_user.first_name,

                "last_name": user_data.get('last_name') or message.from_user.last_name

            }

            order_id = await create_order(user_id, order_data)

            await state.update_data(order_id=order_id)

            await update_order_status(order_id, "product_selected")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            from db import create_or_update_user_timer
            await create_or_update_user_timer(user_id, order_id, "product_selected", product)
            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è {product}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∑–∞–∫–∞–∑ {order_id}")

        

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π üë©üèº", callback_data="gender_female")],

            [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π üßëüèº", callback_data="gender_male")],

        ])

        await message.answer("–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä ‚ú®\n–ú—ã –ø–æ–∑–∞–±–æ—Ç–∏–º—Å—è –æ —Ç–æ–º, —á—Ç–æ–±—ã —Ç–≤–æ—è –∫–Ω–∏–≥–∞ –ø–æ–ª—É—á–∏–ª–∞—Å—å –¥—É—à–µ–≤–Ω–æ–π –∏ –±–µ—Ä–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –º—ã –Ω–∞—á–Ω—ë–º —Å–æ–±–∏—Ä–∞—Ç—å —Ç–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é üìñ\n\nüë§ –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=keyboard)

        await state.set_state(GenderStates.choosing_gender)

        await log_state(message, state)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_book_choice: {e}")

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



async def process_song_choice(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–µ—Å–Ω–∏"""

    try:

        data = await state.get_data()

        product = "–ü–µ—Å–Ω—è"

        await state.update_data(product=product)

        user_id = message.from_user.id

        order_id = data.get('order_id')

        

        if not order_id:

            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            user_data = await state.get_data()

            

            # –ü–æ–ª—É—á–∞–µ–º username –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            from db import get_last_order_username

            last_username = await get_last_order_username(user_id)

            

            order_data = {

                "product": product,

                "user_id": user_id,

                "username": last_username or user_data.get('username') or message.from_user.username,

                "first_name": user_data.get('first_name') or message.from_user.first_name,

                "last_name": user_data.get('last_name') or message.from_user.last_name

            }

            order_id = await create_order(user_id, order_data)

            await state.update_data(order_id=order_id)

            await update_order_status(order_id, "product_selected")

        

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="–ñ–µ–Ω—Å–∫–∏–π üë©üèº", callback_data="song_gender_female")],

            [InlineKeyboardButton(text="–ú—É–∂—Å–∫–æ–π üßëüèº", callback_data="song_gender_male")],

        ])

        await message.answer("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–¥–∞—Ä–∫–∞‚ú®\n–ú—ã —Å–¥–µ–ª–∞–µ–º –≤—Å–µ, —á—Ç–æ–±—ã —Ç–≤–æ–π –ø–æ–¥–∞—Ä–æ–∫ –ø–æ–ª—É—á–∏–ª—Å—è —Ç—ë–ø–ª—ã–º –∏ —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º ü´∂üèª\n\n–û—Ç–≤–µ—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã —Ç–≤–æ—è –ø–µ—Å–Ω—è –ø–æ–ø–∞–ª–∞ –≤ —Å–∞–º–æ–µ —Å–µ—Ä–¥—Ü–µ \n\n–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=keyboard)

        await state.set_state(SongGenderStates.choosing_gender)

        await log_state(message, state)

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_song_choice: {e}")

        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞

@dp.message(StateFilter(ProductStates.choosing_product))

async def handle_product_choice_text(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø—Ä–æ–¥—É–∫—Ç–∞"""

    text = message.text.lower().strip()

    

    if text in ["–∫–Ω–∏–≥–∞", "book", "üìñ"]:

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫–Ω–∏–≥—É

        await process_book_choice(message, state)

    elif text in ["–ø–µ—Å–Ω—è", "song", "‚ù§Ô∏è", "üíå"]:

        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –ø–µ—Å–Ω—é

        await process_song_choice(message, state)

    elif text in ["—Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫", "–ø–æ–¥–∞—Ä–æ–∫", "–Ω–∞—á–∞—Ç—å", "—Å—Ç–∞—Ä—Ç"]:

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="‚ù§Ô∏è –ü–µ—Å–Ω—è", callback_data="product_song")],

            [InlineKeyboardButton(text="üìñ –ö–Ω–∏–≥–∞", callback_data="product_book")]

        ])

        await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å?", reply_markup=keyboard)

        await log_state(message, state)

    else:

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∫–Ω–æ–ø–∫–∞—Ö

        await message.answer(

            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ '–ö–Ω–∏–≥–∞' –∏–ª–∏ '–ü–µ—Å–Ω—è', –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É."

        )

        await log_state(message, state)



async def process_outbox_tasks(bot: Bot):
    logging.info("üöÄ –ü–†–û–¶–ï–°–° OUTBOX –ó–ê–ü–£–©–ï–ù - –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á")

    while True:

        try:
            from db import get_order
            logging.info("üîÑ –ü–†–û–í–ï–†–Ø–ï–ú OUTBOX –ó–ê–î–ê–ß–ò...")
            tasks = await get_pending_outbox_tasks()
            logging.info(f"üîç –†–ï–ó–£–õ–¨–¢–ê–¢ –ó–ê–ü–†–û–°–ê: –Ω–∞–π–¥–µ–Ω–æ {len(tasks) if tasks else 0} pending –∑–∞–¥–∞—á –≤ outbox")

            if tasks:

                logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(tasks)} pending –∑–∞–¥–∞—á –≤ outbox")

            

            for task in tasks:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ task –Ω–µ —è–≤–ª—è–µ—Ç—Å—è None
                if not task or not isinstance(task, dict):
                    logging.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∑–∞–¥–∞—á–∞: {task}")
                    continue
                
                try:
                    logging.info(f"üîß –ù–ê–ß–ò–ù–ê–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ –ó–ê–î–ê–ß–ò: {task}")
                    logging.info(f"üîß –ü–†–û–í–ï–†–Ø–ï–ú TASK: type={type(task)}, is_dict={isinstance(task, dict)}")
                    
                    if not task or not isinstance(task, dict):
                        logging.error(f"‚ùå TASK –ù–ï –°–õ–û–í–ê–†–¨: {task}")
                        continue
                        
                    user_id = task.get('user_id')
                    type_ = task.get('type')
                    content = task.get('content')
                    task_id = task.get('id')
                    
                    if not all([user_id, type_, task_id]):
                        logging.error(f"‚ùå –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–¥–∞—á–µ: user_id={user_id}, type={type_}, task_id={task_id}")
                        continue
                    order_id = task.get('order_id')
                    logging.info(f"üîß –ò–ó–í–õ–ï–ß–ï–ù–´ –î–ê–ù–ù–´–ï –ó–ê–î–ê–ß–ò {task_id}: user_id={user_id}, type={type_}, order_id={order_id}")
                except KeyError as e:
                    logging.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –≤ –∑–∞–¥–∞—á–µ {task}: {e}")
                    continue
                except Exception as e:
                    logging.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ {task}: {e}")
                    import traceback
                    logging.error(f"‚ùå TRACEBACK: {traceback.format_exc()}")
                    continue

                

                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ None
                safe_content = str(content)[:100] if content else 'None'
                safe_comment = (task.get('comment') or '')[:50]
                logging.info(f"üì§ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–¥–∞—á—É {task_id}: type={type_}, user_id={user_id}, content={safe_content}..., file_type={task.get('file_type')}, comment={safe_comment}...")

                

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å user_id

                if not user_id or user_id <= 0 or user_id in [12345, 0, -1]:

                    logging.error(f"‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_id {user_id} –≤ –∑–∞–¥–∞—á–µ {task_id}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É.")

                    await update_outbox_task_status(task_id, 'failed')

                    continue

                

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –≤–µ—Ä—Å–∏–π

                if order_id:

                    try:

                        order_data = await get_order(order_id)

                        if order_data:

                            order_status = order_data.get('status')

                            if order_status == 'ready':

                                logging.info(f"üìö –ó–∞–∫–∞–∑ {order_id} –∏–º–µ–µ—Ç —Å—Ç–∞—Ç—É—Å 'ready' - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É {task_id} –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è")

                                await update_outbox_task_status(task_id, 'sent')

                                continue

                            elif order_status == 'completed':

                                logging.info(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} –∑–∞–≤–µ—Ä—à–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É {task_id}")

                                await update_outbox_task_status(task_id, 'sent')

                                continue

                    except Exception as e:

                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

                

                if type_ == 'text' or type_ == 'text_message':

                    try:

                        logging.info(f"üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {content[:50]}...")

                        

                        # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

                        await bot.send_message(user_id, content, parse_mode="HTML")

                        await update_outbox_task_status(task_id, 'sent')

                        logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

                    except Exception as e:

                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {task_id}: {e}")

                        await update_outbox_task_status(task_id, 'failed')

                elif type_ == 'stories':

                    try:

                        logging.info(f"üìñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—é–∂–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {content[:50]}...")

                        

                        # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—é–∂–µ—Ç–æ–≤

                        from aiogram.types import Message

                        from aiogram.fsm.context import FSMContext

                        

                        # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

                        virtual_message = Message(

                            message_id=0,

                            date=datetime.now(),

                            chat=types.Chat(id=user_id, type="private"),

                            from_user=types.User(id=0, is_bot=False, first_name="Manager"),

                            text=content

                        )

                        

                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                        from aiogram.fsm.storage.base import StorageKey

                        storage_key = StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id)

                        

                        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è

                        from aiogram.fsm.context import FSMContext

                        state = FSMContext(storage=storage, key=storage_key)

                        

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                        current_state = await state.get_state()

                        

                        if current_state == "ManagerContentStates:waiting_story_options":

                            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü

                            await state.set_state(BookFinalStates.choosing_pages)

                            

                            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞

                            order_id = task.get('order_id')

                            if order_id:

                                await state.update_data(order_id=order_id)

                            

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ page_selection

                            await bot.send_message(user_id, content)

                            logging.info(f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                        elif current_state == "StoryCustomizationStates:waiting_for_stories":

                            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–∂–∏–¥–∞–µ—Ç —Å—é–∂–µ—Ç—ã - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Ö (—Å—Ç–∞—Ä—ã–π –∫–æ–¥)

                            await receive_stories_from_manager(virtual_message, state)

                            logging.info(f"‚úÖ –°—é–∂–µ—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                        else:

                            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å—é–∂–µ—Ç–æ–≤ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

                            await bot.send_message(user_id, content)

                            logging.info(f"‚úÖ –°—é–∂–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                            logging.info(f"üîç –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {current_state}")

                        

                        await update_outbox_task_status(task_id, 'sent')

                        logging.info(f"‚úÖ –°—é–∂–µ—Ç—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")

                    except Exception as e:

                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—é–∂–µ—Ç–æ–≤ {task_id}: {e}")

                        await update_outbox_task_status(task_id, 'failed')

                elif type_ == 'file':

                    try:

                        file_type = (task.get('file_type') or '').lower()

                        comment = task.get('comment') or ''
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ–±—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                        is_general_message = task.get('is_general_message', 0) == 1

                        logging.info(f"üì§ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –≤ file: '{file_type}'")
                        logging.info(f"üì§ –û–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {is_general_message}")

                        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                        if is_general_message:
                            logging.info(f"üì§ –û–ë–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
                            logging.info(f"üì§ –§–∞–π–ª: {content}, –¢–∏–ø: {file_type}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
                            if not os.path.exists(content):
                                logging.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {content}")
                                await update_outbox_task_status(task_id, 'failed')
                                continue
                            
                            try:
                                # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                                file_size_mb = os.path.getsize(content) / (1024 * 1024)
                                logging.info(f"üì§ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: {file_size_mb:.2f} –ú–ë")
                                
                                # –î–ª—è –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –∫–∞–∫ –Ω–∞—Ç–∏–≤–Ω—ã–µ —Ç–∏–ø—ã, –Ω–æ –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                                input_file = FSInputFile(content)
                                
                                if file_type in ['image', 'jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp']:
                                    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                                    logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –§–û–¢–û: {file_type}")
                                    await bot.send_photo(
                                        user_id, 
                                        input_file, 
                                        caption=comment if comment else None
                                    )
                                elif file_type in ['video', 'mp4', 'avi', 'mov', 'mkv', 'webm']:
                                    # –í–∏–¥–µ–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ
                                    logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –í–ò–î–ï–û: {file_type}")
                                    await bot.send_video(
                                        user_id, 
                                        input_file, 
                                        caption=comment if comment else None
                                    )
                                elif file_type in ['audio', 'mp3', 'wav', 'ogg', 'm4a', 'aac']:
                                    # –ê—É–¥–∏–æ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∞—É–¥–∏–æ
                                    logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –ê–£–î–ò–û: {file_type}")
                                    await bot.send_audio(
                                        user_id, 
                                        input_file, 
                                        caption=comment if comment else None
                                    )
                                else:
                                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã (PDF, –¥–æ–∫—É–º–µ–Ω—Ç—ã) - –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç—ã
                                    logging.info(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –î–û–ö–£–ú–ï–ù–¢: {file_type}")
                                    await bot.send_document(
                                        user_id, 
                                        input_file, 
                                        caption=comment if comment else None
                                    )
                                
                                # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
                                await update_outbox_task_status(task_id, 'sent')
                                logging.info(f"‚úÖ –û–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∞–π–ª–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                                continue
                                
                            except Exception as send_error:
                                error_msg = str(send_error)
                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {task_id}: {error_msg}")
                                await update_outbox_task_status(task_id, 'failed')
                                continue

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º –∏–ª–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –ø–µ—Å–Ω–∏

                        order_id = task.get('order_id')
                        logging.info(f"üìã –ü–æ–ª—É—á–µ–Ω order_id: {order_id} –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
                        
                        if not order_id:
                            logging.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç order_id –≤ –∑–∞–¥–∞—á–µ {task_id}")
                            await update_outbox_task_status(task_id, 'failed')
                            continue
                        
                        # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å—Ä–∞–∑—É! –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–∏–ø –∏ –¥–æ–±–∞–≤–∏–º –∫–Ω–æ–ø–∫–∏

                        is_song_draft = False

                        is_song_final = False

                        is_book_draft = False

                        is_book_demo = False

                        is_song_demo = False

                        

                        logging.info(f"üîç –û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")

                        logging.info(f"üìÑ –¢–∏–ø —Ñ–∞–π–ª–∞: {file_type}, –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}")

                        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
                        from db import get_order
                        order = await get_order(order_id)

                        if order and order.get('order_data'):

                            import json

                            try:

                                order_data = json.loads(order.get('order_data', '{}')) if order and order.get('order_data') else {}

                                product = order_data.get('product', '')

                                order_status = order.get('status', '')

                                

                                logging.info(f"üìä –ü—Ä–æ–¥—É–∫—Ç: {product}, –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order_status}")
                                
                                logging.info(f"üìã –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}:")
                                logging.info(f"üìã - –ó–∞–¥–∞—á–∞ ID: {task_id}")
                                logging.info(f"üìã - –ó–∞–∫–∞–∑ ID: {order_id}")
                                logging.info(f"üìã - –ü—Ä–æ–¥—É–∫—Ç: '{product}'")
                                logging.info(f"üìã - –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: '{order_status}'")
                                logging.info(f"üìã - –¢–∏–ø —Ñ–∞–π–ª–∞: '{file_type}'")
                                logging.info(f"üìã - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: '{comment}'")

                                

                                if product == '–ü–µ—Å–Ω—è':

                                    logging.info(f"üéµ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø–µ—Å–Ω–∏: {order_status}, file_type: {file_type}")

                                    # –ï—Å–ª–∏ —ç—Ç–æ –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –ø–µ—Å–Ω–∏ (–∞—É–¥–∏–æ –∏–ª–∏ –≤–∏–¥–µ–æ)
                                    if file_type in ['demo_audio', 'demo_video'] or order_status in ['waiting_manager', 'demo_content', 'questions_completed']:
                                        
                                        is_song_demo = True
                                        
                                        logging.info(f"üéµ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Å–Ω–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                                        
                                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                                        await update_order_status(order_id, "demo_sent")

                                    # –ï—Å–ª–∏ —ç—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫/–ø—Ä–µ–¥—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–µ—Å–Ω–∏

                                    elif file_type == 'mp3' and order_status in ['paid', 'waiting_draft', 'editing', 'draft_sent', 'prefinal_sent']:

                                        is_song_draft = True

                                        logging.info(f"üéµ –û–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ—Ä–Ω–æ–≤–∏–∫/–ø—Ä–µ–¥—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–µ—Å–Ω–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                    # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–µ—Å–Ω–∏

                                    elif file_type == 'mp3' and order_status in ['waiting_final', 'ready']:

                                        is_song_final = True

                                        logging.info(f"üéº –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–µ—Å–Ω–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                    else:

                                        logging.info(f"‚ùå –ù–ï —á–µ—Ä–Ω–æ–≤–∏–∫/—Ñ–∏–Ω–∞–ª –ø–µ—Å–Ω–∏: product={product}, file_type={file_type}, status={order_status}")

                                        logging.info(f"üîç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –ø–µ—Å–Ω–∏: paid, waiting_draft, editing, draft_sent, prefinal_sent, waiting_final")

                                elif product == '–ö–Ω–∏–≥–∞':

                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∫–Ω–∏–≥–∏

                                    logging.info(f"üìñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–Ω–∏–≥–∏: file_type={file_type}, status={order_status}")

                                    

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–∫–∞–∑–∞

                                    if order_status in ['questions_completed', 'waiting_manager', 'demo_sent', 'demo_content']:

                                        is_book_demo = True

                                        logging.info(f"üìñ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –∫–Ω–∏–≥–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                        logging.info(f"üìñ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order_status}")

                                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

                                        await update_order_status(order_id, "demo_sent")

                                    elif order_status in ['waiting_draft', 'draft_sent', 'editing']:

                                        is_book_draft = True

                                        logging.info(f"üìñ –û–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ –∫–Ω–∏–≥–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                        logging.info(f"üìñ –ü—Ä–æ–¥—É–∫—Ç: {product}, –°—Ç–∞—Ç—É—Å: {order_status}")

                                    elif order_status == 'ready':

                                        is_book_final = True

                                        logging.info(f"üìö –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–Ω–∏–≥–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                        logging.info(f"üìö –ü—Ä–æ–¥—É–∫—Ç: {product}, –°—Ç–∞—Ç—É—Å: {order_status}")

                                        logging.info(f"üìö –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–Ω–∏–≥–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É")

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–∫—Å—Ç—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è

                                    elif '–¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç' in comment.lower() or '–ø—Ä–∏–º–µ—Ä—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è' in comment.lower():

                                        is_book_demo = True

                                        logging.info(f"üìñ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –∫–Ω–∏–≥–∏ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

                                        await update_order_status(order_id, "demo_sent")

                                    elif '—á–µ—Ä–Ω–æ–≤–∏–∫' in comment.lower() or '–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ' in comment.lower():

                                        is_book_draft = True

                                        logging.info(f"üìñ –û–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ –∫–Ω–∏–≥–∏ –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                    else:

                                        logging.info(f"üìñ –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –∫–Ω–∏–≥–∏: file_type={file_type}, status={order_status}")

                                else:

                                    # –î–ª—è –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ - –æ–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤

                                    logging.info(f"üìñ –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è {product}: file_type={file_type}, status={order_status}")

                            except Exception as e:

                                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞: {e}")

                        else:

                            logging.warning(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

                        
                        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –î–ï–ú–û-–ö–û–ù–¢–ï–ù–¢–ê
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É –∑–∞–∫–∞–∑–∞ (–ü–†–ò–û–†–ò–¢–ï–¢ #1)
                        if order:
                            try:
                                order_data = json.loads(order.get('order_data', '{}')) if order.get('order_data') else {}
                                product = order_data.get('product', '')
                                order_status = order.get('status', '')
                                
                                # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –¥–µ–º–æ - —ç—Ç–æ –¢–û–ß–ù–û –¥–µ–º–æ
                                if order_status in ['waiting_manager', 'demo_content', 'questions_completed']:
                                    if product == '–ö–Ω–∏–≥–∞':
                                        is_book_demo = True
                                        logging.info(f"üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û: —Å—Ç–∞—Ç—É—Å {order_status} -> is_book_demo=True")
                                    elif product == '–ü–µ—Å–Ω—è':
                                        is_song_demo = True
                                        logging.info(f"üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û: —Å—Ç–∞—Ç—É—Å {order_status} -> is_song_demo=True")
                                        
                            except Exception as e:
                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–º–æ –ø–æ —Å—Ç–∞—Ç—É—Å—É: {e}")
                        
                        # –ï—Å–ª–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –µ—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–µ–º–æ - —ç—Ç–æ –¥–µ–º–æ (–ü–†–ò–û–†–ò–¢–ï–¢ #2)
                        demo_keywords = ['–¥–µ–º–æ', 'demo', '–ø—Ä–æ–±–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', '–ø—Ä–∏–º–µ—Ä—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è', '–æ–±—Ä–∞–∑—Ü—ã']
                        if any(keyword in comment.lower() for keyword in demo_keywords):
                            if order:
                                try:
                                    order_data = json.loads(order.get('order_data', '{}')) if order.get('order_data') else {}
                                    product = order_data.get('product', '')
                                    if product == '–ö–Ω–∏–≥–∞':
                                        is_book_demo = True
                                        logging.info(f"üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ -> is_book_demo=True")
                                    elif product == '–ü–µ—Å–Ω—è':
                                        is_song_demo = True
                                        logging.info(f"üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ -> is_song_demo=True")
                                except Exception as e:
                                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–µ–º–æ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {e}")
                        
                        # –ü–û–°–õ–ï–î–ù–Ø–Ø –ü–û–ü–´–¢–ö–ê: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–æ—Å—å, –Ω–æ –µ—Å—Ç—å —Ñ–∞–π–ª - –¥–µ–ª–∞–µ–º –¥–µ–º–æ
                        if not any([is_song_draft, is_song_final, is_book_draft, is_book_demo, is_song_demo]):
                            if order:
                                try:
                                    order_data = json.loads(order.get('order_data', '{}')) if order.get('order_data') else {}
                                    product = order_data.get('product', '')
                                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª –∏ –ø—Ä–æ–¥—É–∫—Ç, –Ω–æ —Ç–∏–ø –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è - –¥–µ–ª–∞–µ–º –¥–µ–º–æ
                                    if product == '–ö–Ω–∏–≥–∞' and file_type in ['jpg', 'jpeg', 'png', 'pdf']:
                                        is_book_demo = True
                                        logging.info(f"üîß –†–ï–ó–ï–†–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Ñ–∞–π–ª {file_type} –¥–ª—è –∫–Ω–∏–≥–∏ -> is_book_demo=True")
                                    elif product == '–ü–µ—Å–Ω—è' and file_type in ['mp3', 'wav', 'demo_audio', 'demo_video']:
                                        is_song_demo = True
                                        logging.info(f"üîß –†–ï–ó–ï–†–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: —Ñ–∞–π–ª {file_type} –¥–ª—è –ø–µ—Å–Ω–∏ -> is_song_demo=True")
                                except Exception as e:
                                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏: {e}")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤
                        logging.info(f"üìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –¢–ò–ü–û–í –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}:")
                        logging.info(f"üìã - is_song_draft: {is_song_draft}")
                        logging.info(f"üìã - is_song_final: {is_song_final}")
                        logging.info(f"üìã - is_book_draft: {is_book_draft}")
                        logging.info(f"üìã - is_book_demo: {is_book_demo}")
                        logging.info(f"üìã - is_song_demo: {is_song_demo}")

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                        if not os.path.exists(content):
                            logging.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {content}")
                            if safe_task_id != '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                                await update_outbox_task_status(safe_task_id, 'failed')
                            continue
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                        try:
                            file_size_mb = os.path.getsize(content) / (1024 * 1024)
                            logging.info(f"üìÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª {content} —Ä–∞–∑–º–µ—Ä–æ–º {file_size_mb:.1f}MB")
                        except Exception as e:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ {content}: {e}")

                        # –û–±—ã—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤

                        if file_type == 'pdf':

                            input_file = FSInputFile(content)
                            
                            logging.info(f"üîç –û–¢–õ–ê–î–ö–ê PDF: is_book_draft={is_book_draft}, comment='{comment}', order_id={order_id}")

                            

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º –∫–Ω–∏–≥–∏

                            if is_book_draft:

                                # –î–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∫–Ω–∏–≥–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏

                                keyboard = InlineKeyboardMarkup(inline_keyboard=[

                                    [InlineKeyboardButton(text="–í—Å–µ —Å—É–ø–µ—Ä", callback_data="book_draft_ok")],

                                    [InlineKeyboardButton(text="–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏", callback_data="book_draft_edit")]

                                ])

                                

                                # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∫–Ω–∏–≥–∏

                                additional_text = "\n\n–í–æ—Ç –æ–Ω–∏ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–≤–æ–µ–π –∫–Ω–∏–≥–∏ üìñ\n"

                                additional_text += "–ú—ã –≤–ª–æ–∂–∏–ª–∏ –≤ –Ω–∏—Ö –º–Ω–æ–≥–æ —Ç–µ–ø–ª–∞ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ–º –Ω–µ –º–µ–Ω—å—à–µ —Ç–µ–±—è. –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω–∏ —Ç—Ä–æ–Ω—É—Ç —Ç–≤–æ—ë —Å–µ—Ä–¥—Ü–µ üíï\n\n"

                                additional_text += "–ï—Å–ª–∏ —Ç–µ–±–µ –≤—Å—ë –Ω—Ä–∞–≤–∏—Ç—Å—è ‚Äî –∂–º–∏ \"–í—Å—ë —Å—É–ø–µ—Ä\".\n"

                                additional_text += "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ ‚Äî –Ω–∞–∂–º–∏ \"–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏\"."

                                full_caption = comment + additional_text

                                

                                try:
                                    await bot.send_document(user_id, input_file, caption=full_caption, reply_markup=keyboard)

                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–Ω–æ–≤–∏–∫
                                    if any(keyword in comment.lower() for keyword in ['—á–µ—Ä–Ω–æ–≤–∏–∫', '–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ', '–≥–æ—Ç–æ–≤', '–≥–æ—Ç–æ–≤–æ']):
                                        await update_order_status(order_id, "draft_sent")
                                        logging.info(f"üìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ draft_sent")
                                    else:
                                        logging.info(f"üìã –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–Ω–µ —á–µ—Ä–Ω–æ–≤–∏–∫)")
                                    
                                    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
                                    await update_outbox_task_status(task_id, 'sent')
                                    logging.info(f"‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ –∫–Ω–∏–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É—Å–ø–µ—à–Ω–æ")
                                    
                                except Exception as send_error:
                                    error_msg = str(send_error)
                                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ {task_id}: {error_msg}")
                                    
                                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
                                    await increment_outbox_retry_count(task_id)
                                    current_retry_count = task.get('retry_count', 0) + 1
                                    max_retries = task.get('max_retries', 5)
                                    
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è –æ –ø–æ–≤—Ç–æ—Ä–µ
                                    if any(err in error_msg.lower() for err in ['timeout', 'too many requests', 'network', 'connection', 'read timeout']):
                                        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
                                        if current_retry_count >= max_retries:
                                            logging.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ ({max_retries}) –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
                                            await update_outbox_task_status(task_id, 'failed')
                                        else:
                                            logging.info(f"üîÑ –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}, –ø–æ–ø—ã—Ç–∫–∞ {current_retry_count}/{max_retries}")
                                            await update_outbox_task_status(task_id, 'pending')
                                    elif "file size" in error_msg.lower() or "too large" in error_msg.lower():
                                        # –û—à–∏–±–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ - –ª–æ–≥–∏—Ä—É–µ–º –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º
                                        logging.warning(f"‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —Ä–∞–∑–º–µ—Ä–æ–º —Ñ–∞–π–ª–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}")
                                        await update_outbox_task_status(task_id, 'failed')
                                    elif "forbidden" in error_msg.lower() or "blocked" in error_msg.lower():
                                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
                                        logging.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
                                        await update_outbox_task_status(task_id, 'failed')
                                    else:
                                        # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
                                        if current_retry_count >= max_retries:
                                            logging.error(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ ({max_retries}) –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –æ—à–∏–±–∫–∏ –∑–∞–¥–∞—á–∏ {task_id}")
                                            await update_outbox_task_status(task_id, 'failed')
                                        else:
                                            logging.info(f"üîÑ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}, –ø–æ–ø—ã—Ç–∫–∞ {current_retry_count}/{max_retries}")
                                            await update_outbox_task_status(task_id, 'pending')
                                    
                                    continue

                            else:

                                # –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ PDF –±–µ–∑ –∫–Ω–æ–ø–æ–∫
                                logging.info(f"üìÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–π PDF (–Ω–µ —á–µ—Ä–Ω–æ–≤–∏–∫) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                                try:
                                    await bot.send_document(user_id, input_file, caption=comment)
                                    logging.info(f"‚úÖ PDF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                                    
                                    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é
                                    await update_outbox_task_status(task_id, 'sent')
                                    
                                except Exception as pdf_error:
                                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ã—á–Ω–æ–≥–æ PDF {task_id}: {pdf_error}")
                                    await update_outbox_task_status(task_id, 'failed')

                        elif file_type == 'mp3':

                            input_file = FSInputFile(content)

                            

                            # –ï—Å–ª–∏ —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–µ—Å–Ω–∏ (–ì–ª–∞–≤–∞ 2.12)

                            if is_song_final:

                                # –ì–ª–∞–≤–∞ 2.12. –î–æ—Å—Ç–∞–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–µ—Å–Ω–∏

                                # –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ - –æ–Ω —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º

                                logging.info(f"üéº –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–µ—Å–Ω–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É")

                            

                                await bot.send_message(user_id, "üéµ –í–∞—à–∞ –ø–µ—Å–Ω—è –≥–æ—Ç–æ–≤–∞! –ö–∞–∫ –≤–∞–º? –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω–∞ –≤—ã–∑–æ–≤–µ—Ç —Å–∏–ª—å–Ω—ã–µ —ç–º–æ—Ü–∏–∏ üíñ")

                                

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ–≤–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–Ω–∏–≥–∏ —Å—Ä–∞–∑—É

                                await bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –¥–æ–≤–µ—Ä–∏–ª–∏ –Ω–∞–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–∫–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ üíù")

                                

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏

                                keyboard = InlineKeyboardMarkup(inline_keyboard=[

                                    [InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–±–Ω—É—é –∫–Ω–∏–≥—É", callback_data="create_book_after_song")],

                                    [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Å—å –∫ –≤–∞–º —á—É—Ç—å –ø–æ–∑–∂–µ ‚ù§Ô∏è", callback_data="finish_song_order")]

                                ])

                                

                                await bot.send_message(

                                    user_id,

                                    "–î–∞–≤–∞–π —Å–æ–±–µ—Ä—ë–º –µ—â—ë –±–æ–ª—å—à–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –∫–Ω–∏–≥–µ —Å–æ —Å–ª–æ–≤–∞–º–∏, –º–æ–º–µ–Ω—Ç–∞–º–∏ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏.\n\n"

                                    "üóù –£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å —ç—Ç–æ–π –∫–Ω–∏–≥–∏ –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ –º—ã –æ–∂–∏–≤–∏–º —Ç–æ, —á—Ç–æ –Ω–µ —É—Å–ø–µ–ª–æ –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —Ñ–æ—Ç–æ: –æ—Å–æ–±–µ–Ω–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –≤ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏, –≤–∞–∂–Ω—ã–µ —Å–ª–æ–≤–∞, —Å–∫–∞–∑–∞–Ω–Ω—ã–µ —à—ë–ø–æ—Ç–æ–º, –∏ —á—É–≤—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –±–µ—Ä–µ–∂–µ–º.\n\n"

                                    "–≠—Ç–æ —Å–æ–∫—Ä–æ–≤–µ–Ω–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫, –≥–¥–µ –æ–∂–∏–≤—É—Ç —Å–∞–º—ã–µ –¥–æ—Ä–æ–≥–∏–µ –º–≥–Ω–æ–≤–µ–Ω–∏—è ‚ú®\n"

                                    "–•–æ—á–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω–æ?",

                                    reply_markup=keyboard

                                )

                            

                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

                                try:

                                    from aiogram.fsm.storage.base import StorageKey

                                    storage_key = StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id)

                                    await storage.set_state(key=storage_key, state=SongFinalStates.final_received)

                                    

                                    # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è

                                    await storage.set_data(key=storage_key, data={"order_id": order_id})

                                    

                                    logging.info(f"üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ SongFinalStates.final_received")

                                except Exception as e:

                                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

                                

                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

                                await update_order_status(order_id, "ready")

                                logging.info(f"üìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ready")

                                

                                # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ outbox –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

                                await update_outbox_task_status(task_id, 'sent')

                                logging.info(f"‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ, –∑–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ outbox")

                                logging.info(f"üîç –ó–∞–¥–∞—á–∞ {task_id} –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ 'sent' –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

                            

                            # –ï—Å–ª–∏ —ç—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫/–ø—Ä–µ–¥—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø–µ—Å–Ω–∏, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏

                            elif is_song_draft:

                                logging.info(f"üîò –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order_status}")

                                

                                message_text = "üéâ –í–æ—Ç –æ–Ω–∞ - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–≤–æ–µ–π –ø–µ—Å–Ω–∏ ‚ù§Ô∏è\n\n"

                                message_text += "–ú—ã –≤–ª–æ–∂–∏–ª–∏ –≤ —ç—Ç—É –ø–µ—Å–Ω—é –º–Ω–æ–≥–æ –ª—é–±–≤–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ–º –Ω–µ –º–µ–Ω—å—à–µ —Ç–µ–±—è. –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω–∞ —Ç—Ä–æ–Ω–µ—Ç –¥–æ –º—É—Ä–∞—à–µ–∫ ü•π"

                                button_text = "–í—Å–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –æ—Ç–ª–∏—á–Ω–∞—è –ø–µ—Å–Ω—è"

                                logging.info(f"üîò –°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞/–ø—Ä–µ–¥—Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏: {button_text}")

                                

                                keyboard = InlineKeyboardMarkup(inline_keyboard=[

                                    [InlineKeyboardButton(text=button_text, callback_data="song_draft_ok")],

                                    [InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="song_draft_edit")]

                                ])

                                await bot.send_audio(user_id, input_file, caption=message_text, reply_markup=keyboard)

                                

                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ

                                try:

                                    from aiogram.fsm.storage.base import StorageKey

                                    storage_key = StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id)

                                    await storage.set_state(key=storage_key, state=SongDraftStates.draft_received)

                                    

                                    # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º order_id –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è

                                    await storage.set_data(key=storage_key, data={"order_id": order_id})

                                    

                                    logging.info(f"üîÑ –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ SongDraftStates.draft_received")

                                except Exception as e:

                                    logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {e}")

                                

                                logging.info(f"‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É—Å–ø–µ—à–Ω–æ")

                                

                                # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ outbox –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞

                                await update_outbox_task_status(task_id, 'sent')

                                logging.info(f"‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∑–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ outbox")

                            else:

                                await bot.send_audio(user_id, input_file)

                                

                                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–Ω–æ–≤–∏–∫

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞

                                if any(keyword in comment.lower() for keyword in ['—á–µ—Ä–Ω–æ–≤–∏–∫', '–ø—Ä–æ–±–Ω–∞—è –≤–µ—Ä—Å–∏—è', '–ø—Ä–µ–¥—Ñ–∏–Ω–∞–ª—å–Ω–∞—è', '–≥–æ—Ç–æ–≤', '–≥–æ—Ç–æ–≤–æ']):

                                    await update_order_status(order_id, "draft_sent")

                                    logging.info(f"üìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ draft_sent")

                                else:

                                    logging.info(f"üìã MP3 —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–Ω–µ —á–µ—Ä–Ω–æ–≤–∏–∫)")

                                

                                # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ outbox –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞

                                await update_outbox_task_status(task_id, 'sent')

                                logging.info(f"‚úÖ MP3 —Ñ–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∑–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ outbox")

                        elif file_type in ['jpg', 'jpeg', 'png', 'image']:

                            try:

                                input_file = FSInputFile(content)

                                

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º –∫–Ω–∏–≥–∏

                                if is_book_draft:

                                    # –î–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∫–Ω–∏–≥–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏

                                    keyboard = InlineKeyboardMarkup(inline_keyboard=[

                                        [InlineKeyboardButton(text="–í—Å–µ —Å—É–ø–µ—Ä", callback_data="book_draft_ok")],

                                        [InlineKeyboardButton(text="–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏", callback_data="book_draft_edit")]

                                    ])

                                    

                                    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∫–Ω–∏–≥–∏

                                    additional_text = "\n\n–í–æ—Ç –æ–Ω–∏ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–≤–æ–µ–π –∫–Ω–∏–≥–∏ üìñ\n"

                                    additional_text += "–ú—ã –≤–ª–æ–∂–∏–ª–∏ –≤ –Ω–∏—Ö –º–Ω–æ–≥–æ —Ç–µ–ø–ª–∞ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ–º –Ω–µ –º–µ–Ω—å—à–µ —Ç–µ–±—è. –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω–∏ —Ç—Ä–æ–Ω—É—Ç —Ç–≤–æ—ë —Å–µ—Ä–¥—Ü–µ üíï\n\n"

                                    additional_text += "–ï—Å–ª–∏ —Ç–µ–±–µ –≤—Å—ë –Ω—Ä–∞–≤–∏—Ç—Å—è ‚Äî –∂–º–∏ \"–í—Å—ë —Å—É–ø–µ—Ä\".\n"

                                    additional_text += "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ ‚Äî –Ω–∞–∂–º–∏ \"–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏\"."

                                    full_caption = comment + additional_text

                                    

                                    await bot.send_photo(user_id, input_file, caption=full_caption, reply_markup=keyboard)

                                    

                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–Ω–æ–≤–∏–∫

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞

                                    if any(keyword in comment.lower() for keyword in ['—á–µ—Ä–Ω–æ–≤–∏–∫', '–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ', '–≥–æ—Ç–æ–≤', '–≥–æ—Ç–æ–≤–æ']):

                                        await update_order_status(order_id, "draft_sent")

                                        logging.info(f"üìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ draft_sent")

                                    else:

                                        logging.info(f"üìã –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–Ω–µ —á–µ—Ä–Ω–æ–≤–∏–∫)")

                                    

                                    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é

                                    await update_outbox_task_status(task_id, 'sent')

                                    logging.info(f"‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ –∫–Ω–∏–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É—Å–ø–µ—à–Ω–æ")

                                else:

                                    # –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ –±–µ–∑ –∫–Ω–æ–ø–æ–∫

                                    await bot.send_photo(user_id, input_file, caption=comment)

                                    # –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é

                                    await update_outbox_task_status(task_id, 'sent')

                            except Exception as e:

                                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {task_id}: {e}")

                                await update_outbox_task_status(task_id, 'failed')

                        elif file_type in ['gif', 'mov', 'mp4', 'avi', 'mkv', 'webm'] or file_type == 'video':

                            try:

                                input_file = FSInputFile(content)

                                logging.info(f"üé¨ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ —Ñ–∞–π–ª: file_type='{file_type}', user_id={user_id}")

                                

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é/–≤–∏–¥–µ–æ

                                if file_type == 'gif':

                                    # GIF –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—é

                                    await bot.send_animation(user_id, input_file, caption=comment)

                                    logging.info(f"üé¨ GIF –∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                                else:

                                    # –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —á–µ—Ä–Ω–æ–≤–∏–∫–æ–º –∫–Ω–∏–≥–∏
                                    if is_book_draft:
                                        # –î–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∫–Ω–∏–≥–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
                                        keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                            [InlineKeyboardButton(text="–í—Å–µ —Å—É–ø–µ—Ä", callback_data="book_draft_ok")],
                                            [InlineKeyboardButton(text="–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏", callback_data="book_draft_edit")]
                                        ])
                                        
                                        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∫–Ω–∏–≥–∏
                                        additional_text = "\n\n–í–æ—Ç –æ–Ω–∏ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–≤–æ–µ–π –∫–Ω–∏–≥–∏ üìñ\n"
                                        additional_text += "–ú—ã –≤–ª–æ–∂–∏–ª–∏ –≤ –Ω–∏—Ö –º–Ω–æ–≥–æ —Ç–µ–ø–ª–∞ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ–º –Ω–µ –º–µ–Ω—å—à–µ —Ç–µ–±—è. –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω–∏ —Ç—Ä–æ–Ω—É—Ç —Ç–≤–æ—ë —Å–µ—Ä–¥—Ü–µ üíï\n\n"
                                        additional_text += "–ï—Å–ª–∏ —Ç–µ–±–µ –≤—Å—ë –Ω—Ä–∞–≤–∏—Ç—Å—è ‚Äî –∂–º–∏ \"–í—Å—ë —Å—É–ø–µ—Ä\".\n"
                                        additional_text += "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ ‚Äî –Ω–∞–∂–º–∏ \"–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏\"."
                                        
                                        full_caption = comment + additional_text
                                        
                                        await bot.send_video(user_id, input_file, caption=full_caption, reply_markup=keyboard)
                                        
                                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–Ω–æ–≤–∏–∫
                                        if any(keyword in comment.lower() for keyword in ['—á–µ—Ä–Ω–æ–≤–∏–∫', '–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ', '–≥–æ—Ç–æ–≤', '–≥–æ—Ç–æ–≤–æ']):
                                            await update_order_status(order_id, "draft_sent")
                                            logging.info(f"üìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ draft_sent")
                                        
                                        logging.info(f"‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ –∫–Ω–∏–≥–∏ (–≤–∏–¥–µ–æ) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É—Å–ø–µ—à–Ω–æ")
                                    else:
                                        # –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
                                        await bot.send_video(user_id, input_file, caption=comment)
                                    logging.info(f"üé¨ –í–∏–¥–µ–æ —Ñ–∞–π–ª ({file_type}) –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                                await update_outbox_task_status(task_id, 'sent')

                            except Exception as e:

                                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ {task_id}: {e}")

                                await update_outbox_task_status(task_id, 'failed')

                        else:

                            try:

                                input_file = FSInputFile(content)

                                logging.info(f"üìÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç: file_type='{file_type}', user_id={user_id}")

                                await bot.send_document(user_id, input_file, caption=comment)

                                await update_outbox_task_status(task_id, 'sent')

                            except Exception as e:

                                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ {task_id}: {e}")

                        await update_outbox_task_status(task_id, 'failed')

                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {task_id}: {e}")
                        await update_outbox_task_status(task_id, 'failed')

                elif type_ == 'multiple_images_with_text_and_button':

                    try:

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

                        file_type = (task.get('file_type') or '').lower()

                        text = task.get('comment') or ''

                        button_text = task.get('button_text') or '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'

                        button_callback = task.get('button_callback') or 'continue_creation'

                        # –ü–æ–ª—É—á–∞–µ–º order_id –∏–∑ –∑–∞–¥–∞—á–∏
                        order_id = task.get('order_id')
                        
                        if not order_id:
                            logging.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç order_id –≤ –∑–∞–¥–∞—á–µ multiple_images_with_text_and_button {task_id}")
                            await update_outbox_task_status(task_id, 'failed')
                            continue

                        logging.info(f"üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é outbox –∑–∞–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ 'multiple_images_with_text_and_button'")

                        logging.info(f"üîò Task data: {task}")

                        

                        # –ü–∞—Ä—Å–∏–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∏–∑ JSON

                        import json

                        try:

                            file_paths = json.loads(content)

                            if not isinstance(file_paths, list):

                                file_paths = [content]  # Fallback –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

                        except (json.JSONDecodeError, TypeError):

                            file_paths = [content]  # Fallback –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

                        

                        logging.info(f"üîò –û—Ç–ø—Ä–∞–≤–ª—è—é {len(file_paths)} —Ñ–∞–π–ª–æ–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º")

                        

                        # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É

                        media_group = []

                        for i, file_path in enumerate(file_paths):

                            if os.path.exists(file_path):

                                input_file = FSInputFile(file_path)

                                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —Ñ–∞–π–ª—É

                                caption = text if i == 0 else None

                                

                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é

                                file_extension = os.path.splitext(file_path)[1].lower()

                                if file_extension in ['.mp3', '.wav', '.ogg', '.m4a', '.aac']:

                                    # –ê—É–¥–∏–æ—Ñ–∞–π–ª

                                    media_group.append(InputMediaAudio(media=input_file, caption=caption))

                                    logging.info(f"üîò –î–æ–±–∞–≤–ª—è—é –∞—É–¥–∏–æ—Ñ–∞–π–ª: {file_path}")

                                elif file_extension in ['.jpg', '.jpeg', '.png', '.gif', '.bmp', '.webp']:

                                    # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

                                    media_group.append(InputMediaPhoto(media=input_file, caption=caption))

                                    logging.info(f"üîò –î–æ–±–∞–≤–ª—è—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {file_path}")

                                elif file_extension in ['.mp4', '.avi', '.mov', '.mkv']:

                                    # –í–∏–¥–µ–æ—Ñ–∞–π–ª

                                    media_group.append(InputMediaVideo(media=input_file, caption=caption))

                                    logging.info(f"üîò –î–æ–±–∞–≤–ª—è—é –≤–∏–¥–µ–æ—Ñ–∞–π–ª: {file_path}")

                                else:

                                    # –î–æ–∫—É–º–µ–Ω—Ç

                                    media_group.append(InputMediaDocument(media=input_file, caption=caption))

                                    logging.info(f"üîò –î–æ–±–∞–≤–ª—è—é –¥–æ–∫—É–º–µ–Ω—Ç: {file_path}")

                            else:

                                logging.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

                        

                        if media_group:

                            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π

                            keyboard = InlineKeyboardMarkup(inline_keyboard=[

                                [InlineKeyboardButton(text=button_text, callback_data=button_callback)]

                            ])

                            

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É

                            await bot.send_media_group(user_id, media_group)

                            

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

                            from db import get_order

                            order_data = await get_order(order_id)

                            product_type = ''

                            if order_data and order_data.get('order_data'):

                                import json

                                parsed_order_data = json.loads(order_data.get('order_data', '{}'))

                                product_type = parsed_order_data.get('product', '')

                            

                            logging.info(f"üîç –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: order_id={order_id}, product_type='{product_type}', order_data={order_data}")

                            

                            if product_type == '–ü–µ—Å–Ω—è':

                                message_text = "–ñ–º–∏ \"–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É\", –∏ —è —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –º—ã –º–æ–∂–µ–º –¥–æ–ø–∏—Å–∞—Ç—å –ø–µ—Å–Ω—é."

                                logging.info(f"üéµ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Å–Ω–∏")

                            elif product_type == '–ö–Ω–∏–≥–∞':

                                message_text = "–ñ–º–∏ \"–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É\" –∏ —Ä–∞—Å—Å–∫–∞–∂–µ–º, –∫–∞–∫ –º—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –≤–∞—à—É –∫–Ω–∏–≥—É —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∞ —Å—Ç–∞–ª–∞ —Ç–µ–º —Å–∞–º—ã–º –æ—Å–æ–±–µ–Ω–Ω—ã–º –ø–æ–¥–∞—Ä–∫–æ–ºüéÅ"

                                logging.info(f"üìñ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–∏–≥–∏")

                            else:

                                # –ï—Å–ª–∏ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–∏–≥–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                                message_text = "–ñ–º–∏ \"–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É\" –∏ —Ä–∞—Å—Å–∫–∞–∂–µ–º, –∫–∞–∫ –º—ã –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –≤–∞—à—É –∫–Ω–∏–≥—É —Ç–∞–∫, —á—Ç–æ–±—ã –æ–Ω–∞ —Å—Ç–∞–ª–∞ —Ç–µ–º —Å–∞–º—ã–º –æ—Å–æ–±–µ–Ω–Ω—ã–º –ø–æ–¥–∞—Ä–∫–æ–ºüéÅ"

                                logging.info(f"üìñ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–∏–≥–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, product_type='{product_type}'")

                            

                            await bot.send_message(user_id, message_text, reply_markup=keyboard)

                            await update_outbox_task_status(task_id, 'sent')
                            
                            # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ demo_received_book (–ì–ª–∞–≤–∞ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–Ω–∏–≥–∏)
                            if product_type == '–ö–Ω–∏–≥–∞':
                                try:
                                    from db import create_or_update_user_timer
                                    await create_or_update_user_timer(user_id, order_id, "demo_received_book", "–ö–Ω–∏–≥–∞")
                                    logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ demo_received_book (–ì–ª–∞–≤–∞ 3), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∑–∞–∫–∞–∑ {order_id}")
                                except Exception as timer_error:
                                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è demo_received_book: {timer_error}")
                            
                            # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ demo_received_song (–ì–ª–∞–≤–∞ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Å–Ω–∏)
                            elif product_type == '–ü–µ—Å–Ω—è':
                                try:
                                    from db import create_or_update_user_timer
                                    await create_or_update_user_timer(user_id, order_id, "demo_received_song", "–ü–µ—Å–Ω—è")
                                    logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ demo_received_song (–ì–ª–∞–≤–∞ 3), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∑–∞–∫–∞–∑ {order_id}")
                                except Exception as timer_error:
                                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è demo_received_song: {timer_error}")

                        else:

                            await update_outbox_task_status(task_id, 'failed')

                    except Exception as e:

                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ multiple_images_with_text_and_button {task_id}: {e}")

                        await update_outbox_task_status(task_id, 'failed')

                elif type_ == 'image_with_text_and_button':

                    try:

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π

                        file_type = (task.get('file_type') or '').lower()

                        text = task.get('comment') or ''

                        button_text = task.get('button_text') or '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'

                        button_callback = task.get('button_callback') or 'continue_creation'

                        # –ü–æ–ª—É—á–∞–µ–º order_id –∏–∑ –∑–∞–¥–∞—á–∏
                        order_id = task.get('order_id')
                        
                        if not order_id:
                            logging.error(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç order_id –≤ –∑–∞–¥–∞—á–µ image_with_text_and_button {task_id}")
                            await update_outbox_task_status(task_id, 'failed')
                            continue

                        logging.info(f"üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é outbox –∑–∞–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ 'image_with_text_and_button'")

                        logging.info(f"üîò Task data: {task}")

                        logging.info(f"üîò –°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫—É: text='{button_text}', callback='{button_callback}'")

                        logging.info(f"üîò –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{text}'")

                        

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–∫–∞–∑–∞ –∏ —Å—Ç–∞—Ç—É—Å

                        order = await get_order(order_id)

                        is_song_demo = False

                        is_book_demo = False

                        is_book_draft = False

                        is_song_draft = False

                        is_book_final = False

                        

                        if order and order.get('order_data'):

                            import json

                            try:

                                order_data = json.loads(order.get('order_data', '{}')) if order and order.get('order_data') else {}

                                product = order_data.get('product', '')

                                order_status = order.get('status', '')

                                

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–µ–º–æ-—Ñ–∞–π–ª–æ–º –¥–ª—è –ø–µ—Å–Ω–∏
                                logging.info(f"üîç –ü–†–û–í–ï–†–ö–ê –ü–ï–°–ù–ò: product='{product}', order_status='{order_status}'")

                                if product == '–ü–µ—Å–Ω—è' and order_status in ['waiting_manager', 'demo_content']:
                                    logging.info(f"‚úÖ –ù–ê–ô–î–ï–ù–ê –ü–ï–°–ù–Ø! –°–æ–∑–¥–∞–µ–º is_song_demo=True –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                                    is_song_demo = True

                                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
                                    logging.info(f"üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} —Å '{order_status}' –Ω–∞ 'demo_sent'")
                                    await update_order_status(order_id, "demo_sent")
                                    logging.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 'demo_sent'")

                                

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)

                                logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: product={product}, order_status={order_status}")

                                if product == '–ö–Ω–∏–≥–∞':

                                    if '–¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç' in text.lower() or '–ø—Ä–∏–º–µ—Ä—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è' in text.lower() or any(keyword in text.lower() for keyword in ['–¥–µ–º–æ', 'demo', '–ø—Ä–æ–±–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã', '–æ–±—Ä–∞–∑—Ü—ã']):

                                        is_book_demo = True

                                        logging.info(f"üìñ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –∫–Ω–∏–≥–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

                                        await update_order_status(order_id, "demo_sent")

                                    elif '—á–µ—Ä–Ω–æ–≤–∏–∫' in text.lower() or '–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ' in text.lower():

                                        is_book_draft = True

                                        logging.info(f"üìñ –û–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ –∫–Ω–∏–≥–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                        logging.info(f"üìñ –ü—Ä–æ–¥—É–∫—Ç: {product}, –°—Ç–∞—Ç—É—Å: {order_status}")

                                    # –ï—Å–ª–∏ –ø–æ —Ç–µ–∫—Å—Ç—É –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ callback_data (–ü–†–ò–û–†–ò–¢–ï–¢)

                                    elif button_callback == "continue_after_demo":

                                        is_book_demo = True

                                        logging.info(f"üìñ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –∫–Ω–∏–≥–∏ –ø–æ callback_data –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

                                        await update_order_status(order_id, "demo_sent")

                                    elif button_callback in ["book_draft_ok", "book_draft_edit"]:

                                        is_book_draft = True

                                        logging.info(f"üìñ –û–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ –∫–Ω–∏–≥–∏ –ø–æ callback_data –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                        logging.info(f"üìñ –ü—Ä–æ–¥—É–∫—Ç: {product}, –°—Ç–∞—Ç—É—Å: {order_status}")

                                    # –ï—Å–ª–∏ –ø–æ callback_data –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É

                                    elif order_status in ['questions_completed', 'waiting_manager', 'demo_sent', 'demo_content']:

                                        is_book_demo = True

                                        logging.info(f"üìñ –û–±–Ω–∞—Ä—É–∂–µ–Ω –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –∫–Ω–∏–≥–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                        logging.info(f"üìñ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order_status}")

                                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

                                        await update_order_status(order_id, "demo_sent")

                                    elif order_status in ['waiting_draft', 'draft_sent', 'editing']:

                                        is_book_draft = True

                                        logging.info(f"üìñ –û–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ –∫–Ω–∏–≥–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                        logging.info(f"üìñ –ü—Ä–æ–¥—É–∫—Ç: {product}, –°—Ç–∞—Ç—É—Å: {order_status}")

                                    elif order_status == 'ready':

                                        is_book_final = True

                                        logging.info(f"üìö –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–Ω–∏–≥–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                        logging.info(f"üìö –ü—Ä–æ–¥—É–∫—Ç: {product}, –°—Ç–∞—Ç—É—Å: {order_status}")

                                        logging.info(f"üìö –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–Ω–∏–≥–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É")

                                    else:

                                        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: –ø—Ä–æ–¥—É–∫—Ç={product}, —Å—Ç–∞—Ç—É—Å={order_status}, callback={button_callback}, —Ç–µ–∫—Å—Ç={text[:50]}...")

                                elif product == '–ü–µ—Å–Ω—è':

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–º–æ –ø–µ—Å–Ω–∏ –ø–æ callback_data

                                    if button_callback == "continue_after_demo":

                                        is_song_demo = True

                                        logging.info(f"üéµ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–µ–º–æ –ø–µ—Å–Ω–∏ –ø–æ callback_data –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

                                        await update_order_status(order_id, "demo_sent")

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–µ—Å–Ω–∏ –ø–æ callback_data

                                    elif button_callback == "song_draft_ok":

                                        is_song_draft = True

                                        logging.info(f"üéµ –û–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–µ—Å–Ω–∏ –ø–æ callback_data –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É

                                    elif order_status in ['waiting_draft', 'editing', 'draft_sent', 'prefinal_sent']:

                                        is_song_draft = True

                                        logging.info(f"üéµ –û–±–Ω–∞—Ä—É–∂–µ–Ω —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–µ—Å–Ω–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–º–æ –ø–æ —Å—Ç–∞—Ç—É—Å—É

                                    elif order_status in ['paid', 'demo_sent']:

                                        is_song_demo = True

                                        logging.info(f"üéµ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–µ–º–æ –ø–µ—Å–Ω–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

                                    else:

                                        logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –ø–µ—Å–Ω–∏: —Å—Ç–∞—Ç—É—Å={order_status}, callback={button_callback}")

                            except (json.JSONDecodeError, KeyError):
                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ image_with_text_and_button")
                        
                        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–æ—Å—å - –¥–µ–ª–∞–µ–º –¥–µ–º–æ
                        if not any([is_song_demo, is_book_demo, is_book_draft, is_song_draft, is_book_final]):
                            if order:
                                try:
                                    order_data = json.loads(order.get('order_data', '{}')) if order.get('order_data') else {}
                                    product = order_data.get('product', '')
                                    logging.info(f"üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ø—Ä–æ–¥—É–∫—Ç={product}, –Ω–∏—á–µ–≥–æ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª–æ—Å—å")
                                    if product == '–ö–Ω–∏–≥–∞':
                                        is_book_demo = True
                                        logging.info(f"üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û: is_book_demo=True (—Ä–µ–∑–µ—Ä–≤)")
                                    elif product == '–ü–µ—Å–Ω—è':
                                        is_song_demo = True
                                        logging.info(f"üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û: is_song_demo=True (—Ä–µ–∑–µ—Ä–≤)")
                                except Exception as e:
                                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–∏: {e}")
                            else:
                                # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–æ –µ—Å—Ç—å —Ñ–∞–π–ª - –¥–µ–ª–∞–µ–º –∫–Ω–∏–≥–∞ –¥–µ–º–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                logging.info(f"üîß –ó–ê–ö–ê–ó –ù–ï –ù–ê–ô–î–ï–ù - –¥–µ–ª–∞–µ–º book_demo –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è task_id {task_id}")
                                is_book_demo = True
                        
                        

                        # –õ–û–ì–ò–†–£–ï–ú –û–ö–û–ù–ß–ê–¢–ï–õ–¨–ù–´–ô –í–´–ë–û–† –¢–ò–ü–ê
                        logging.info(f"üìã –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ò–ü –¥–ª—è task_id {task_id}:")
                        logging.info(f"üìã - is_song_demo: {is_song_demo}")
                        logging.info(f"üìã - is_book_demo: {is_book_demo}")
                        logging.info(f"üìã - is_book_draft: {is_book_draft}")
                        logging.info(f"üìã - is_song_draft: {is_song_draft}")
                        logging.info(f"üìã - is_book_final: {is_book_final}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
                        input_file = FSInputFile(content)

                        

                        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

                        logging.info(f"üì§ –î–ï–ú–û-–ö–û–ù–¢–ï–ù–¢: file_type='{file_type}', is_book_demo={is_book_demo}")

                        

                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞

                        logging.info(f"üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: is_book_demo={is_book_demo}, is_book_draft={is_book_draft}, is_song_draft={is_song_draft}, is_book_final={is_book_final}")

                        if is_book_final:

                            # –î–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫–Ω–∏–≥–∏ - –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–≤—Ç–æ—Ä–Ω–æ, —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ outbox

                            logging.info(f"üìö –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –∫–Ω–∏–≥–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É")

                            logging.info(f"üìö –ó–∞–¥–∞—á–∞ {task_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ outbox –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞")

                            await update_outbox_task_status(task_id, 'sent')

                            continue

                        elif is_book_demo:

                            # –î–ª—è –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–Ω–∏–≥–∏ - –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ

                            keyboard = InlineKeyboardMarkup(inline_keyboard=[

                                [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É", callback_data="continue_after_demo")]

                            ])

                            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–ª—è –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞

                            full_text = "–ü—Ä–æ–±–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∞—à–µ–π –∫–Ω–∏–≥–∏ –≥–æ—Ç–æ–≤—ã ‚òëÔ∏è\n" + \
                                       "–ú—ã —Å—Ç–∞—Ä–∞–ª–∏—Å—å, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ —Ç—ë–ø–ª—ã–º–∏ –∏ –∂–∏–≤—ã–º–∏.\n\n" + \
                                       "–ù–æ –≤–ø–µ—Ä–µ–¥–∏ –µ—â—ë –±–æ–ª—å—à–µ ‚Äî –∏–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä –≤–¥–æ—Ö–Ω–æ–≤–∏–ª—Å—è –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π –∏ —Å–æ–±—Ä–∞–ª –¥–µ—Å—è—Ç–∫–∏ —Å—é–∂–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫–Ω–∏–≥–∏."

                            logging.info(f"üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∑–∞–º–µ–Ω–µ–Ω —Ç–µ–∫—Å—Ç –Ω–∞ –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ {task.get('order_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")

                            logging.info(f"üîß –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –±—ã–ª: {comment}")

                        elif is_song_demo:

                            # –î–ª—è –¥–µ–º–æ-–∞—É–¥–∏–æ –ø–µ—Å–Ω–∏ - –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ

                            keyboard = InlineKeyboardMarkup(inline_keyboard=[

                                [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É", callback_data="continue_after_demo")]

                            ])

                            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∑–∞–º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –¥–ª—è –¥–µ–º–æ-–∞—É–¥–∏–æ –ø–µ—Å–Ω–∏

                            full_text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ ‚ú®\n–î–µ–º–æ-–≤–µ—Ä—Å–∏—è —Ç–≤–æ–µ–π –ø–µ—Å–Ω–∏ –≥–æ—Ç–æ–≤–∞ üíå\n–ú—ã —Å–æ–±—Ä–∞–ª–∏ –µ—ë –ø–µ—Ä–≤—ã–µ –Ω–æ—Ç—ã —Å —Ç–µ–ø–ª–æ–º –∏ —É–∂–µ –∑–Ω–∞–µ–º, –∫–∞–∫ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∏—Ö –≤ –ø–æ–ª–Ω—É—é –º–µ–ª–æ–¥–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–æ–Ω–µ—Ç –¥–æ –º—É—Ä–∞—à–µ–∫.\n\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∞–≤—Ç–æ—Ä—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é —Å —Ç–≤–æ–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏, –º–æ–º–µ–Ω—Ç–∞–º–∏ –∏ —á—É–≤—Å—Ç–≤–∞–º–∏, –Ω–∞–º –Ω—É–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üß©\n\n–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–æ–π–Ω–∞ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∑–≤—É—á–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ —Å—Ç–∞—Ç—å –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –ø–æ–¥–∞—Ä–∫–æ–º –¥–ª—è —Ç–µ–±—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è ‚ù§Ô∏è‚Äçüî•"

                            logging.info(f"üîß –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∑–∞–º–µ–Ω–µ–Ω —Ç–µ–∫—Å—Ç –Ω–∞ –¥–µ–º–æ-–∞—É–¥–∏–æ –ø–µ—Å–Ω–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}")

                            logging.info(f"üîß –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –±—ã–ª: {comment}")

                        elif is_book_draft:

                            # –î–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∫–Ω–∏–≥–∏ - –¥–≤–µ –∫–Ω–æ–ø–∫–∏ (–∫–∞–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—É—Ç—è—Ö)

                            logging.info(f"üîò –°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∫–Ω–∏–≥–∏: 'book_draft_edit' –∏ 'book_draft_ok'")

                            keyboard = InlineKeyboardMarkup(inline_keyboard=[

                            [InlineKeyboardButton(text="–í—Å–µ —Å—É–ø–µ—Ä", callback_data="book_draft_ok")],

                            [InlineKeyboardButton(text="–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏", callback_data="book_draft_edit")]

                            ])

                            

                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∫–Ω–∏–≥–∏ (–∫–∞–∫ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –ø—É—Ç—è—Ö)

                            additional_text = "\n\n–í–æ—Ç –æ–Ω–∏ ‚Äî —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–≤–æ–µ–π –∫–Ω–∏–≥–∏ üìñ\n"

                            additional_text += "–ú—ã –≤–ª–æ–∂–∏–ª–∏ –≤ –Ω–∏—Ö –º–Ω–æ–≥–æ —Ç–µ–ø–ª–∞ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ–º –Ω–µ –º–µ–Ω—å—à–µ —Ç–µ–±—è. –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω–∏ —Ç—Ä–æ–Ω—É—Ç —Ç–≤–æ—ë —Å–µ—Ä–¥—Ü–µ üíï\n\n"

                            additional_text += "–ï—Å–ª–∏ —Ç–µ–±–µ –≤—Å—ë –Ω—Ä–∞–≤–∏—Ç—Å—è ‚Äî –∂–º–∏ \"–í—Å—ë —Å—É–ø–µ—Ä\".\n"

                            additional_text += "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏ ‚Äî –Ω–∞–∂–º–∏ \"–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏\"."

                            full_text = text + additional_text

                            logging.info(f"üìù –¢–µ–∫—Å—Ç –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∫–Ω–∏–≥–∏: {full_text[:100]}...")

                            

                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —á–µ—Ä–Ω–æ–≤–∏–∫

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞

                            if any(keyword in text.lower() for keyword in ['—á–µ—Ä–Ω–æ–≤–∏–∫', '–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ', '–≥–æ—Ç–æ–≤', '–≥–æ—Ç–æ–≤–æ']):

                                await update_order_status(order_id, "draft_sent")

                                logging.info(f"üìã –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ draft_sent")

                            else:

                                logging.info(f"üìã –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ (–Ω–µ —á–µ—Ä–Ω–æ–≤–∏–∫)")

                            logging.info(f"‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ –∫–Ω–∏–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É—Å–ø–µ—à–Ω–æ")

                        elif is_song_draft:

                            # –î–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø–µ—Å–Ω–∏ - –¥–≤–µ –∫–Ω–æ–ø–∫–∏

                            logging.info(f"üîò –°–æ–∑–¥–∞—é –∫–Ω–æ–ø–∫–∏ –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø–µ—Å–Ω–∏: 'song_draft_edit' –∏ 'song_draft_ok'")

                            keyboard = InlineKeyboardMarkup(inline_keyboard=[

                            [InlineKeyboardButton(text="–í—Å–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –æ—Ç–ª–∏—á–Ω–∞—è –ø–µ—Å–Ω—è", callback_data="song_draft_ok")],

                            [InlineKeyboardButton(text="–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="song_draft_edit")]

                            ])

                            

                            # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø–µ—Å–Ω–∏

                            additional_text = "\n\nüéâ –í–æ—Ç –æ–Ω–∞ - —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–≤–æ–µ–π –ø–µ—Å–Ω–∏ ‚ù§Ô∏è\n\n"

                            additional_text += "–ú—ã –≤–ª–æ–∂–∏–ª–∏ –≤ —ç—Ç—É –ø–µ—Å–Ω—é –º–Ω–æ–≥–æ –ª—é–±–≤–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–µ–º –Ω–µ –º–µ–Ω—å—à–µ —Ç–µ–±—è. –ù–∞–¥–µ–µ–º—Å—è, –æ–Ω–∞ —Ç—Ä–æ–Ω–µ—Ç –¥–æ –º—É—Ä–∞—à–µ–∫ ü•π"

                            full_text = text + additional_text

                            logging.info(f"üìù –¢–µ–∫—Å—Ç –¥–ª—è —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –ø–µ—Å–Ω–∏: {full_text[:100]}...")

                        else:

                            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ - –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞

                            logging.info(f"üîò –°–æ–∑–¥–∞—é –æ–±—ã—á–Ω—É—é –∫–Ω–æ–ø–∫—É: text='{button_text}', callback='{button_callback}'")

                            

                            # –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê: –µ—Å–ª–∏ callback = "continue_after_demo", —Ç–æ —ç—Ç–æ –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç

                            if button_callback == "continue_after_demo":

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞

                                try:

                                    order = await get_order(order_id)

                                    if order and order.get('order_data'):

                                        order_data = json.loads(order.get('order_data', '{}')) if order and order.get('order_data') else {}

                                        product = order_data.get('product', '')

                                        if product == '–ü–µ—Å–Ω—è':

                                            full_text = "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–∂–∏–¥–∞–Ω–∏–µ ‚ú®\n–î–µ–º–æ-–≤–µ—Ä—Å–∏—è —Ç–≤–æ–µ–π –ø–µ—Å–Ω–∏ –≥–æ—Ç–æ–≤–∞ üíå\n–ú—ã —Å–æ–±—Ä–∞–ª–∏ –µ—ë –ø–µ—Ä–≤—ã–µ –Ω–æ—Ç—ã —Å —Ç–µ–ø–ª–æ–º –∏ —É–∂–µ –∑–Ω–∞–µ–º, –∫–∞–∫ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –∏—Ö –≤ –ø–æ–ª–Ω—É—é –º–µ–ª–æ–¥–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–æ–Ω–µ—Ç –¥–æ –º—É—Ä–∞—à–µ–∫.\n\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∞–≤—Ç–æ—Ä—Å–∫—É—é –∏—Å—Ç–æ—Ä–∏—é —Å —Ç–≤–æ–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏, –º–æ–º–µ–Ω—Ç–∞–º–∏ –∏ —á—É–≤—Å—Ç–≤–∞–º–∏, –Ω–∞–º –Ω—É–∂–Ω–æ —á—É—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ üß©\n\n–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–æ–π–Ω–∞ —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–∑–≤—É—á–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏ —Å—Ç–∞—Ç—å –∑–∞–ø–æ–º–∏–Ω–∞—é—â–∏–º—Å—è –ø–æ–¥–∞—Ä–∫–æ–º –¥–ª—è —Ç–µ–±—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è ‚ù§Ô∏è‚Äçüî•"

                                            logging.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ–º–æ-–∞—É–¥–∏–æ –ø–µ—Å–Ω–∏")

                                        else:

                                            full_text = "–ü—Ä–æ–±–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∞—à–µ–π –∫–Ω–∏–≥–∏ –≥–æ—Ç–æ–≤—ã ‚òëÔ∏è\n" + \
                                                       "–ú—ã —Å—Ç–∞—Ä–∞–ª–∏—Å—å, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ —Ç—ë–ø–ª—ã–º–∏ –∏ –∂–∏–≤—ã–º–∏.\n\n" + \
                                                       "–ù–æ –≤–ø–µ—Ä–µ–¥–∏ –µ—â—ë –±–æ–ª—å—à–µ ‚Äî –∏–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä –≤–¥–æ—Ö–Ω–æ–≤–∏–ª—Å—è –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π –∏ —Å–æ–±—Ä–∞–ª –¥–µ—Å—è—Ç–∫–∏ —Å—é–∂–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫–Ω–∏–≥–∏."

                                            logging.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∫–Ω–∏–≥–∏")

                                    else:

                                        full_text = "–ü—Ä–æ–±–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∞—à–µ–π –∫–Ω–∏–≥–∏ –≥–æ—Ç–æ–≤—ã ‚òëÔ∏è\n" + \
                                                   "–ú—ã —Å—Ç–∞—Ä–∞–ª–∏—Å—å, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ —Ç—ë–ø–ª—ã–º–∏ –∏ –∂–∏–≤—ã–º–∏.\n\n" + \
                                                   "–ù–æ –≤–ø–µ—Ä–µ–¥–∏ –µ—â—ë –±–æ–ª—å—à–µ ‚Äî –∏–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä –≤–¥–æ—Ö–Ω–æ–≤–∏–ª—Å—è –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π –∏ —Å–æ–±—Ä–∞–ª –¥–µ—Å—è—Ç–∫–∏ —Å—é–∂–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫–Ω–∏–≥–∏."

                                        logging.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")

                                except Exception as e:

                                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞: {e}")

                                    full_text = "–ü—Ä–æ–±–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∞—à–µ–π –∫–Ω–∏–≥–∏ –≥–æ—Ç–æ–≤—ã ‚òëÔ∏è\n" + \
                                               "–ú—ã —Å—Ç–∞—Ä–∞–ª–∏—Å—å, —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ —Ç—ë–ø–ª—ã–º–∏ –∏ –∂–∏–≤—ã–º–∏.\n\n" + \
                                               "–ù–æ –≤–ø–µ—Ä–µ–¥–∏ –µ—â—ë –±–æ–ª—å—à–µ ‚Äî –∏–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä –≤–¥–æ—Ö–Ω–æ–≤–∏–ª—Å—è –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–µ–π –∏ —Å–æ–±—Ä–∞–ª –¥–µ—Å—è—Ç–∫–∏ —Å—é–∂–µ—Ç–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∫–Ω–∏–≥–∏."

                                    logging.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –¥–ª—è –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")

                            else:

                                full_text = text

                            

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏

                            try:

                                order = await get_order(order_id)

                                if order and order.get('order_data'):

                                    order_data = json.loads(order.get('order_data', '{}')) if order and order.get('order_data') else {}

                                    product = order_data.get('product', '')

                                    if product == '–ü–µ—Å–Ω—è' and button_callback == "continue_after_demo":

                                        button_text = "–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É"

                                        logging.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Å–Ω–∏")

                                    elif product == '–ö–Ω–∏–≥–∞' and button_callback == "continue_after_demo":

                                        button_text = "–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É"

                                        logging.info(f"üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–Ω–∏–≥–∏")

                            except Exception as e:

                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏: {e}")

                            

                            keyboard = InlineKeyboardMarkup(inline_keyboard=[

                                [InlineKeyboardButton(text=button_text, callback_data=button_callback)]

                            ])

                        

                        if file_type in ['jpg', 'jpeg', 'png', 'image']:

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞

                            if not os.path.exists(content):

                                logging.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {content}")

                                await update_outbox_task_status(task_id, 'failed')

                                continue

                            

                            # –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É

                            try:

                                file_size = os.path.getsize(content) / (1024 * 1024)  # –≤ –ú–ë

                                logging.info(f"üîç –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ {content}: {file_size:.2f} –ú–ë")

                            except Exception as size_error:

                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞ {content}: {size_error}")

                            

                            await bot.send_photo(user_id, input_file, caption=full_text, reply_markup=keyboard)

                        elif file_type == 'mp3':

                            await bot.send_audio(user_id, input_file, caption=full_text, reply_markup=keyboard)

                        elif file_type == 'pdf':

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞

                            if not os.path.exists(content):

                                logging.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {content}")

                                await update_outbox_task_status(task_id, 'failed')

                                continue

                            

                            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä PDF —Ñ–∞–π–ª–∞, –Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                            try:
                                file_size = os.path.getsize(content) / (1024 * 1024)  # –≤ –ú–ë
                                logging.info(f"üîç –†–∞–∑–º–µ—Ä PDF —Ñ–∞–π–ª–∞ {content}: {file_size:.2f} –ú–ë")
                            except Exception as size_error:
                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ PDF —Ñ–∞–π–ª–∞ {content}: {size_error}")

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º PDF –¥–æ–∫—É–º–µ–Ω—Ç —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                            try:
                                await bot.send_document(user_id, input_file, caption=full_text, reply_markup=keyboard)
                                logging.info(f"‚úÖ PDF –¥–æ–∫—É–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            except Exception as pdf_error:
                                error_msg = str(pdf_error)
                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞: {pdf_error}")
                                await update_outbox_task_status(task_id, 'failed')
                                continue

                        elif file_type == 'gif':

                            # GIF –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –∞–Ω–∏–º–∞—Ü–∏—é

                            await bot.send_animation(user_id, input_file, caption=full_text, reply_markup=keyboard)

                            logging.info(f"üé¨ GIF –∞–Ω–∏–º–∞—Ü–∏—è —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                        elif file_type in ['mov', 'mp4', 'avi', 'mkv', 'webm'] or file_type == 'video':

                            # –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ

                            logging.info(f"üé¨ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤–∏–¥–µ–æ —Ñ–∞–π–ª: file_type='{file_type}', user_id={user_id}")

                            await bot.send_video(user_id, input_file, caption=full_text, reply_markup=keyboard)

                            logging.info(f"üé¨ –í–∏–¥–µ–æ —Ñ–∞–π–ª ({file_type}) —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                        else:

                            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Ñ–∞–π–ª–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç

                            logging.info(f"üìÑ –û—Ç–ø—Ä–∞–≤–ª—è—é –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç: file_type='{file_type}', user_id={user_id}")

                            await bot.send_document(user_id, input_file, caption=full_text, reply_markup=keyboard)

                        

                        await update_outbox_task_status(task_id, 'sent')

                        if is_song_demo:

                            logging.info(f"‚úÖ –î–µ–º–æ-—Ñ–∞–π–ª –ø–µ—Å–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                            
                            # –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ demo_received_song (–ì–ª–∞–≤–∞ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏)
                            from db import create_or_update_user_timer
                            await create_or_update_user_timer(user_id, order_id, "demo_received_song", "–ü–µ—Å–Ω—è")
                            logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–∞–ø–∞ demo_received_song (–ì–ª–∞–≤–∞ 3), –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}, –∑–∞–∫–∞–∑ {order_id}")
                            
                            # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–∞–ø–∞ demo_received_song —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —à–∞–±–ª–æ–Ω–æ–≤ –≤ –∞–¥–º–∏–Ω–∫–µ

                        elif is_book_demo:

                            logging.info(f"‚úÖ –î–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –∫–Ω–∏–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ")

                        elif is_book_draft:

                            logging.info(f"‚úÖ –ß–µ—Ä–Ω–æ–≤–∏–∫ –∫–Ω–∏–≥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É—Å–ø–µ—à–Ω–æ")

                            logging.info(f"üîò –ö–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω—ã: book_draft_edit, book_draft_ok")

                        else:

                            logging.info(f"‚úÖ –§–∞–π–ª —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")

                            logging.info(f"üîò –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {button_callback}")

                    except Exception as e:

                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ image_with_text_and_button {task_id}: {e}")

                        await update_outbox_task_status(task_id, 'failed')

                elif type_ == 'covers_selection':

                    try:

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –æ–±–ª–æ–∂–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É

                        logging.info(f"üé® –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é outbox –∑–∞–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ 'covers_selection'")

                        

                        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–±–ª–æ–∂–∫–∏

                        from db import get_cover_templates

                        cover_templates = await get_cover_templates()

                        logging.info(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–µ–Ω–æ {len(cover_templates) if cover_templates else 0} –æ–±–ª–æ–∂–µ–∫")

                        

                        if not cover_templates:

                            logging.warning(f"‚ö†Ô∏è –ù–µ—Ç –æ–±–ª–æ–∂–µ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")

                            await bot.send_message(user_id, "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–±–ª–æ–∂–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

                        await update_outbox_task_status(task_id, 'failed')

                        continue

                        

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –æ–±–ª–æ–∂–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π

                        for i, template in enumerate(cover_templates[:5]):  # –ú–∞–∫—Å–∏–º—É–º 5 –æ–±–ª–æ–∂–µ–∫

                            try:

                                covers_dir = "covers"
                                
                                # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É covers, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                                os.makedirs(covers_dir, exist_ok=True)

                                file_path = os.path.join(covers_dir, template['filename'])

                                

                                if os.path.exists(file_path):

                                    logging.info(f"‚úÖ –§–∞–π–ª –æ–±–ª–æ–∂–∫–∏ –Ω–∞–π–¥–µ–Ω: {file_path}")

                                                                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–±–ª–æ–∂–∫–∏

                                    keyboard = InlineKeyboardMarkup(inline_keyboard=[

                                        [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —ç—Ç—É –æ–±–ª–æ–∂–∫—É", callback_data=f"choose_cover_template_{template['id']}")]

                                    ])

                                    

                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π

                                    caption = f"üìñ <b>{template['name']}</b>\n\n"

                                    if template.get('category'):

                                        caption += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {template['category']}\n"

                                    caption += f"–û–±–ª–æ–∂–∫–∞ #{i+1} –∏–∑ {len(cover_templates[:5])}"

                                    

                                    await bot.send_photo(

                                        user_id,

                                        photo=FSInputFile(file_path),

                                        caption=caption,

                                        reply_markup=keyboard,

                                        parse_mode="HTML"

                                    )
                                    
                                    logging.info(f"‚úÖ –û–±–ª–æ–∂–∫–∞ {template['name']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                                else:

                                    logging.warning(f"‚ö†Ô∏è –§–∞–π–ª –æ–±–ª–æ–∂–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")

                            except Exception as e:

                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–∫–∏ {template['name']}: {e}")

                        

                        await update_outbox_task_status(task_id, 'sent')

                        logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(cover_templates[:5])} –æ–±–ª–æ–∂–µ–∫ –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏")

                    except Exception as e:

                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ covers_selection {task_id}: {e}")

                        await update_outbox_task_status(task_id, 'failed')

                elif type_ == 'page_selection':

                    try:

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã–±–æ—Ä–∞

                        logging.info(f"üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é outbox –∑–∞–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ 'page_selection'")

                        

                        file_type = (task.get('file_type') or '').lower()

                        comment = task.get('comment') or ''

                        button_text = task.get('button_text') or '‚úÖ –í—ã–±—Ä–∞—Ç—å'

                        button_callback = task.get('button_callback') or 'choose_page'

                        

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü

                        try:

                            from aiogram.fsm.context import FSMContext

                            from aiogram.fsm.storage.memory import MemoryStorage

                            

                            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                            storage = dp.storage

                            state_key = f"{user_id}:{user_id}"

                            

                            # –°–æ–∑–¥–∞–µ–º FSMContext –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                            from aiogram.fsm.storage.base import StorageKey

                            storage_key = StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id)

                            user_state = FSMContext(storage=storage, key=storage_key)

                            

                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü

                            await user_state.set_state(BookFinalStates.choosing_pages)

                            

                            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç

                            current_data = await user_state.get_data()

                            order_id = task.get('order_id')

                            if order_id and 'order_id' not in current_data:

                                await user_state.update_data(order_id=order_id)

                            

                            # –û–ß–ò–©–ê–ï–ú –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è

                            # —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–Ω–æ–≤–æ –≤—ã–±—Ä–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã

                            if 'selected_pages' in current_data:

                                await user_state.update_data(selected_pages=[])

                                logging.info(f"üßπ –û—á–∏—â–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                            

                            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è

                            await user_state.update_data(

                                minimum_processed=False,

                                continue_message_sent=False

                            )

                            

                            logging.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ choosing_pages –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                        except Exception as state_error:

                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {state_error}")

                        

                        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

                        keyboard = InlineKeyboardMarkup(inline_keyboard=[

                            [InlineKeyboardButton(text=button_text, callback_data=button_callback)]

                        ])

                        

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É

                        if file_type in ['jpg', 'jpeg', 'png', 'image']:

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞

                            if not os.path.exists(content):

                                logging.error(f"‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {content}")

                                await update_outbox_task_status(task_id, 'failed')

                                continue

                            

                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM - –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É

                            try:

                                current_state = await user_state.get_state()

                                if current_state and current_state != "BookFinalStates:choosing_pages":

                                    logging.info(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø–µ—Ä–µ—à–µ–ª –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

                                    await update_outbox_task_status(task_id, 'sent')

                                    continue

                            except Exception as state_check_error:

                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {state_check_error}")

                            

                            input_file = FSInputFile(content)

                            caption = f"üìñ {comment}\n\n–ï—Å–ª–∏ —ç—Ç–æ—Ç —Å—é–∂–µ—Ç –ø—Ä–æ –≤–∞—Å, —Ç–æ –≤—ã–±–µ—Ä–∏ –µ–≥–æ:"

                            

                            await bot.send_photo(user_id, input_file, caption=caption, reply_markup=keyboard)

                            logging.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã–±–æ—Ä–∞")

                        else:

                            logging.error(f"‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è page_selection: {file_type}")

                        await update_outbox_task_status(task_id, 'failed')

                        continue

                        

                        await update_outbox_task_status(task_id, 'sent')

                    except Exception as e:

                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ page_selection {task_id}: {e}")

                        await update_outbox_task_status(task_id, 'failed')

                elif type_ == 'text_with_buttons':
                    
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        logging.info(f"üìù OUTBOX: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é text_with_buttons –¥–ª—è user_id={user_id}, task_id={task_id}, content='{text[:50]}...'")
                        
                        text = content
                        button_text = task.get('button_text', '')
                        button_callback = task.get('button_callback', '')
                        
                        # –ü–∞—Ä—Å–∏–º –∫–Ω–æ–ø–∫–∏ (—Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ |)
                        button_texts = button_text.split('|') if button_text else []
                        button_callbacks = button_callback.split('|') if button_callback else []
                        
                        if button_texts and button_callbacks and len(button_texts) == len(button_callbacks):
                            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                                [InlineKeyboardButton(text=btn_text.strip(), callback_data=btn_callback.strip())]
                                for btn_text, btn_callback in zip(button_texts, button_callbacks)
                            ])
                            
                            await bot.send_message(user_id, text, parse_mode="HTML", reply_markup=keyboard)
                        else:
                            # –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ –Ω–∏—Ö
                            await bot.send_message(user_id, text, parse_mode="HTML")
                        
                        await update_outbox_task_status(task_id, 'sent')
                        logging.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                        
                    except Exception as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ text_with_buttons {task_id}: {e}")
                        await update_outbox_task_status(task_id, 'failed')

                elif type_ == 'text':

                    try:

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

                        logging.info(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é outbox –∑–∞–¥–∞–Ω–∏–µ —Ç–∏–ø–∞ 'text'")

                        

                        # –ï—Å–ª–∏ —ç—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

                        comment = task.get('comment') or ''

                        if '–≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü' in comment.lower() or '–≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã' in content.lower():

                            try:

                                from aiogram.fsm.context import FSMContext

                                

                                # –°–æ–∑–¥–∞–µ–º FSMContext –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                                from aiogram.fsm.storage.base import StorageKey

                                storage_key = StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id)

                                user_state = FSMContext(storage=dp.storage, key=storage_key)

                                

                                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü

                                await user_state.set_state(BookFinalStates.choosing_pages)

                                

                                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞

                                order_id = task.get('order_id')

                                if order_id:

                                    await user_state.update_data(order_id=order_id)

                                

                                logging.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ choosing_pages –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                            except Exception as state_error:

                                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π: {state_error}")

                        

                        await bot.send_message(user_id, content, parse_mode="HTML")

                        logging.info(f"‚úÖ –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")

                        

                        await update_outbox_task_status(task_id, 'sent')

                    except Exception as e:

                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ text {task_id}: {e}")

                        await update_outbox_task_status(task_id, 'failed')

                elif type_ == 'manager_notification':

                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                    await update_outbox_task_status(task_id, 'sent')

                elif type_ == 'set_state':

                    try:

                        logging.info(f"üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {content}")

                        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        from aiogram.fsm.storage.base import StorageKey
                        storage_key = StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id)
                        
                        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
                        from aiogram.fsm.context import FSMContext
                        state = FSMContext(storage=storage, key=storage_key)
                        
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        if content == "DeliveryStates.waiting_for_address":
                            from aiogram.fsm.state import StatesGroup, State
                            class DeliveryStates(StatesGroup):
                                waiting_for_address = State()
                            await state.set_state(DeliveryStates.waiting_for_address)
                        else:
                            # –î–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É
                            logging.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏: {content}")
                        
                        await update_outbox_task_status(task_id, 'sent')
                        logging.info(f"‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")

                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è {task_id}: {e}")
                        await update_outbox_task_status(task_id, 'failed')

                else:

                    await update_outbox_task_status(task_id, 'failed')

        except Exception as e:

            error_msg = str(e)
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ task_id –∏ user_id
            safe_task_id = locals().get('task_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            safe_user_id = locals().get('user_id', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è {safe_task_id}: {error_msg}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–π traceback –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            import traceback
            logging.error(f"üîç –ü–û–õ–ù–´–ô TRACEBACK –û–®–ò–ë–ö–ò: {traceback.format_exc()}")

            

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏

            if "Forbidden" in error_msg or "bot was blocked" in error_msg.lower():

                logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {safe_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")

                # –î–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ failed –∏ –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º
                if safe_task_id != '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                    await update_outbox_task_status(safe_task_id, 'failed')

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞

                # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
                if 'task' in locals() and task:
                    await add_outbox_task(
                        order_id=task.get('order_id'),
                        user_id=0,  # –°–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        type_="manager_notification",
                        content=f"‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {safe_user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –î–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –Ω–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º."
                    )

            elif "chat not found" in error_msg.lower():

                logging.error(f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {safe_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞–ª —Å –±–æ—Ç–æ–º)")

                if safe_task_id != '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                    await update_outbox_task_status(safe_task_id, 'failed')

            elif "user not found" in error_msg.lower():

                logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {safe_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ Telegram")

                if safe_task_id != '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                    await update_outbox_task_status(safe_task_id, 'failed')

            else:

                # –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ pending –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏

                logging.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {safe_user_id}: {error_msg}")

                if safe_task_id != '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ':
                    await update_outbox_task_status(safe_task_id, 'pending')

        except Exception as e:
            logging.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –í PROCESS_OUTBOX_TASKS: {e}")
            import traceback
            logging.error(f"‚ùå –ü–û–õ–ù–´–ô TRACEBACK: {traceback.format_exc()}")

        await asyncio.sleep(2)  # –£–º–µ–Ω—å—à–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á



async def compress_image(image_path: str, max_size_mb: float = 5.0, quality: int = 85):

    """

    –°–∂–∏–º–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞

    """

    try:

        from PIL import Image

        import io

        

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

        with Image.open(image_path) as img:

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

            if img.mode in ('RGBA', 'LA', 'P'):

                img = img.convert('RGB')

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞

            file_size = os.path.getsize(image_path) / (1024 * 1024)  # –≤ –ú–ë

            

            if file_size <= max_size_mb:

                logging.info(f"üì∏ –§–∞–π–ª {image_path} —É–∂–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ ({file_size:.2f} –ú–ë)")

                return

            

            # –°–∂–∏–º–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

            output = io.BytesIO()

            

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç

            if image_path.lower().endswith('.png'):

                img.save(output, format='PNG', optimize=True)

            else:

                img.save(output, format='JPEG', quality=quality, optimize=True)

            

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ—Å–ª–µ —Å–∂–∞—Ç–∏—è

            compressed_size = len(output.getvalue()) / (1024 * 1024)  # –≤ –ú–ë

            

            if compressed_size <= max_size_mb:

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

                with open(image_path, 'wb') as f:

                    f.write(output.getvalue())

                logging.info(f"üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∂–∞—Ç–æ: {file_size:.2f} –ú–ë ‚Üí {compressed_size:.2f} –ú–ë")

            else:

                # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, —É–º–µ–Ω—å—à–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ

                while compressed_size > max_size_mb and quality > 30:

                    quality -= 10

                    output = io.BytesIO()

                    img.save(output, format='JPEG', quality=quality, optimize=True)

                    compressed_size = len(output.getvalue()) / (1024 * 1024)

                

                if compressed_size <= max_size_mb:

                    with open(image_path, 'wb') as f:

                        f.write(output.getvalue())

                    logging.info(f"üì∏ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∂–∞—Ç–æ —Å –∫–∞—á–µ—Å—Ç–≤–æ–º {quality}: {file_size:.2f} –ú–ë ‚Üí {compressed_size:.2f} –ú–ë")

                else:

                    logging.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∂–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {image_path} –¥–æ {max_size_mb} –ú–ë")

                    

    except ImportError:

        logging.warning("‚ö†Ô∏è PIL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Å–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")



async def download_and_save_photo(bot: Bot, file_id: str, save_dir: str, filename: str) -> str:

    file = await bot.get_file(file_id)

    file_path = file.file_path

    dest_path = os.path.join(save_dir, filename)

    await bot.download_file(file_path, dest_path)

    

    # –°–∂–∏–º–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –µ—Å–ª–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

    try:

        if filename.lower().endswith(('.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.webp')):

            await compress_image(dest_path)

            logging.info(f"‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å–∂–∞—Ç–∞: {filename}")

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ {filename}: {e}")

    

    return filename



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ

async def send_payment_reminders(bot: Bot):

    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞"""

    while True:

        try:

            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç –æ–ø–ª–∞—Ç—ã –±–æ–ª–µ–µ 1 –º–∏–Ω—É—Ç—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

            from db import aiosqlite, DB_PATH

            import datetime

            

            async with aiosqlite.connect(DB_PATH) as db:

                # –ó–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "waiting_payment" —Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

                one_minute_ago = datetime.now() - timedelta(minutes=1)

                cursor = await db.execute('''

                    SELECT id, user_id, order_data FROM orders 

                    WHERE status = 'waiting_payment' 

                    AND updated_at < ?

                ''', (one_minute_ago,))

                orders = await cursor.fetchall()

                

                for order_id, user_id, order_data in orders:

                    try:

                        # –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

                        await bot.send_message(

                            user_id,

                            "–í–æ–∑–º–æ–∂–Ω–æ, —Ü–µ–Ω–∞ –≤–∞—Å —Å–º—É—Ç–∏–ª–∞? –ú—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º."

                        )

                        

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

                        await db.execute(

                            'UPDATE orders SET status = ? WHERE id = ?',

                            ('reminder_sent', order_id)

                        )

                        await db.commit()

                        

                        # –í—Ç–æ—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

                        await asyncio.sleep(60)  # 1 –º–∏–Ω—É—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

                        await bot.send_message(

                            user_id,

                            "–ì–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–∏–≥—É –ø—Ä–æ—â–µ, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ –∏—Å–∫—Ä–µ–Ω–Ω–µ–π. –î–∞–π—Ç–µ –∑–Ω–∞—Ç—å, –µ—Å–ª–∏ –≤–∞–º —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ."

                        )

                        

                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

                        await db.execute(

                            'UPDATE orders SET status = ? WHERE id = ?',

                            ('final_reminder_sent', order_id)

                        )

                        await db.commit()

                        

                    except Exception as e:

                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

                        

        except Exception as e:

            logging.error(f"–û—à–∏–±–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)

        await asyncio.sleep(30)  # 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è



@dp.callback_query(F.data == "continue_creation")

async def continue_creation_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    try:

        ebook_price = await get_product_price_async("–ö–Ω–∏–≥–∞", "üìÑ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞")

        combo_price = await get_product_price_async("–ö–Ω–∏–≥–∞", "üì¶ –ü–µ—á–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è")

    except:

        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –∏–∑ –ë–î, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ

        ebook_price = 1990

        combo_price = 7639

    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç–∞ –∏ –æ–ø–ª–∞—Ç—ã

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text=f"–ü–µ—á–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî {combo_price} —Ä—É–±–ª–µ–π", callback_data="format_combo")]

    ])

    

    await safe_edit_message(

        callback.message,

        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –≤–∞—à–µ–π –∫–Ω–∏–≥–∏:",

        reply_markup=keyboard

    )

    

    await log_state(callback.message, state)



async def process_message_templates(bot: Bot):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)"""

    logging.info("üîÑ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ process_message_templates")

    

    while True:

        try:

            from db import get_message_templates, get_users_on_step, is_message_sent_to_user, log_message_sent, get_order

            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã

            templates = await get_message_templates()

            

            if not templates:
                continue

                logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(templates)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π")

            

            for template in templates:

                order_step = template['order_step']

                delay_minutes = template['delay_minutes']

                template_id = template['id']

                message_type = template['message_type']

                content = template['content']

                

                logging.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —à–∞–±–ª–æ–Ω {template_id} –¥–ª—è —à–∞–≥–∞ '{order_step}' —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {delay_minutes} –º–∏–Ω, —Ç–∏–ø: {message_type}")

                

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–æ–º —à–∞–≥–µ —Å –Ω—É–∂–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π

                users = await get_users_on_step(order_step, delay_minutes)

                if users:
                    logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template_id} ({message_type})")
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    for i, user in enumerate(users[:3]):
                        order_id = user['order_id']
                        order = await get_order(order_id)
                        if order:
                            order_status = order.get('status')
                            order_data = order.get('order_data', {})
                            if isinstance(order_data, str):
                                import json
                                order_data = json.loads(order_data)
                            product = order_data.get('product', '')
                            logging.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i+1}: order_id={order_id}, status={order_status}, product={product}")
                else:
                    logging.info(f"‚ÑπÔ∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template_id} ({message_type}) –Ω–∞ —à–∞–≥–µ {order_step}")
                    continue
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
                from datetime import datetime, timedelta
                cutoff_time = datetime.now() - timedelta(hours=24)
                
                eligible_users = []
                for user_data in users:
                    order_id = user_data['order_id']
                    order = await get_order(order_id)
                    if order and order.get('created_at'):
                        order_created = datetime.fromisoformat(order['created_at'].replace('Z', '+00:00'))
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
                        if order_created > cutoff_time:
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã
                            order_status = order.get('status')
                            if order_status == 'collecting_facts':
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞
                                order_data = order.get('order_data', {})
                                if isinstance(order_data, str):
                                    import json
                                    order_data = json.loads(order_data)
                                product = order_data.get('product', '')
                                
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —à–∞–≥–∞
                                if order_step == "song_collecting_facts" and product == "–ü–µ—Å–Ω—è":
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ collecting_facts
                                    order_updated = datetime.fromisoformat(order.get('updated_at', order['created_at']).replace('Z', '+00:00'))
                                    time_since_update = datetime.now() - order_updated
                                    required_delay = timedelta(minutes=delay_minutes)
                                    
                                    if time_since_update >= required_delay:
                                        eligible_users.append(user_data)
                                elif order_step == "book_collecting_facts" and product == "–ö–Ω–∏–≥–∞":
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –º–æ–º–µ–Ω—Ç–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ collecting_facts
                                    order_updated = datetime.fromisoformat(order.get('updated_at', order['created_at']).replace('Z', '+00:00'))
                                    time_since_update = datetime.now() - order_updated
                                    required_delay = timedelta(minutes=delay_minutes)
                                    
                                    if time_since_update >= required_delay:
                                        eligible_users.append(user_data)
                
                if not eligible_users:
                    logging.info(f"‚ÑπÔ∏è –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template_id} ({message_type})")
                    continue
                    
                logging.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {len(eligible_users)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ {len(users)} –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template_id} ({message_type})")
                users = eligible_users

                sent_count = 0
                skipped_count = 0

                for user_data in users:

                    user_id = user_data['user_id']

                    order_id = user_data['order_id']

                    

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

                    if await is_message_sent_to_user(template_id, user_id, order_id):

                        skipped_count += 1
                        continue
                    
                    # order —É–∂–µ –ø–æ–ª—É—á–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤—ã—à–µ
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)
                    # –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ "chat not found"
                    try:
                        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                        chat = await bot.get_chat(user_id)
                        if not chat:
                            skipped_count += 1
                            continue
                    except Exception:
                        # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —á–∞—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        skipped_count += 1
                        continue

                    

                    # order —É–∂–µ –ø–æ–ª—É—á–µ–Ω –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤—ã—à–µ
                    order_status = order.get('status')

                    

                    # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ

                    if message_type in ['payment_reminder', 'final_reminder', 'payment_reminder_24h', 'payment_reminder_48h'] and order_status in ['paid', 'upsell_paid', 'ready', 'delivered', 'completed']:

                        skipped_count += 1
                        continue

                    

                    try:

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

                        await bot.send_message(user_id, content)

                        # logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞ {template_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                        sent_count += 1

                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏

                        await log_message_sent(template_id, user_id, order_id)

                        

                    except Exception as e:
                        error_msg = str(e)
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—à–∏–±–∫–∏ "chat not found" (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞)
                        if "chat not found" in error_msg.lower():
                            skipped_count += 1
                            # –í—Å–µ —Ä–∞–≤–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
                            await log_message_sent(template_id, user_id, order_id)
                        else:
                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —à–∞–±–ª–æ–Ω–∞ {template_id} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                            skipped_count += 1

                # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —à–∞–±–ª–æ–Ω–∞
                if users:
                    logging.info(f"üìä –®–∞–±–ª–æ–Ω {template_id} ({message_type}): –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}, –ø—Ä–æ–ø—É—â–µ–Ω–æ {skipped_count} –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            # await process_old_delayed_messages_fixed(bot)  # –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É

            

        except Exception as e:

            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_message_templates: {e}")

        

        # –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π

        await asyncio.sleep(10)



async def process_timer_based_messages(bot: Bot):
    """
    –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
    """
    logging.info("üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–∞–π–º–µ—Ä–∞–º")

    while True:
        try:
            from db import get_users_ready_for_messages, is_timer_message_sent, log_timer_message_sent, get_order
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≥–æ—Ç–æ–≤—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–∞–π–º–µ—Ä–∞–º
            ready_users = await get_users_ready_for_messages()
            
            if ready_users:
                logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(ready_users)} –≥–æ—Ç–æ–≤—ã—Ö –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            for user_data in ready_users:
                timer_id = user_data['timer_id']
                user_id = user_data['user_id']
                order_id = user_data['order_id']
                template_id = user_data['template_id']
                message_type = user_data['message_type']
                content = user_data['content']
                delay_minutes = user_data['delay_minutes']
                template_name = user_data['template_name']
                
                logging.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é –æ—Ç–ø—Ä–∞–≤–∫—É '{template_name}' (–∑–∞–¥–µ—Ä–∂–∫–∞ {delay_minutes}–º) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                logging.info(f"üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã 'message_templates' (ID: {template_id}): {content[:100]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞
                if await is_timer_message_sent(timer_id, template_id, delay_minutes):
                    logging.info(f"‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è —Ç–∞–π–º–µ—Ä–∞ {timer_id}, —à–∞–±–ª–æ–Ω {template_id}")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
                order = await get_order(order_id)
                if not order:
                    logging.warning(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–∫–∞–∑ –≤—Å–µ –µ—â–µ –≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
                order_status = order.get('status')
                logging.info(f"üîç –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_id}: {order_status}, —ç—Ç–∞–ø: {user_data['order_step']}")
                # –ë–ª–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã, –ù–ï –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ!
                if order_status in ['completed', 'cancelled', 'failed', 'delivered']:
                    logging.info(f"‚ùå –ó–∞–∫–∞–∑ {order_id} –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ {order_status}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ")
                    continue
                
                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                    from db import get_message_template_files
                    files = await get_message_template_files(template_id)
                    
                    logging.info(f"üìÅ –§–∞–π–ª—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞ '{template_name}' (ID: {template_id}): –Ω–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤")
                    if files:
                        for i, file_info in enumerate(files):
                            logging.info(f"  üìé –§–∞–π–ª {i+1}: {file_info.get('file_name', 'unknown')} ({file_info.get('file_type', 'unknown')})")
                    
                    if files:
                        # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
                        media_group = await create_mixed_media_group(files, content)
                        
                        if media_group:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                            await bot.send_media_group(user_id, media_group)
                            logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞ —Å {len(files)} —Ñ–∞–π–ª–∞–º–∏ '{template_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–∑–∞–∫–∞–∑ {order_id})")
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
                            for file_info in files:
                                await send_file_by_type(
                                    bot, user_id, 
                                    file_info['file_path'], 
                                    file_info['file_type'],
                                    content if files.index(file_info) == 0 else None
                                )
                            logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ñ–∞–π–ª—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏ '{template_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–∑–∞–∫–∞–∑ {order_id})")
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                        await bot.send_message(user_id, content, parse_mode="HTML")
                        logging.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ '{template_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–∑–∞–∫–∞–∑ {order_id})")
                    
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
                    await log_timer_message_sent(timer_id, template_id, user_id, order_id, message_type, delay_minutes)
                    
                    # –¢–∞–∫–∂–µ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                    from db import log_message_sent
                    await log_message_sent(template_id, user_id, order_id)
                    
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è '{template_name}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_timer_based_messages: {e}")
        
        await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

async def complete_all_delayed_messages():
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—à–ª—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
    try:
        from db import get_pending_delayed_messages, update_delayed_message_status
        
        messages = await get_pending_delayed_messages()
        
        if messages:
            logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(messages)} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            
            for message in messages:
                message_id = message['id']
                message_type = message['message_type']
                user_id = message['user_id']
                order_id = message['order_id']
                
                # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ (–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
                await update_delayed_message_status(message_id, 'sent')
                logging.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} —Ç–∏–ø–∞ '{message_type}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            logging.info(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ {len(messages)} –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        else:
            logging.info("üîç –û—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

async def process_old_delayed_messages_fixed(bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    
    try:
        from db import get_pending_delayed_messages, update_delayed_message_status, get_delayed_message_files, get_order, log_general_message_sent, is_general_message_sent_to_user
        
        messages = await get_pending_delayed_messages()
        
        if messages:
            logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å—Ç–∞—Ä—ã—Ö –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        
        for message in messages:
            user_id = message['user_id']
            order_id = message['order_id']
            message_type = message['message_type']
            content = message['content']
            message_id = message['id']
            
            # logging.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} —Ç–∏–ø–∞ '{message_type}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è
                order = await get_order(order_id)
                if not order:
                    logging.warning(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")
                    await update_delayed_message_status(message_id, 'failed')
                    continue

                order_status = order.get('status') if order else None
                
                # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
                if message_type in ['payment_reminder', 'final_reminder', 'payment_reminder_24h', 'payment_reminder_48h'] and order_status in ['paid', 'upsell_paid', 'ready', 'delivered', 'completed']:
                    logging.info(f"–ó–∞–∫–∞–∑ {order_id} —É–∂–µ –æ–ø–ª–∞—á–µ–Ω (—Å—Ç–∞—Ç—É—Å: {order_status}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {message_type}")
                    await update_delayed_message_status(message_id, 'cancelled')
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if await is_general_message_sent_to_user(message_id, user_id, order_id):
                    # logging.info(f"‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–∑–∞–∫–∞–∑ {order_id})")
                    await update_delayed_message_status(message_id, 'sent')
                    continue
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ 'sent', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if message.get('status') == 'sent':
                    # logging.info(f"‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ 'sent', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    continue
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                files = await get_delayed_message_files(message_id)
                
                if message_type == 'demo_example':
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä –∫–Ω–∏–≥–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"
                    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É", callback_data="continue_after_demo")]
                    ])
                    
                    if files:
                        # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
                        media_group = await create_mixed_media_group(files, content)
                        
                        if media_group:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É
                            await bot.send_media_group(user_id, media_group)
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
                            await bot.send_message(user_id, "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=keyboard)
                        else:
                            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
                            for file_info in files:
                                await send_file_by_type(
                                    bot, user_id, 
                                    file_info['file_path'], 
                                    file_info['file_type'],
                                    content if files.index(file_info) == 0 else None
                                )
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
                            await bot.send_message(user_id, "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=keyboard)
                    else:
                        # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π
                        await bot.send_message(user_id, content, reply_markup=keyboard)
                    
                    await update_delayed_message_status(message_id, 'sent')
                    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫—É
                    await log_general_message_sent(message_id, user_id, order_id)
                    
                elif message_type.startswith('song_filling_reminder_'):
                    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –¥–ª—è –ø–µ—Å–Ω–∏
                    logging.info(f"üéµ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã –ø–µ—Å–Ω–∏: {message_type}")
                    await bot.send_message(user_id, content, parse_mode="HTML")
                    await update_delayed_message_status(message_id, 'sent')
                    await log_general_message_sent(message_id, user_id, order_id)
                    
                elif message_type.startswith('song_warming_'):
                    # –ü—Ä–æ–≥—Ä–µ–≤–∞—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–µ—Å–Ω–∏
                    logging.info(f"üéµ –û—Ç–ø—Ä–∞–≤–ª—è—é –ø—Ä–æ–≥—Ä–µ–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–µ—Å–Ω–∏: {message_type}")
                    await bot.send_message(user_id, content, parse_mode="HTML")
                    await update_delayed_message_status(message_id, 'sent')
                    await log_general_message_sent(message_id, user_id, order_id)
                    
                elif message_type.startswith('waiting_demo_song_'):
                    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –¥–µ–º–æ –ø–µ—Å–Ω–∏ - –û–¢–ö–õ–Æ–ß–ï–ù–û (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∞–π–º–µ—Ä–æ–≤)
                    logging.info(f"üéµ –ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –¥–µ–º–æ –ø–µ—Å–Ω–∏ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∞–π–º–µ—Ä–æ–≤): {message_type}")
                    await update_delayed_message_status(message_id, 'cancelled')
                    continue
                    
                elif message_type.startswith('demo_received_song_'):
                    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–º–æ –ø–µ—Å–Ω–∏ - –û–¢–ö–õ–Æ–ß–ï–ù–û (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∞–π–º–µ—Ä–æ–≤)
                    logging.info(f"üéµ –ü—Ä–æ–ø—É—Å–∫–∞—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ–º–æ –ø–µ—Å–Ω–∏ (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ç–∞–π–º–µ—Ä–æ–≤): {message_type}")
                    await update_delayed_message_status(message_id, 'cancelled')
                    continue
                    
                elif message_type == 'waiting_full_song_1h':
                    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–ª–Ω–æ–π –ø–µ—Å–Ω–∏
                    logging.info(f"üéµ –û—Ç–ø—Ä–∞–≤–ª—è—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–ª–Ω–æ–π –ø–µ—Å–Ω–∏: {message_type}")
                    await bot.send_message(user_id, content, parse_mode="HTML")
                    await update_delayed_message_status(message_id, 'sent')
                    await log_general_message_sent(message_id, user_id, order_id)
                    
                else:
                    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
                    await bot.send_message(user_id, content, parse_mode="HTML")
                    await update_delayed_message_status(message_id, 'sent')
                    await log_general_message_sent(message_id, user_id, order_id)
                    
            except Exception as e:
                pass  # logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_old_delayed_messages_fixed: {e}")

async def process_old_delayed_messages(bot: Bot):
    """–°—Ç–∞—Ä–∞—è –≤–µ—Ä—Å–∏—è (–æ—Ç–∫–ª—é—á–µ–Ω–∞)"""
    # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ç—Å—Ç—É–ø–æ–≤
    while True:
        await asyncio.sleep(10)
        continue

    

    # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ö–û–î –° –û–®–ò–ë–ö–ê–ú–ò –û–¢–°–¢–£–ü–û–í (–ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù)

    """

    while True:

        try:

            from db import get_pending_delayed_messages, update_delayed_message_status, get_delayed_message_files, get_order, log_general_message_sent, is_general_message_sent_to_user

            

            messages = await get_pending_delayed_messages()

            

            if messages:

                logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(messages)} —Å—Ç–∞—Ä—ã—Ö –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")

            

            for message in messages:

                    user_id = message['user_id']

                    order_id = message['order_id']

                    message_type = message['message_type']

                    content = message['content']

                    message_id = message['id']

                    

                    # logging.info(f"üîç –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id} —Ç–∏–ø–∞ '{message_type}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                    

                    try:

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è

                        order = await get_order(order_id)

                        if not order:

                            logging.warning(f"–ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {message_id}")

                            await update_delayed_message_status(message_id, 'failed')

                            continue

                        

                        order_status = order.get('status') if order else None

                        

                        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ

                        if message_type in ['payment_reminder', 'final_reminder', 'payment_reminder_24h', 'payment_reminder_48h'] and order_status in ['paid', 'upsell_paid', 'ready', 'delivered', 'completed']:

                            logging.info(f"–ó–∞–∫–∞–∑ {order_id} —É–∂–µ –æ–ø–ª–∞—á–µ–Ω (—Å—Ç–∞—Ç—É—Å: {order_status}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º {message_type}")

                            await update_delayed_message_status(message_id, 'cancelled')

                            continue

                        

                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

                        if await is_general_message_sent_to_user(message_id, user_id, order_id):

                            # logging.info(f"‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–∑–∞–∫–∞–∑ {order_id})")

                            await update_delayed_message_status(message_id, 'sent')

                            continue

                        

                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ 'sent', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º

                        if message.get('status') == 'sent':

                            # logging.info(f"‚ÑπÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–∂–µ –≤ —Å—Ç–∞—Ç—É—Å–µ 'sent', –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")

                            continue

                        

                        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

                        files = await get_delayed_message_files(message_id)

                        

                        if message_type == 'demo_example':

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä –∫–Ω–∏–≥–∏ —Å –∫–Ω–æ–ø–∫–æ–π "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"

                            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

                            

                            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π

                            keyboard = InlineKeyboardMarkup(inline_keyboard=[

                                [InlineKeyboardButton(text="–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É", callback_data="continue_after_demo")]

                            ])

                            

                            if files:

                                # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤

                                media_group = await create_mixed_media_group(files, content)

                                

                                if media_group:

                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É

                                    await bot.send_media_group(user_id, media_group)

                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã

                                    await bot.send_message(user_id, "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=keyboard)

                                else:

                                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏

                                    for file_info in files:

                                        await send_file_by_type(

                                            bot, user_id, 

                                            file_info['file_path'], 

                                            file_info['file_type'],

                                            content if files.index(file_info) == 0 else None

                                        )

                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

                                    await bot.send_message(user_id, "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=keyboard)

                            else:

                                # –ï—Å–ª–∏ –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–æ–π

                                await bot.send_message(user_id, content, reply_markup=keyboard)

                            

                            await update_delayed_message_status(message_id, 'sent')

                            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫—É

                            await log_general_message_sent(message_id, user_id, order_id)

                            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —à–∞–±–ª–æ–Ω–∞

                            from db import increment_template_usage

                            await increment_template_usage(message_id)

                        

                    elif message_type == 'page_selection':

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ (–∫–∞–∂–¥—É—é –æ—Ç–¥–µ–ª—å–Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π)

                        logging.info(f"üìñ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ 'page_selection'")

                        

                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü

                        try:

                            from aiogram.fsm.context import FSMContext

                            from aiogram.fsm.storage.base import StorageKey

                            

                            # –°–æ–∑–¥–∞–µ–º FSMContext –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

                            storage_key = StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id)

                            user_state = FSMContext(storage=dp.storage, key=storage_key)

                            

                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü

                            await user_state.set_state(BookFinalStates.choosing_pages)

                            

                            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞

                            if order_id:

                                await user_state.update_data(order_id=order_id)

                            

                            logging.info(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ choosing_pages –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

                        except Exception as state_error:

                            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {state_error}")

                        

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏

                        await bot.send_message(user_id, content, parse_mode="HTML")

                        

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –ø–æ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü

                        selection_instructions = (

                            "üìñ <b>–í—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏</b>\n\n"

                            "–ó–¥–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –≥–æ—Ç–æ–≤—ã–µ –≤–∫–ª–∞–¥—ã—à–∏.\n"

                            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–≤–Ω–æ 24 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.\n"

                            "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–ø–∏—à–∏—Ç–µ '–î–∞–ª–µ–µ' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."

                        )

                        await bot.send_message(user_id, selection_instructions, parse_mode="HTML")

                        

                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –æ—Ç–¥–µ–ª—å–Ω–æ —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã–±–æ—Ä–∞

                        if files:

                            photos = [f for f in files if f['file_type'] == 'photo']

                            for i, photo in enumerate(photos, 1):

                                try:

                                    keyboard = InlineKeyboardMarkup(inline_keyboard=[

                                        [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", callback_data=f"choose_page_{i}")]

                                    ])

                                    

                                    caption = f"üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i}\n\n–ï—Å–ª–∏ —ç—Ç–æ—Ç —Å—é–∂–µ—Ç –ø—Ä–æ –≤–∞—Å, —Ç–æ –≤—ã–±–µ—Ä–∏ –µ–≥–æ:"

                                    

                                    await bot.send_photo(

                                        user_id,

                                        FSInputFile(photo['file_path']),

                                        caption=caption,

                                        reply_markup=keyboard

                                    )

                                    logging.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {i} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å –∫–Ω–æ–ø–∫–æ–π –≤—ã–±–æ—Ä–∞")

                                except Exception as photo_error:

                                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {i}: {photo_error}")

                        

                        await update_delayed_message_status(message_id, 'sent')

                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫—É

                        await log_general_message_sent(message_id, user_id, order_id)

                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —à–∞–±–ª–æ–Ω–∞

                        from db import increment_template_usage

                        await increment_template_usage(message_id)

                        

                    elif message_type == 'payment_reminder':

                        # –ü–µ—Ä–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ

                        if files:

                            # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤

                            media_group = await create_mixed_media_group(files, content)

                            

                            if media_group:

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É

                                await bot.send_media_group(user_id, media_group)

                            else:

                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏

                                for file_info in files:

                                    await send_file_by_type(

                                        bot, user_id, 

                                        file_info['file_path'], 

                                        file_info['file_type'],

                                        content if files.index(file_info) == 0 else None

                                )

                        else:

                            await bot.send_message(user_id, content)

                        

                        await update_delayed_message_status(message_id, 'sent')

                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫—É

                        await log_general_message_sent(message_id, user_id, order_id)

                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —à–∞–±–ª–æ–Ω–∞

                        from db import increment_template_usage

                        await increment_template_usage(message_id)

                        

                    elif message_type == 'final_reminder':

                        # –§–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ

                        if files:

                            # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤

                            media_group = await create_mixed_media_group(files, content)

                            

                            if media_group:

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É

                                await bot.send_media_group(user_id, media_group)

                            else:

                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏

                                for file_info in files:

                                    await send_file_by_type(

                                        bot, user_id, 

                                        file_info['file_path'], 

                                        file_info['file_type'],

                                        content if files.index(file_info) == 0 else None

                                )

                        else:

                            await bot.send_message(user_id, content)

                        

                        await update_delayed_message_status(message_id, 'sent')

                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫—É

                        await log_general_message_sent(message_id, user_id, order_id)

                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —à–∞–±–ª–æ–Ω–∞

                        from db import increment_template_usage

                        await increment_template_usage(message_id)

                        

                    else:

                        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π

                        logging.info(f"üîç –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ '{message_type}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                        

                        if files:

                            # –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –∏–∑ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤

                            media_group = await create_mixed_media_group(files, content)

                            

                            if media_group:

                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É

                                await bot.send_media_group(user_id, media_group)

                            else:

                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏

                                for file_info in files:

                                    await send_file_by_type(

                                        bot, user_id, 

                                        file_info['file_path'], 

                                        file_info['file_type'],

                                        content if files.index(file_info) == 0 else None

                                    )

                        else:

                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

                            if message_type in ['payment_reminder_24h', 'payment_reminder_48h']:

                        await bot.send_message(user_id, content)

                            elif message_type in ['song_progress_update', 'book_progress_update', 'story_placeholder']:

                                await bot.send_message(user_id, content, parse_mode="HTML")

                    elif message_type == 'book_offer_after_song':

                                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∫–Ω–∏–≥–∏

                        keyboard = InlineKeyboardMarkup(inline_keyboard=[

                            [InlineKeyboardButton(text="üìñ –°–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É", callback_data="create_book_after_song")],

                            [InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_song_order")]

                        ])

                        await bot.send_message(user_id, content, reply_markup=keyboard)

                            else:

                                await bot.send_message(user_id, content)

                        

                        await update_delayed_message_status(message_id, 'sent')

                        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫—É

                        await log_general_message_sent(message_id, user_id, order_id)

                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —à–∞–±–ª–æ–Ω–∞

                        from db import increment_template_usage

                        await increment_template_usage(message_id)

                        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —à–∞–±–ª–æ–Ω–∞

                        from db import increment_template_usage

                        await increment_template_usage(message_id)

                        logging.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ '{message_type}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

                        

                        

                    except Exception as e:

                        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")

                        await update_delayed_message_status(message_id, 'failed')

                        

        except Exception as e:

            logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

        

        await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    """



@dp.callback_query(F.data.in_(["insert_card", "insert_letter", "insert_audio", "insert_drawing", "insert_poem", "insert_certificate", "skip_inserts"]))

async def choose_insert_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    if callback.data == "skip_inserts":

        await callback.message.edit_text("–í–∫–ª–∞–¥—ã—à–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É.")

        await state.set_state(AdditionsStates.done)

        await additions_next_callback(callback, state)

        return

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∫–ª–∞–¥—ã—à

    data = await state.get_data()

    inserts = data.get("inserts", [])

    insert_name = {

        "insert_card": "–ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞",

        "insert_letter": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ", 

        "insert_audio": "–ê—É–¥–∏–æ-–ø–æ–∂–µ–ª–∞–Ω–∏–µ",

        "insert_drawing": "–†–∏—Å—É–Ω–æ–∫ —Ä–µ–±–µ–Ω–∫–∞",

        "insert_poem": "–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ",

        "insert_certificate": "–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"

    }[callback.data]

    

    inserts.append(insert_name)

    await state.update_data(inserts=inserts)

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –≤–∫–ª–∞–¥—ã—à–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞

    await state.update_data(current_insert=callback.data)

    

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤–∫–ª–∞–¥—ã—à–∞

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Ç–µ–∫—Å—Ç", callback_data="write_insert_text")],

        [InlineKeyboardButton(text="üé≠ –û—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–æ–≤", callback_data="auto_insert_text")],

        [InlineKeyboardButton(text="üîÑ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∫–ª–∞–¥—ã—à", callback_data="change_insert")]

    ])

    

    await callback.message.edit_text(

        f"üìù <b>–¢–µ–∫—Å—Ç –¥–ª—è –≤–∫–ª–∞–¥—ã—à–∞: {insert_name}</b>\n\n"

        f"–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –≤–∫–ª–∞–¥—ã—à–∞.\n\n"

        f"–í—ã –º–æ–∂–µ—Ç–µ:\n"

        f"‚Ä¢ –ù–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç\n"

        f"‚Ä¢ –û—Å—Ç–∞–≤–∏—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –Ω–∞—à–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–æ–≤\n"

        f"‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–∫–ª–∞–¥—ã—à",

        reply_markup=keyboard,

        parse_mode="HTML"

    )

    await state.set_state(AdditionsStates.waiting_insert_text)

    await log_state(callback.message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –≤–∫–ª–∞–¥—ã—à–∞

@dp.callback_query(F.data == "write_insert_text")

async def write_insert_text_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    data = await state.get_data()

    current_insert = data.get("current_insert")

    insert_name = {

        "insert_card": "–ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞",

        "insert_letter": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ", 

        "insert_audio": "–ê—É–¥–∏–æ-–ø–æ–∂–µ–ª–∞–Ω–∏–µ",

        "insert_drawing": "–†–∏—Å—É–Ω–æ–∫ —Ä–µ–±–µ–Ω–∫–∞",

        "insert_poem": "–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ",

        "insert_certificate": "–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"

    }[current_insert]

    

    await callback.message.edit_text(

        f"‚úçÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è {insert_name}</b>\n\n"

        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –≤–∫–ª–∞–¥—ã—à–∞.\n\n"

        f"üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n"

        f"‚Ä¢ –ü–∏—à–∏—Ç–µ –æ—Ç —Å–µ—Ä–¥—Ü–∞\n"

        f"‚Ä¢ –£–ø–æ–º—è–Ω–∏—Ç–µ –æ—Å–æ–±—ã–µ –º–æ–º–µ–Ω—Ç—ã\n"

        f"‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ —Ç–µ–ø–ª—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è\n"

        f"‚Ä¢ –ë—É–¥—å—Ç–µ –∏—Å–∫—Ä–µ–Ω–Ω–∏–º–∏\n\n"

        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.",

        parse_mode="HTML"

    )

    await state.set_state(AdditionsStates.waiting_insert_text)

    await log_state(callback.message, state)



@dp.callback_query(F.data == "auto_insert_text")

async def auto_insert_text_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    data = await state.get_data()

    current_insert = data.get("current_insert")

    insert_name = {

        "insert_card": "–ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞",

        "insert_letter": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ", 

        "insert_audio": "–ê—É–¥–∏–æ-–ø–æ–∂–µ–ª–∞–Ω–∏–µ",

        "insert_drawing": "–†–∏—Å—É–Ω–æ–∫ —Ä–µ–±–µ–Ω–∫–∞",

        "insert_poem": "–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ",

        "insert_certificate": "–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"

    }[current_insert]

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–∞–º–∏

    insert_texts = data.get("insert_texts", {})

    insert_texts[current_insert] = "–ù–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–æ–≤"

    await state.update_data(insert_texts=insert_texts)

    

    await callback.message.edit_text(

        f"‚úÖ <b>–í–∫–ª–∞–¥—ã—à –¥–æ–±–∞–≤–ª–µ–Ω: {insert_name}</b>\n\n"

        f"–¢–µ–∫—Å—Ç –±—É–¥–µ—Ç –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞—à–∏–º–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—Å—Ç–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–µ–π –∫–Ω–∏–≥–µ.",

        parse_mode="HTML"

    )

    

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–∫–ª–∞–¥—ã—à", callback_data="add_insert")],

        [InlineKeyboardButton(text="üì∏ –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ", callback_data="add_custom_photos")],

        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="additions_next")]

    ])

    await callback.message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–∫–ª–∞–¥—ã—à–∏ –∏–ª–∏ —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?", reply_markup=keyboard)

    await state.set_state(AdditionsStates.choosing_inserts)

    await log_state(callback.message, state)



@dp.callback_query(F.data == "change_insert")

async def change_insert_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π –≤–∫–ª–∞–¥—ã—à

    data = await state.get_data()

    inserts = data.get("inserts", [])

    if inserts:

        inserts.pop()

        await state.update_data(inserts=inserts)

    

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤–∫–ª–∞–¥—ã—à–µ–π —Å–Ω–æ–≤–∞

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="üíù –ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞", callback_data="insert_card")],

        [InlineKeyboardButton(text="üìù –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ", callback_data="insert_letter")],

        [InlineKeyboardButton(text="üéµ –ê—É–¥–∏–æ-–ø–æ–∂–µ–ª–∞–Ω–∏–µ", callback_data="insert_audio")],

        [InlineKeyboardButton(text="üé® –†–∏—Å—É–Ω–æ–∫ —Ä–µ–±–µ–Ω–∫–∞", callback_data="insert_drawing")],

        [InlineKeyboardButton(text="üíå –°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ", callback_data="insert_poem")],

        [InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data="insert_certificate")],

        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_inserts")]

    ])

    await callback.message.edit_text(

        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∫–ª–∞–¥—ã—à–∏ –¥–ª—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏:\n\n"

        "üíù <b>–ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞</b> - –∫—Ä–∞—Å–∏–≤–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞ —Å –≤–∞—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏\n"

        "üìù <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ</b> - –ø–∏—Å—å–º–æ –æ—Ç —Å–µ—Ä–¥—Ü–∞ —Å –≤–∞—à–∏–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏\n"

        "üéµ <b>–ê—É–¥–∏–æ-–ø–æ–∂–µ–ª–∞–Ω–∏–µ</b> - –∑–∞–ø–∏—Å—å –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–∞ —Å –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏\n"

        "üé® <b>–†–∏—Å—É–Ω–æ–∫ —Ä–µ–±–µ–Ω–∫–∞</b> - –¥–µ—Ç—Å–∫–∏–π —Ä–∏—Å—É–Ω–æ–∫ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –∫–Ω–∏–≥–µ\n"

        "üíå <b>–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ</b> - —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"

        "üéÅ <b>–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç</b> - —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∫–Ω–∏–≥–∏",

        reply_markup=keyboard,

        parse_mode="HTML"

    )

    await state.set_state(AdditionsStates.choosing_inserts)

    await log_state(callback.message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤–∫–ª–∞–¥—ã—à–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

@dp.message(StateFilter(AdditionsStates.waiting_insert_text), F.text)

async def receive_insert_text(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

    await save_user_message_to_history(message, state, "–¢–µ–∫—Å—Ç –≤–∫–ª–∞–¥—ã—à–∞: ")

    

    data = await state.get_data()

    current_insert = data.get("current_insert")

    insert_name = {

        "insert_card": "–ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞",

        "insert_letter": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ", 

        "insert_audio": "–ê—É–¥–∏–æ-–ø–æ–∂–µ–ª–∞–Ω–∏–µ",

        "insert_drawing": "–†–∏—Å—É–Ω–æ–∫ —Ä–µ–±–µ–Ω–∫–∞",

        "insert_poem": "–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ",

        "insert_certificate": "–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"

    }[current_insert]

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤–∫–ª–∞–¥—ã—à–∞

    insert_texts = data.get("insert_texts", {})

    insert_texts[current_insert] = message.text

    await state.update_data(insert_texts=insert_texts)

    

    await message.answer(

        f"‚úÖ <b>–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è {insert_name}</b>\n\n"

        f"–í–∞—à —Ç–µ–∫—Å—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤ –≤–∫–ª–∞–¥—ã—à–µ.",

        parse_mode="HTML"

    )

    

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–∫–ª–∞–¥—ã—à", callback_data="add_insert")],

        [InlineKeyboardButton(text="üì∏ –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ", callback_data="add_custom_photos")],

        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="additions_next")]

    ])

    await message.answer("–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–∫–ª–∞–¥—ã—à–∏ –∏–ª–∏ —Å–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏?", reply_markup=keyboard)

    await state.set_state(AdditionsStates.choosing_inserts)

    await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ —Ñ–æ—Ç–æ"

@dp.callback_query(F.data == "add_custom_photos")

async def add_custom_photos_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    await callback.message.edit_text(

        "üì∏ <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π</b>\n\n"

        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–Ω–∏–≥—É. "

        "–≠—Ç–æ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–µ–º–µ–π–Ω—ã–µ —Ñ–æ—Ç–æ, —Ñ–æ—Ç–æ —Ä–µ–±–µ–Ω–∫–∞, –ø–∞–º—è—Ç–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ —Ç.–¥.\n\n"

        "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –ø–æ –æ–¥–Ω–æ–º—É. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–ø–∏—à–∏—Ç–µ <b>'–ì–æ—Ç–æ–≤–æ'</b>.",

        parse_mode="HTML"

    )

    

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

    await state.set_state(AdditionsStates.uploading_photos)

    await log_state(callback.message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –≤–∫–ª–∞–¥—ã—à"

@dp.callback_query(F.data == "add_insert")

async def add_more_insert_callback(callback: types.CallbackQuery, state: FSMContext):

    await callback.answer()

    

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –≤–∫–ª–∞–¥—ã—à–µ–π —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="üíù –ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞", callback_data="insert_card")],

        [InlineKeyboardButton(text="üìù –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ", callback_data="insert_letter")],

        [InlineKeyboardButton(text="üéµ –ê—É–¥–∏–æ-–ø–æ–∂–µ–ª–∞–Ω–∏–µ", callback_data="insert_audio")],

        [InlineKeyboardButton(text="üé® –†–∏—Å—É–Ω–æ–∫ —Ä–µ–±–µ–Ω–∫–∞", callback_data="insert_drawing")],

        [InlineKeyboardButton(text="üíå –°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ", callback_data="insert_poem")],

        [InlineKeyboardButton(text="üéÅ –ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data="insert_certificate")],

        [InlineKeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_inserts")]

    ])

    await callback.message.edit_text(

        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∫–ª–∞–¥—ã—à–∏ –¥–ª—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏:\n\n"

        "üíù <b>–ü–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞</b> - –∫—Ä–∞—Å–∏–≤–∞—è –æ—Ç–∫—Ä—ã—Ç–∫–∞ —Å –≤–∞—à–∏–º–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏\n"

        "üìù <b>–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ</b> - –ø–∏—Å—å–º–æ –æ—Ç —Å–µ—Ä–¥—Ü–∞ —Å –≤–∞—à–∏–º–∏ —á—É–≤—Å—Ç–≤–∞–º–∏\n"

        "üéµ <b>–ê—É–¥–∏–æ-–ø–æ–∂–µ–ª–∞–Ω–∏–µ</b> - –∑–∞–ø–∏—Å—å –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–∞ —Å –ø–æ–∂–µ–ª–∞–Ω–∏—è–º–∏\n"

        "üé® <b>–†–∏—Å—É–Ω–æ–∫ —Ä–µ–±–µ–Ω–∫–∞</b> - –¥–µ—Ç—Å–∫–∏–π —Ä–∏—Å—É–Ω–æ–∫ –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –∫–Ω–∏–≥–µ\n"

        "üíå <b>–°—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ</b> - —Å—Ç–∏—Ö–æ—Ç–≤–æ—Ä–µ–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n"

        "üéÅ <b>–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç</b> - —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –∫–Ω–∏–≥–∏",

        reply_markup=keyboard,

        parse_mode="HTML"

    )

    await state.set_state(BookFinalStates.choosing_inserts)

    await log_state(callback.message, state)



# –ì–ª–∞–≤–∞ 12. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è

@dp.message(StateFilter(AdditionsStates.uploading_photos), F.photo)

async def upload_custom_photo(message: types.Message, state: FSMContext):

    file_id = message.photo[-1].file_id

    

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ

    data = await state.get_data()

    custom_photos = data.get("custom_photos", [])

    custom_photos.append(file_id)

    await state.update_data(custom_photos=custom_photos)

    

    await message.answer(

        f"‚úÖ <b>–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"

        f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: <b>{len(custom_photos)}</b> —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n\n"

        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>'–ì–æ—Ç–æ–≤–æ'</b> –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",

        parse_mode="HTML"

    )

    await log_state(message, state)



@dp.message(StateFilter(AdditionsStates.uploading_photos), F.text)

async def finish_photo_upload(message: types.Message, state: FSMContext):

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

    await save_user_message_to_history(message, state, "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: ")

    

    if message.text.lower() == "–≥–æ—Ç–æ–≤–æ":

        data = await state.get_data()

        custom_photos = data.get("custom_photos", [])

        

        await message.answer(

            f"‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(custom_photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.</b>\n\n"

            f"–í—Å–µ –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–Ω–∏–≥—É –∏ –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã.",

            parse_mode="HTML"

        )

        

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="additions_next")]

        ])

        await message.answer("–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É", reply_markup=keyboard)

        await state.set_state(AdditionsStates.done)

    else:

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        if "—Ü–µ–Ω–∞" in message.text.lower() or "—Å–º—É—Ç–∏–ª–∞" in message.text.lower():

            # –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ

            await message.answer(

                "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."

            )

        else:

            await message.answer(

                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>'–ì–æ—Ç–æ–≤–æ'</b> –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",

                parse_mode="HTML"

            )

    

    await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –≥–ª–∞–≤–µ 12

@dp.message(StateFilter(BookFinalStates.uploading_custom_photos), F.photo)

async def upload_custom_photo_book_final(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –≥–ª–∞–≤–µ 12"""

    try:

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ

        data = await state.get_data()

        order_id = data.get('order_id')

        

        if not order_id:

            await message.answer("‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")

            return

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É

        photo = message.photo[-1]

        file_id = photo.file_id

        

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

        custom_photos_dir = f"uploads/order_{order_id}_custom_photos"

        os.makedirs(custom_photos_dir, exist_ok=True)

        

        # –°–∫–∞—á–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ

        file_info = await bot.get_file(file_id)

        file_path = file_info.file_path

        

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞

        import time

        import secrets

        file_extension = os.path.splitext(file_path)[1] if file_path else '.jpg'

        unique_filename = f"custom_photo_{int(time.time())}_{secrets.token_hex(4)}{file_extension}"

        local_path = os.path.join(custom_photos_dir, unique_filename)

        

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª

        await bot.download_file(file_path, local_path)

        

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

        await save_uploaded_file(order_id, unique_filename, "custom_photo", local_path)

        

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state

        custom_photos = data.get("custom_photos", [])

        custom_photos.append(unique_filename)

        await state.update_data(custom_photos=custom_photos)

        

        # –û–±–Ω–æ–≤–ª—è–µ–º order_data –≤ –±–∞–∑–µ

        order_data = data.get('order_data', {})

        order_data['custom_photos'] = custom_photos

        await update_order_data(order_id, order_data)

        

        await message.answer(

            f"‚úÖ <b>–§–æ—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"

            f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: <b>{len(custom_photos)}</b> —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n\n"

            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>'–ì–æ—Ç–æ–≤–æ'</b> –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",

            parse_mode="HTML"

        )

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ upload_custom_photo_book_final: {e}")

        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    

    await log_state(message, state)



@dp.message(StateFilter(BookFinalStates.uploading_custom_photos), F.text)

async def finish_photo_upload_book_final(message: types.Message, state: FSMContext):

    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –≥–ª–∞–≤–µ 12"""

    try:

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞

        await save_user_message_to_history(message, state, "–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ: ")

        

        if message.text.lower() == "–≥–æ—Ç–æ–≤–æ":

            data = await state.get_data()

            custom_photos = data.get("custom_photos", [])

            

            await message.answer(

                f"‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(custom_photos)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.</b>\n\n"

                f"–í—Å–µ –≤–∞—à–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–Ω–∏–≥—É –∏ –∫—Ä–∞—Å–∏–≤–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω—ã.",

                parse_mode="HTML"

            )

            

            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –≤–∫–ª–∞–¥—ã—à–∏ –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å

            keyboard = InlineKeyboardMarkup(inline_keyboard=[

                [InlineKeyboardButton(text="üìÑ –î–æ–±–∞–≤–∏—Ç—å –≤–∫–ª–∞–¥—ã—à–∏", callback_data="add_inserts")],

                [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –≤–∫–ª–∞–¥—ã—à–µ–π", callback_data="skip_inserts")]

            ])

            

            await message.answer(

                "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤–∫–ª–∞–¥—ã—à–∏ –≤ –∫–Ω–∏–≥—É –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –Ω–∏—Ö?",

                reply_markup=keyboard

            )

            

            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π

            await state.set_state(AdditionsStates.choosing_addition)

        else:

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

            if "—Ü–µ–Ω–∞" in message.text.lower() or "—Å–º—É—Ç–∏–ª–∞" in message.text.lower():

                # –≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ü–µ–Ω–µ

                await message.answer(

                    "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–≤–µ—Ç! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."

                )

            else:

                await message.answer(

                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>'–ì–æ—Ç–æ–≤–æ'</b> –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",

                    parse_mode="HTML"

                )

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ finish_photo_upload_book_final: {e}")

        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    

    await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è BookFinalStates.uploading_custom_photos

@dp.message(StateFilter(BookFinalStates.uploading_custom_photos), F.media_group_id)

async def upload_custom_photos_media_group(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏"""

    try:

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞

        data = await state.get_data()

        order_id = data.get('order_id')

        

        if not order_id:

            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

            return

        

        # –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É ID

        media_group_id = message.media_group_id

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç—É –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É

        processed_groups = data.get("processed_media_groups", set())

        if media_group_id in processed_groups:

            return  # –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ —ç—Ç—É –≥—Ä—É–ø–ø—É

        

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–ø–ø—É –≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ

        processed_groups.add(media_group_id)

        await state.update_data(processed_media_groups=processed_groups)

        

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã

        from aiogram.fsm.context import FSMContext

        from aiogram.types import Message

        

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∑–∞–∫–∞–∑–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç

        order_dir = f"uploads/order_{order_id}_custom_photos"

        os.makedirs(order_dir, exist_ok=True)

        

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ –¥–ª—è –Ω—É–º–µ—Ä–∞—Ü–∏–∏

        custom_photos = data.get("custom_photos", [])

        start_photo_number = len(custom_photos) + 1

        

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ —Ñ–æ—Ç–æ –≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ

        photos_in_group = []

        

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã (—ç—Ç–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ)

        # –ó–¥–µ—Å—å –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        if message.photo:

            photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ

            file_id = photo.file_id

            

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª

            file_info = await bot.get_file(file_id)

            file_path = file_info.file_path

            

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞

            file_extension = os.path.splitext(file_path)[1] or '.jpg'

            photo_number = start_photo_number

            filename = f"custom_photo_{photo_number:02d}{file_extension}"

            local_path = os.path.join(order_dir, filename)

            

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª

            await bot.download_file(file_path, local_path)

            

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

            upload_id = await save_uploaded_file(order_id, filename, "custom_photo")

            

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≥—Ä—É–ø–ø—ã

            photos_in_group.append({

                'file_id': file_id,

                'filename': filename,

                'upload_id': upload_id,

                'local_path': local_path

            })

        

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥—Ä—É–ø–ø—ã –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫

        custom_photos.extend(photos_in_group)

        await state.update_data(custom_photos=custom_photos)

        

        # –û–±–Ω–æ–≤–ª—è–µ–º order_data –≤ –±–∞–∑–µ

        order_data = data.get('order_data', {})

        order_data['custom_photos'] = custom_photos

        await update_order_data(order_id, order_data)

        

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç –¥–ª—è –º–µ–¥–∏–∞–≥—Ä—É–ø–ø

        photos_count = len(photos_in_group)

        total_count = len(custom_photos)

        

        await message.answer(

            f"‚úÖ <b>–ó–∞–≥—Ä—É–∂–µ–Ω–æ {photos_count} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π!</b>\n\n"

            f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: <b>{total_count}</b> —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π\n\n"

            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ <b>'–ì–æ—Ç–æ–≤–æ'</b> –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",

            parse_mode="HTML"

        )

        

        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(photos_in_group)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏–∑ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

        

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {e}")

        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    

    await log_state(message, state)







# –ì–ª–∞–≤–∞ 14. –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–Ω–æ–≤–∏–∫–∞ –∫–Ω–∏–≥–∏ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

@dp.message(StateFilter(EditBookStates.waiting_for_draft))

async def receive_book_draft_for_editing(message: types.Message, state: FSMContext):

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∞ –Ω–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ–≥–æ

    data = await state.get_data()

    order_id = data.get('order_id')

    

    if order_id:

        order = await get_order(order_id)

        if order and order.get('user_id') == message.from_user.id:

            # –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞ –Ω–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∫–∏–¥—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            try:

                from db import add_message_history

                await add_message_history(order_id, "user", message.text)

                logging.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞ {order_id}: {message.text[:50]}...")

            except Exception as e:

                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")

            

            logging.info(f"üìñ –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_draft")

            return

    

    # –ú–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –∫–Ω–∏–≥–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    await update_order_status(order_id, "draft_sent")

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    await message.answer(

        "üìñ <b>–ß–µ—Ä–Ω–æ–≤–∏–∫ –≤–∞—à–µ–π –∫–Ω–∏–≥–∏ –≥–æ—Ç–æ–≤!</b>\n\n"

        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —á–µ—Ä–Ω–æ–≤–∏–∫ –∏ —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è.",

        parse_mode="HTML"

    )

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —á–µ—Ä–Ω–æ–≤–∏–∫–∞

    if message.document:

        # –ï—Å–ª–∏ —ç—Ç–æ PDF —Ñ–∞–π–ª

        await message.answer_document(

            message.document.file_id, 

            caption="üìÑ –ß–µ—Ä–Ω–æ–≤–∏–∫ –∫–Ω–∏–≥–∏ (PDF)\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ —Å–æ–æ–±—â–∏—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è."

        )

    elif message.photo:

        # –ï—Å–ª–∏ —ç—Ç–æ –≥–∞–ª–µ—Ä–µ—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π

        await message.answer_photo(

            message.photo[-1].file_id, 

            caption="üìñ –ß–µ—Ä–Ω–æ–≤–∏–∫ –∫–Ω–∏–≥–∏\n\n–ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏ —Å–æ–æ–±—â–∏—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è."

        )

    else:

        # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º

        await message.answer(message.text)

    

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    keyboard = InlineKeyboardMarkup(inline_keyboard=[

        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="edit_done")],

        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="edit_change")]

    ])

    

    await message.answer(

        "–ö–∞–∫ –≤–∞–º —á–µ—Ä–Ω–æ–≤–∏–∫?\n\n"

        "‚Ä¢ <b>‚úÖ –ì–æ—Ç–æ–≤–æ</b> - –µ—Å–ª–∏ –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç\n"

        "‚Ä¢ <b>üîÑ –ò–∑–º–µ–Ω–∏—Ç—å</b> - –µ—Å–ª–∏ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∫–∏",

        reply_markup=keyboard,

        parse_mode="HTML"

    )

    

    await state.set_state(EditBookStates.reviewing_draft)

    await log_state(message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–º–æ—â–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

@dp.callback_query(lambda c: c.data in ["help", "restart", "main_menu", "start"])

async def handle_help_navigation_buttons(callback: types.CallbackQuery, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏"""

    current_state = await state.get_state()

    

    if callback.data == "help":

        await callback.answer("–ü–æ–∫–∞–∑—ã–≤–∞—é —Å–ø—Ä–∞–≤–∫—É")

        await callback.message.answer(

            "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –∫–Ω–∏–≥–∏/–ø–µ—Å–Ω–∏:</b>\n\n"

            "‚Ä¢ <b>–§–æ—Ç–æ</b> - –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —á–µ—Ç–∫–∏–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏\n"

            "‚Ä¢ <b>–¢–µ–∫—Å—Ç</b> - –ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ –æ –≥–µ—Ä–æ–µ\n"

            "‚Ä¢ <b>–ê—É–¥–∏–æ</b> - –¥–ª—è –ø–µ—Å–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è\n\n"

            "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏, –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.",

            parse_mode="HTML"

        )

        

    elif callback.data == "restart":

        await callback.answer("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ")

        await state.clear()

        await callback.message.answer("üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ!")

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è

        await show_welcome_message(callback.message, state)

        

    elif callback.data == "main_menu":

        await callback.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

        await state.clear()

        await callback.message.answer("üè† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!")

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞

        keyboard = InlineKeyboardMarkup(inline_keyboard=[

            [InlineKeyboardButton(text="üéµ –°–æ–∑–¥–∞—Ç—å –ø–µ—Å–Ω—é", callback_data="create_song")],

            [InlineKeyboardButton(text="üìñ –°–æ–∑–¥–∞—Ç—å –∫–Ω–∏–≥—É", callback_data="create_book")]

        ])

        await callback.message.answer(

            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:",

            reply_markup=keyboard

        )

        

    elif callback.data == "start":

        await callback.answer("–ù–∞—á–∏–Ω–∞–µ–º!")

        await state.clear()

        await show_welcome_message(callback.message, state)



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö callback_query

@dp.callback_query()

async def handle_unhandled_callback(callback: types.CallbackQuery):

    logging.warning(f"‚ö†Ô∏è –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π callback_query: {callback.data}")

    logging.warning(f"‚ö†Ô∏è User ID: {callback.from_user.id}")

    logging.warning(f"‚ö†Ô∏è Message ID: {callback.message.message_id}")

    logging.warning(f"‚ö†Ô∏è Message text: {callback.message.text}")

    logging.warning(f"‚ö†Ô∏è Message caption: {callback.message.caption}")

    logging.warning(f"‚ö†Ô∏è Available handlers: {[h.callback.__name__ for h in dp.callback_query.handlers]}")

    await callback.answer("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")



# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–ù–ï —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)

@dp.message()

async def handle_unexpected_content(message: types.Message, state: FSMContext):

    """

    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–≤–∏–¥–µ–æ, –∫—Ä—É–∂–∫–∏, —Å—Ç–∏–∫–µ—Ä—ã –∏ —Ç.–¥.)

    –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏

    """

    # –ù–ï –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –ø—É—Å—Ç—å –∏—Ö –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏

    if message.text:

        logging.info(f"üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ '{message.text[:50]}...' - –ø—É—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫")

        return

        

    current_state = await state.get_state()

    data = await state.get_data()

    

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º

    is_unsupported = False

    content_type = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø"

    

    if message.video:

        content_type = "–≤–∏–¥–µ–æ"

        is_unsupported = True

    elif message.animation:

        content_type = "GIF/–∞–Ω–∏–º–∞—Ü–∏—è"

        is_unsupported = True

    elif message.sticker:

        content_type = "—Å—Ç–∏–∫–µ—Ä"

        is_unsupported = True

    elif message.voice:

        content_type = "–≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

        is_unsupported = True

    elif message.video_note:

        content_type = "–∫—Ä—É–∂–æ–∫"

        is_unsupported = True

    elif message.document:

        content_type = "–¥–æ–∫—É–º–µ–Ω—Ç"

        is_unsupported = True

    elif message.audio:

        content_type = "–∞—É–¥–∏–æ"

        is_unsupported = True

    

    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

    if not is_unsupported:

        return

    

    logging.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç: {content_type} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")

    

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —á—Ç–æ –æ—Ç –Ω–µ–≥–æ –æ–∂–∏–¥–∞–µ—Ç—Å—è

    expected_content = "—Ç–µ–∫—Å—Ç"

    if current_state:

        if "photo" in current_state.lower():

            expected_content = "—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é"

        elif "text" in current_state.lower():

            expected_content = "—Ç–µ–∫—Å—Ç"

        elif "demo" in current_state.lower():

            expected_content = "–∞—É–¥–∏–æ —Ñ–∞–π–ª"

        elif "draft" in current_state.lower():

            expected_content = "—Ñ–∞–π–ª"

    

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    await message.answer(

        "–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤–º–µ—Å—Ç–æ —Ñ–æ—Ç–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è –¥—Ä—É–≥–æ–π —Ñ–∞–π–ª ‚ùå\n"

        "–°–µ–π—á–∞—Å –Ω–∞–º –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n"

        "–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é üì∑",

        parse_mode="HTML"

    )

    

    await log_state(message, state)



# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ü–ï–†–ï–ú–ï–©–ï–ù –í –ö–û–ù–ï–¶ –§–ê–ô–õ–ê)

@dp.message(F.text)

async def handle_all_text_messages(message: types.Message, state: FSMContext):

    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Ö –≤ –∏—Å—Ç–æ—Ä–∏—é"""

    try:

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

        current_state = await state.get_state()

        # –†–ê–°–®–ò–†–ï–ù–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"üì• –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id}, —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}, —Ç–µ–∫—Å—Ç: '{message.text[:50]}...'")

        # –í–†–ï–ú–ï–ù–ù–´–ô –õ–û–ì –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤

        if "kk" in message.text.lower() or "—Å—Ç–∏–ª" in message.text.lower():

            logging.error(f"üö® –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï: —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑–≤–∞–Ω —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º {current_state}, —Ç–µ–∫—Å—Ç: '{message.text}'")

        

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        # –ï—Å–ª–∏ –µ—Å—Ç—å, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è

        if current_state in [
            "SongDraftStates.waiting_for_demo",
            "SongDraftStates.demo_received", 
            "SongDraftStates.waiting_for_draft",
            "SongFactsStates.collecting_facts",
            "SongRelationStates.waiting_recipient_name",
            "SongRelationStates.waiting_gift_reason"
        ]:
            logging.info(f"üîç –°–æ—Å—Ç–æ—è–Ω–∏–µ {current_state} –∏–º–µ–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π")
            return

        logging.info(f"üîç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫: –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")

        

        data = await state.get_data()

        order_id = data.get('order_id')

        logging.info(f"üì¶ Order ID –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {order_id}")

        

        # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–∫–∞–∑, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é

        if order_id:

            from db import add_message_history, create_or_update_order_notification

            await add_message_history(order_id, "user", message.text)

            

            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞

            await create_or_update_order_notification(order_id)

            logging.info(f"‚úÖ –°–û–•–†–ê–ù–ï–ù–û: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞ {order_id}: {message.text[:50]}...")
            logging.info(f"üîî –°–û–ó–î–ê–ù–û: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

            print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞ {order_id}: {message.text}")

            print(f"üîî –û–¢–õ–ê–î–ö–ê: –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")

        else:

            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–∞ –µ—â–µ –Ω–µ—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∞

            from db import save_early_user_message

            await save_early_user_message(message.from_user.id, message.text)

            logging.info(f"üìù –°–û–•–†–ê–ù–ï–ù–û: –†–∞–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text[:50]}...")

            print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ä–∞–Ω–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")

    except Exception as e:

        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é: {e}")



async def main():

    await init_db()

    await init_payments_table()

    

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ outbox
    asyncio.create_task(process_outbox_tasks(bot))  # –í–∫–ª—é—á–∞–µ–º

    # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
    # asyncio.create_task(process_message_templates(bot))  # –û—Ç–∫–ª—é—á–∞–µ–º
    
    # –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ —Ç–∞–π–º–µ—Ä–∞–º
    asyncio.create_task(process_timer_based_messages(bot))  # –í–∫–ª—é—á–∞–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
    
    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
    asyncio.create_task(auto_check_payments())  # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É

    

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

    logging.info(f"üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤: {len(dp.message.handlers) + len(dp.callback_query.handlers)}")

    logging.info(f"üîò –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback_query: {len(dp.callback_query.handlers)}")

    

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫

    try:

        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")

        await dp.start_polling(bot)

    except Exception as e:

        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

        raise


if __name__ == '__main__':

    asyncio.run(main())