import subprocess
import sys
import os
import time
import signal
import dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
dotenv.load_dotenv()

# –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
print(f"üîß –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
print(f"   TELEGRAM_BOT_TOKEN: {os.getenv('TELEGRAM_BOT_TOKEN', '–ù–ï –ù–ê–ô–î–ï–ù')}")
print(f"   YOOKASSA_SHOP_ID: {os.getenv('YOOKASSA_SHOP_ID', '–ù–ï –ù–ê–ô–î–ï–ù')}")

def run_process(command, cwd=None, name=""):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –æ–±—ä–µ–∫—Ç"""
    try:
        # –ü–µ—Ä–µ–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ subprocess
        env = os.environ.copy()
        process = subprocess.Popen(command, cwd=cwd, shell=True, env=env)
        print(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
        return process
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")
        return None

def wait_for_service(port, service_name, max_wait=30):
    """–ñ–¥–µ—Ç, –ø–æ–∫–∞ —Å–µ—Ä–≤–∏—Å —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–º"""
    import socket
    import time
    
    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ {service_name} –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    start_time = time.time()
    
    while time.time() - start_time < max_wait:
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            result = sock.connect_ex(('127.0.0.1', port))
            sock.close()
            if result == 0:
                print(f"‚úÖ {service_name} –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
                return True
        except:
            pass
        time.sleep(1)
    
    print(f"‚ö†Ô∏è {service_name} –Ω–µ —Å—Ç–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞ {max_wait} —Å–µ–∫—É–Ω–¥")
    return False

if __name__ == "__main__":
    processes = []
    
    print("üöÄ –ó–∞–ø—É—Å–∫ BookAI –ø—Ä–æ–µ–∫—Ç–∞...")
    print("=" * 50)
    
    # 1. –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞ (FastAPI)
    print("\nüì° –ó–∞–ø—É—Å–∫ –±—ç–∫–µ–Ω–¥–∞...")
    backend_process = run_process(
        [sys.executable, "-m", "uvicorn", "admin_backend.main:app", "--host", "0.0.0.0", "--port", "8002", "--reload"],
        name="FastAPI Backend"
    )
    if backend_process:
        processes.append(backend_process)
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±—ç–∫–µ–Ω–¥–∞
        if not wait_for_service(8002, "FastAPI Backend"):
            print("‚ùå –ë—ç–∫–µ–Ω–¥ –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")
            for p in processes:
                p.terminate()
            sys.exit(1)
    
    # 2. –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("\nü§ñ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    print(f"üìÅ –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üîë –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TELEGRAM_BOT_TOKEN: {os.getenv('TELEGRAM_BOT_TOKEN', '–ù–ï –ù–ê–ô–î–ï–ù')}")
    
    bot_process = run_process(
        [sys.executable, "bot.py"],
        name="Telegram Bot"
    )
    if bot_process:
        processes.append(bot_process)
    
    # 3. –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    print("\nüåê –ó–∞–ø—É—Å–∫ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞...")
    frontend_process = run_process(
        ["npm", "start"],
        cwd="admin_frontend",
        name="React Frontend"
    )
    if frontend_process:
        processes.append(frontend_process)
    
    print("\n" + "=" * 50)
    print("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã!")
    print("üì± –ë–æ—Ç: Telegram –±–æ—Ç")
    print("üîß API: http://localhost:8002")
    print("üåê –§—Ä–æ–Ω—Ç–µ–Ω–¥: http://localhost:3002")
    print("=" * 50)
    print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    try:
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        for p in processes:
            if p:
                p.wait()
    except KeyboardInterrupt:
        print("\n\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        print("‚è≥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        
        for p in processes:
            if p and p.poll() is None:  # –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
                try:
                    p.terminate()
                    p.wait(timeout=5)  # –ñ–¥–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                except subprocess.TimeoutExpired:
                    p.kill()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º
                    print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {p.pid} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        
        print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        for p in processes:
            if p:
                p.terminate() 