#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–æ–¥–∞ –±–æ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import re
import os
import asyncio
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from db import upsert_bot_message

def extract_messages_from_bot():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ bot.py"""
    
    print("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ bot.py...")
    
    bot_file = "bot.py"
    if not os.path.exists(bot_file):
        print(f"‚ùå –§–∞–π–ª {bot_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    
    with open(bot_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    found_messages = set()
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    patterns = [
        # await message.answer("—Ç–µ–∫—Å—Ç")
        r'await\s+\w+\.answer\(["\']([^"\']+)["\']',
        # await callback.message.answer("—Ç–µ–∫—Å—Ç")
        r'await\s+\w+\.message\.answer\(["\']([^"\']+)["\']',
        # await callback.message.edit_text("—Ç–µ–∫—Å—Ç")
        r'await\s+\w+\.message\.edit_text\(["\']([^"\']+)["\']',
        # await message.edit_text("—Ç–µ–∫—Å—Ç")
        r'await\s+\w+\.edit_text\(["\']([^"\']+)["\']',
        # –¢—Ä–µ—Ö—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        r'["\']([^"\']*\n[^"\']*\n[^"\']*)["\']',
        # –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å \n
        r'["\']([^"\']*\\n[^"\']*)["\']',
    ]
    
    for pattern in patterns:
        matches = re.findall(pattern, content, re.MULTILINE | re.DOTALL)
        for match in matches:
            # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = match.strip()
            if len(message) > 5 and not message.startswith('http') and not message.startswith('file_'):
                # –£–±–∏—Ä–∞–µ–º —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
                message = message.replace('\\n', '\n').replace('\\"', '"').replace("\\'", "'")
                found_messages.add(message)
    
    # –¢–∞–∫–∂–µ –∏—â–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const_patterns = [
        r'WELCOME_TEXT\s*=\s*["\']([^"\']+)["\']',
        r'["\']([^"\']*–ü—Ä–∏–≤–µ—Ç[^"\']*)["\']',
        r'["\']([^"\']*–≤—ã–±–µ—Ä–∏—Ç–µ[^"\']*)["\']',
        r'["\']([^"\']*–æ—Ç–ø—Ä–∞–≤—å—Ç–µ[^"\']*)["\']',
        r'["\']([^"\']*–≤–≤–µ–¥–∏—Ç–µ[^"\']*)["\']',
        r'["\']([^"\']*—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ[^"\']*)["\']',
        r'["\']([^"\']*–ø–æ–∂–∞–ª—É–π—Å—Ç–∞[^"\']*)["\']',
        r'["\']([^"\']*—É–∫–∞–∂–∏—Ç–µ[^"\']*)["\']',
        r'["\']([^"\']*—Å–ø–∞—Å–∏–±–æ[^"\']*)["\']',
        r'["\']([^"\']*–æ—à–∏–±–∫–∞[^"\']*)["\']',
    ]
    
    for pattern in const_patterns:
        matches = re.findall(pattern, content, re.MULTILINE | re.DOTALL)
        for match in matches:
            message = match.strip()
            if len(message) > 5:
                message = message.replace('\\n', '\n').replace('\\"', '"').replace("\\'", "'")
                found_messages.add(message)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    messages = list(found_messages)
    messages.sort()
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ {len(messages)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    return messages

def categorize_and_create_messages(messages):
    """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    
    categorized_messages = []
    sort_order = 1
    
    for message in messages:
        message_lower = message.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —ç—Ç–∞–ø
        context = "other"
        stage = "general"
        message_name = f"–°–æ–æ–±—â–µ–Ω–∏–µ {sort_order}"
        
        if any(word in message_lower for word in ['–ø—Ä–∏–≤–µ—Ç', '–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å', '–≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å']):
            context = "welcome"
            stage = "start"
            message_name = "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        elif any(word in message_lower for word in ['–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞', '–∫–æ–Ω—Ç–∞–∫—Ç']):
            context = "registration"
            stage = "phone"
            message_name = "–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
        elif any(word in message_lower for word in ['–≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è', '–≤–∞—à–µ –∏–º—è']):
            context = "registration"
            stage = "name"
            message_name = "–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏"
        elif any(word in message_lower for word in ['—Ñ–∞–º–∏–ª–∏—é']):
            context = "registration"
            stage = "lastname"
            message_name = "–ó–∞–ø—Ä–æ—Å —Ñ–∞–º–∏–ª–∏–∏"
        elif any(word in message_lower for word in ['–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', '—Å–ø–∞—Å–∏–±–æ']):
            context = "registration"
            stage = "success"
            message_name = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
        elif any(word in message_lower for word in ['—á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å']):
            context = "product"
            stage = "selection"
            message_name = "–í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞"
        elif any(word in message_lower for word in ['–∫–Ω–∏–≥–∞']) and len(message) < 20:
            context = "product"
            stage = "book"
            message_name = "–ö–Ω–∏–≥–∞"
        elif any(word in message_lower for word in ['–ø–µ—Å–Ω—è']) and len(message) < 20:
            context = "product"
            stage = "song"
            message_name = "–ü–µ—Å–Ω—è"
        elif any(word in message_lower for word in ['–≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª', '–ø–æ–ª']):
            context = "book"
            stage = "gender"
            message_name = "–ó–∞–ø—Ä–æ—Å –ø–æ–ª–∞"
        elif any(word in message_lower for word in ['–∫–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–∞—Ä–∏—Ç—å', '–æ—Ç–Ω–æ—à–µ–Ω–∏–µ']):
            context = "book"
            stage = "relation"
            message_name = "–í—ã–±–æ—Ä –æ—Ç–Ω–æ—à–µ–Ω–∏—è"
        elif any(word in message_lower for word in ['–∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è']):
            context = "book"
            stage = "recipient"
            message_name = "–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"
        elif any(word in message_lower for word in ['—Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ', '–≥–µ—Ä–æ–µ']):
            context = "hero"
            stage = "intro"
            message_name = "–í–≤–µ–¥–µ–Ω–∏–µ –≤ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–∏–≥–∏"
        elif any(word in message_lower for word in ['–ø–æ–≤–æ–¥ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞', '–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è']):
            context = "hero"
            stage = "gift_reason"
            message_name = "–ó–∞–ø—Ä–æ—Å –ø–æ–≤–æ–¥–∞ –¥–ª—è –ø–æ–¥–∞—Ä–∫–∞"
        elif any(word in message_lower for word in ['—Ñ–æ—Ç–æ', '–æ—Ç–ø—Ä–∞–≤—å—Ç–µ']):
            context = "photo"
            if '–ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ' in message_lower:
                stage = "main_face_1"
                message_name = "–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ"
            elif '–≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ' in message_lower:
                stage = "main_face_2"
                message_name = "–ó–∞–ø—Ä–æ—Å –≤—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ç–æ"
            elif '–ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç' in message_lower:
                stage = "main_body"
                message_name = "–ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç"
            elif '–∑–∞–Ω—è—Ç–∏–µ–º' in message_lower:
                stage = "main_activity"
                message_name = "–ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"
            else:
                stage = "general"
                message_name = "–ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ"
        elif any(word in message_lower for word in ['—Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–º–µ–Ω—Ç', '–≤–æ—Å—Ö–∏—â–∞–µ—Ç', '–≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è']):
            context = "question"
            stage = "general"
            message_name = "–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"
        elif any(word in message_lower for word in ['–≥–æ–ª–æ—Å', '–ø–µ–Ω–∏–µ', '–º–µ–ª–æ–¥–∏—è']):
            context = "song"
            stage = "voice"
            message_name = "–ó–∞–ø—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"
        elif any(word in message_lower for word in ['–æ—à–∏–±–∫–∞', '–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑']):
            context = "error"
            stage = "general"
            message_name = "–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"
        elif any(word in message_lower for word in ['–¥–∞–ª–µ–µ', '–Ω–∞–∑–∞–¥', '–¥–∞', '–Ω–µ—Ç']):
            context = "button"
            stage = "general"
            message_name = "–ö–Ω–æ–ø–∫–∞"
        elif any(word in message_lower for word in ['–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–º–æ—â—å']):
            context = "info"
            stage = "help"
            message_name = "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–º–æ—â–∏"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á —Å–æ–æ–±—â–µ–Ω–∏—è
        message_key = f"{context}_{stage}_{sort_order}"
        
        categorized_messages.append({
            'key': message_key,
            'name': message_name,
            'content': message,
            'context': context,
            'stage': stage,
            'sort_order': sort_order
        })
        
        sort_order += 1
    
    return categorized_messages

async def add_all_messages_to_db():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    
    print("üîÑ –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–¥–∞
    messages = extract_messages_from_bot()
    
    if not messages:
        print("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    categorized_messages = categorize_and_create_messages(messages)
    
    print(f"üìù –î–æ–±–∞–≤–ª—è–µ–º {len(categorized_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    added_count = 0
    error_count = 0
    
    for msg in categorized_messages:
        try:
            message_id = await upsert_bot_message(
                msg['key'], 
                msg['name'], 
                msg['content'], 
                msg['context'], 
                msg['stage'], 
                msg['sort_order']
            )
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {msg['name']} (ID: {message_id})")
            added_count += 1
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è {msg['name']}: {e}")
            error_count += 1
    
    print(f"\nüéâ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {added_count}")
    print(f"   ‚ùå –û—à–∏–±–æ–∫: {error_count}")
    
    if added_count > 0:
        print(f"\nüí° –¢–µ–ø–µ—Ä—å –≤ –∞–¥–º–∏–Ω–∫–µ –±—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –í–°–ï —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞!")

if __name__ == "__main__":
    asyncio.run(add_all_messages_to_db())
