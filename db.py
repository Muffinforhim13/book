import aiosqlite
import json
import os
import glob
import logging
from typing import Dict, List, Optional
from datetime import datetime, timedelta
import asyncio
from passlib.context import CryptContext

def get_moscow_time():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
    return "datetime('now', '+3 hours')"

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

def get_password_hash(password: str) -> str:
    return pwd_context.hash(password)

DB_PATH = 'bookai.db'

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö, –∞–Ω–∞–ª–∏—Ç–∏–∫–µ –∏ –≤—ã–≥—Ä—É–∑–∫–µ)
# –í—Å–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å–ª–µ 'paid' —Å—á–∏—Ç–∞—é—Ç—Å—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏
# –í–ê–ñ–ù–û: 
# - 'questions_completed' –ù–ï –≤–∫–ª—é—á–µ–Ω, —Ç.–∫. –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –î–û –æ–ø–ª–∞—Ç—ã
# - 'draft_sent' –≤–∫–ª—é—á–µ–Ω, —Ç.–∫. —á–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ü–û–°–õ–ï –æ–ø–ª–∞—Ç—ã
PAID_ORDER_STATUSES = [
    # –û—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    'paid',
    
    # –°—Ç–∞—Ç—É—Å—ã –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–ª—è –∫–Ω–∏–≥
    'waiting_story_options',
    'waiting_story_choice',
    'story_selected',
    'story_options_sent',
    'pages_selected',
    'covers_sent',
    'waiting_cover_choice',
    'cover_selected',
    'waiting_draft',
    'draft_sent',
    'editing',
    'waiting_feedback',
    'feedback_processed',
    'prefinal_sent',
    'waiting_final',
    'ready',
    'waiting_delivery',
    'print_delivery_pending',
    'final_sent',
    'delivered',
    'completed',
    
    # –°—Ç–∞—Ç—É—Å—ã –¥–ª—è –ø–µ—Å–µ–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    'collecting_facts',
    'waiting_plot_options',
    'plot_selected',
    'waiting_final_version',
    
    # –î–æ–ø–ª–∞—Ç—ã (—Å—Ç–∞—Ç—É—Å—ã –∫–æ–≥–¥–∞ –¥–æ–ø–ª–∞—Ç–∞ –æ–ø–ª–∞—á–µ–Ω–∞ –∏–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è)
    'upsell_payment_created',    # –°–æ–∑–¥–∞–Ω –ø–ª–∞—Ç—ë–∂ –∑–∞ –¥–æ–ø–ª–∞—Ç—É (–æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –£–ñ–ï –æ–ø–ª–∞—á–µ–Ω–∞)
    'upsell_payment_pending',    # –û–∂–∏–¥–∞–µ—Ç –¥–æ–ø–ª–∞—Ç—ã (–æ—Å–Ω–æ–≤–Ω–∞—è –ø–æ–∫—É–ø–∫–∞ –£–ñ–ï –æ–ø–ª–∞—á–µ–Ω–∞)
    'upsell_paid',               # –î–æ–ø–ª–∞—Ç–∞ –æ–ø–ª–∞—á–µ–Ω–∞
    'additional_payment_paid'    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞
]

async def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–≤–∞—è –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SQLite –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
        await configure_db_connection(db)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–∞–∑–∞–º –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        try:
            print("üîß –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∑–∞–∫–∞–∑–∞–º...")
            result = await assign_managers_to_all_orders()
            print(f"‚úÖ {result['message']}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
        
        await db.execute('''
            CREATE TABLE IF NOT EXISTS user_profiles (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                product TEXT,
                relation TEXT,
                main_hero_intro TEXT,
                main_hero_photos TEXT,
                heroes TEXT,
                generated_book TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                status TEXT DEFAULT 'created',
                order_data TEXT,
                pdf_path TEXT,
                mp3_path TEXT,
                assigned_manager_id INTEGER,
                first_last_design TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(user_id) REFERENCES user_profiles(user_id),
                FOREIGN KEY(assigned_manager_id) REFERENCES managers(id)
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É first_last_design –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            await db.execute('ALTER TABLE orders ADD COLUMN first_last_design TEXT')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ first_last_design –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É orders")
        except aiosqlite.OperationalError as e:
            if "duplicate column name" in str(e):
                print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ first_last_design —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ first_last_design: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É first_page_text –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            await db.execute('ALTER TABLE orders ADD COLUMN first_page_text TEXT')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ first_page_text –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É orders")
        except aiosqlite.OperationalError as e:
            if "duplicate column name" in str(e):
                print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ first_page_text —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ first_page_text: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É last_page_text –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            await db.execute('ALTER TABLE orders ADD COLUMN last_page_text TEXT')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ last_page_text –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É orders")
        except aiosqlite.OperationalError as e:
            if "duplicate column name" in str(e):
                print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ last_page_text —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ last_page_text: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É total_amount –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            await db.execute('ALTER TABLE orders ADD COLUMN total_amount REAL')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ total_amount –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É orders")
        except aiosqlite.OperationalError as e:
            if "duplicate column name" in str(e):
                print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ total_amount —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ total_amount: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É sender_name –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            await db.execute('ALTER TABLE orders ADD COLUMN sender_name TEXT')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ sender_name –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É orders")
        except aiosqlite.OperationalError as e:
            if "duplicate column name" in str(e):
                print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ sender_name —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ sender_name: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É email –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            await db.execute('ALTER TABLE orders ADD COLUMN email TEXT')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ email –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É orders")
        except aiosqlite.OperationalError as e:
            if "duplicate column name" in str(e):
                print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ email: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É song_style_message_sent –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            await db.execute('ALTER TABLE orders ADD COLUMN song_style_message_sent INTEGER DEFAULT 0')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ song_style_message_sent –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É orders")
        except aiosqlite.OperationalError as e:
            if "duplicate column name" in str(e):
                print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ song_style_message_sent —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ song_style_message_sent: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É files –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –≤ message_templates
        try:
            await db.execute('ALTER TABLE message_templates ADD COLUMN files TEXT')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ files –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É message_templates")
        except aiosqlite.OperationalError as e:
            if "duplicate column name" in str(e):
                print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ files —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ files: {e}")
        
        await db.execute('''
            CREATE TABLE IF NOT EXISTS outbox (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                user_id INTEGER,
                type TEXT, -- 'file', 'text', 'image_with_text_and_button' –∏–ª–∏ 'manager_notification'
                content TEXT, -- –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                file_type TEXT, -- —Ç–∏–ø —Ñ–∞–π–ª–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å): pdf/mp3/jpg/–∏—Ç–¥
                comment TEXT, -- –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ñ–∞–π–ª—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
                button_text TEXT, -- —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (–¥–ª—è image_with_text_and_button)
                button_callback TEXT, -- callback_data –∫–Ω–æ–ø–∫–∏ (–¥–ª—è image_with_text_and_button)
                is_general_message INTEGER DEFAULT 0, -- —Ñ–ª–∞–≥ –¥–ª—è –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (0=–æ–±—ã—á–Ω—ã–π —Ñ–∞–π–ª, 1=–æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
                status TEXT DEFAULT 'pending', -- pending/sent/failed
                retry_count INTEGER DEFAULT 0, -- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
                max_retries INTEGER DEFAULT 5, -- –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                sent_at DATETIME,
                FOREIGN KEY(order_id) REFERENCES orders(id),
                FOREIGN KEY(user_id) REFERENCES user_profiles(user_id)
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ retry_count –∏ max_retries –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        try:
            await db.execute('ALTER TABLE outbox ADD COLUMN retry_count INTEGER DEFAULT 0')
        except Exception as e:
            if "duplicate column name" not in str(e).lower():
                print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ retry_count: {e}")
        
        try:
            await db.execute('ALTER TABLE outbox ADD COLUMN max_retries INTEGER DEFAULT 5')
        except Exception as e:
            if "duplicate column name" not in str(e).lower():
                print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ max_retries: {e}")
        
        try:
            await db.execute('ALTER TABLE outbox ADD COLUMN is_general_message INTEGER DEFAULT 0')
        except Exception as e:
            if "duplicate column name" not in str(e).lower():
                print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ is_general_message: {e}")
        # –ù–æ–≤—ã–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–∫–∞–∑–∞
        await db.execute('''
            CREATE TABLE IF NOT EXISTS characters (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                name TEXT,
                intro TEXT,
                face_1 TEXT,
                face_2 TEXT,
                full TEXT,
                FOREIGN KEY(order_id) REFERENCES orders(id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS answers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                question TEXT,
                answer TEXT,
                FOREIGN KEY(order_id) REFERENCES orders(id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS main_hero_photos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                filename TEXT,
                FOREIGN KEY(order_id) REFERENCES orders(id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –¥—Ä—É–≥–∏—Ö –≥–µ—Ä–æ–µ–≤
        await db.execute('''
            CREATE TABLE IF NOT EXISTS hero_photos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                filename TEXT,
                photo_type TEXT,
                hero_name TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(order_id) REFERENCES orders(id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        await db.execute('''
            CREATE TABLE IF NOT EXISTS uploads (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                filename TEXT,
                file_type TEXT,
                uploaded_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(order_id) REFERENCES orders(id)
            )
        ''')
        
        await db.execute('''
            CREATE TABLE IF NOT EXISTS joint_photos (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                filename TEXT,
                FOREIGN KEY(order_id) REFERENCES orders(id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π —Å—é–∂–µ—Ç–æ–≤
        await db.execute('''
            CREATE TABLE IF NOT EXISTS story_proposals (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                story_batch INTEGER,
                stories TEXT, -- JSON —Å –º–∞—Å—Å–∏–≤–æ–º —Å—é–∂–µ—Ç–æ–≤
                pages TEXT, -- JSON —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(order_id) REFERENCES orders(id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
        await db.execute('''
            CREATE TABLE IF NOT EXISTS order_pages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                page_number INTEGER,
                filename TEXT,
                description TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(order_id) REFERENCES orders(id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
        await db.execute('''
            CREATE TABLE IF NOT EXISTS message_templates (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL, -- –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞
                message_type TEXT NOT NULL, -- —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                content TEXT NOT NULL, -- —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                order_step TEXT, -- —à–∞–≥ –∑–∞–∫–∞–∑–∞, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è
                delay_minutes INTEGER DEFAULT 0, -- –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö –æ—Ç –Ω–∞—á–∞–ª–∞ —à–∞–≥–∞
                is_active BOOLEAN DEFAULT 1, -- –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —à–∞–±–ª–æ–Ω
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                manager_id INTEGER, -- ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ —à–∞–±–ª–æ–Ω
                FOREIGN KEY(manager_id) REFERENCES managers(id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        await db.execute('''
            CREATE TABLE IF NOT EXISTS message_template_files (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                template_id INTEGER, -- ID —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                file_path TEXT, -- –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                file_type TEXT, -- —Ç–∏–ø —Ñ–∞–π–ª–∞ (photo, audio, document, video, gif)
                file_name TEXT, -- –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                file_size INTEGER, -- —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(template_id) REFERENCES message_templates(id) ON DELETE CASCADE
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        await db.execute('''
            CREATE TABLE IF NOT EXISTS sent_messages_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                template_id INTEGER, -- ID —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                user_id INTEGER, -- ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                order_id INTEGER, -- ID –∑–∞–∫–∞–∑–∞
                sent_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(template_id) REFERENCES message_templates(id),
                FOREIGN KEY(user_id) REFERENCES user_profiles(user_id),
                FOREIGN KEY(order_id) REFERENCES orders(id)
            )
        ''')
        
        # –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        await db.execute('''
            CREATE TABLE IF NOT EXISTS delayed_messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                user_id INTEGER,
                manager_id INTEGER, -- ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞, —Å–æ–∑–¥–∞–≤—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message_type TEXT, -- 'demo_example', 'payment_reminder', 'final_reminder', 'auto_order_created', 'story_proposal', 'story_selection'
                content TEXT, -- —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                delay_minutes INTEGER, -- –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
                status TEXT DEFAULT 'pending', -- pending/sent/failed
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                scheduled_at DATETIME,
                sent_at DATETIME,
                is_automatic BOOLEAN DEFAULT 0, -- –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
                order_step TEXT, -- —à–∞–≥ –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                story_batch INTEGER DEFAULT 0, -- –Ω–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏ —Å—é–∂–µ—Ç–æ–≤ (1-5)
                story_pages TEXT, -- –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Å—é–∂–µ—Ç–æ–≤ (JSON)
                selected_stories TEXT, -- –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—é–∂–µ—Ç—ã (JSON)
                is_active BOOLEAN DEFAULT 1, -- –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —à–∞–±–ª–æ–Ω
                usage_count INTEGER DEFAULT 0, -- –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
                last_used DATETIME, -- –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                FOREIGN KEY(order_id) REFERENCES orders(id),
                FOREIGN KEY(user_id) REFERENCES user_profiles(user_id),
                FOREIGN KEY(manager_id) REFERENCES managers(id)
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ order_step, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try:
            await db.execute('ALTER TABLE delayed_messages ADD COLUMN order_step TEXT')
        except:
            pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —à–∞–±–ª–æ–Ω–æ–≤
        try:
            await db.execute('ALTER TABLE delayed_messages ADD COLUMN is_active BOOLEAN DEFAULT 1')
        except:
            pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        try:
            await db.execute('ALTER TABLE delayed_messages ADD COLUMN usage_count INTEGER DEFAULT 0')
        except:
            pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        try:
            await db.execute('ALTER TABLE delayed_messages ADD COLUMN last_used DATETIME')
        except:
            pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await db.execute('''
            CREATE TABLE IF NOT EXISTS delayed_message_files (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                delayed_message_id INTEGER,
                file_path TEXT, -- –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
                file_type TEXT, -- —Ç–∏–ø —Ñ–∞–π–ª–∞ (photo, audio, document)
                file_name TEXT, -- –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                file_size INTEGER, -- —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(delayed_message_id) REFERENCES delayed_messages(id) ON DELETE CASCADE
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–∞—Ö
        await db.execute('''
            CREATE TABLE IF NOT EXISTS user_step_timers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                order_id INTEGER NOT NULL,
                order_step TEXT NOT NULL, -- —ç—Ç–∞–ø –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                product_type TEXT, -- —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ (–ü–µ—Å–Ω—è/–ö–Ω–∏–≥–∞)
                step_started_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–∞–ª –Ω–∞ —ç—Ç–∞–ø
                step_updated_at DATETIME DEFAULT CURRENT_TIMESTAMP, -- –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                is_active BOOLEAN DEFAULT 1, -- –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ —Ç–∞–π–º–µ—Ä
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(user_id, order_id, order_step), -- –æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–∑–∞–∫–∞–∑/—ç—Ç–∞–ø
                FOREIGN KEY(user_id) REFERENCES user_profiles(user_id),
                FOREIGN KEY(order_id) REFERENCES orders(id) ON DELETE CASCADE
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–∞–π–º–µ—Ä–∞–º
        await db.execute('''
            CREATE TABLE IF NOT EXISTS timer_messages_sent (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timer_id INTEGER NOT NULL,
                template_id INTEGER NOT NULL,
                user_id INTEGER NOT NULL,
                order_id INTEGER NOT NULL,
                message_type TEXT NOT NULL,
                delay_minutes INTEGER NOT NULL,
                sent_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(timer_id, template_id, delay_minutes), -- –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ç–∞–π–º–µ—Ä/—à–∞–±–ª–æ–Ω/–∑–∞–¥–µ—Ä–∂–∫—É
                FOREIGN KEY(timer_id) REFERENCES user_step_timers(id) ON DELETE CASCADE,
                FOREIGN KEY(template_id) REFERENCES message_templates(id),
                FOREIGN KEY(user_id) REFERENCES user_profiles(user_id),
                FOREIGN KEY(order_id) REFERENCES orders(id) ON DELETE CASCADE
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await db.execute('''
            CREATE TABLE IF NOT EXISTS general_message_sent_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                delayed_message_id INTEGER,
                user_id INTEGER,
                order_id INTEGER,
                sent_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(delayed_message_id) REFERENCES delayed_messages(id) ON DELETE CASCADE,
                FOREIGN KEY(user_id) REFERENCES user_profiles(user_id),
                FOREIGN KEY(order_id) REFERENCES orders(id),
                UNIQUE(delayed_message_id, user_id, order_id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
        await db.execute('''
            CREATE TABLE IF NOT EXISTS delivery_addresses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                user_id INTEGER,
                address TEXT,
                recipient_name TEXT,
                phone TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(order_id) REFERENCES orders(id),
                FOREIGN KEY(user_id) REFERENCES user_profiles(user_id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS order_status_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                old_status TEXT,
                new_status TEXT,
                changed_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(order_id) REFERENCES orders(id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS message_history (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER,
                sender TEXT, -- 'manager' –∏–ª–∏ 'user'
                message TEXT,
                sent_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(order_id) REFERENCES orders(id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ä–∞–Ω–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞)
        await db.execute('''
            CREATE TABLE IF NOT EXISTS early_user_messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                message TEXT,
                sent_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS managers (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                email TEXT UNIQUE NOT NULL,
                hashed_password TEXT NOT NULL,
                full_name TEXT NOT NULL,
                is_super_admin BOOLEAN DEFAULT 0,
                is_active BOOLEAN DEFAULT 1
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –æ–±–ª–æ–∂–µ–∫
        await db.execute('''
            CREATE TABLE IF NOT EXISTS cover_templates (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                filename TEXT NOT NULL,
                category TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∏–ª–µ–π –∫–Ω–∏–≥
        await db.execute('''
            CREATE TABLE IF NOT EXISTS book_styles (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT NOT NULL,
                filename TEXT NOT NULL,
                category TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Å—Ç–∏–ª–µ–π –≥–æ–ª–æ—Å–∞
        await db.execute('''
            CREATE TABLE IF NOT EXISTS voice_styles (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                description TEXT NOT NULL,
                filename TEXT NOT NULL,
                gender TEXT DEFAULT 'male',
                category TEXT NOT NULL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ —Å–≤–æ–¥–∫–∏ –∑–∞–∫–∞–∑–∞
        await db.execute('''
            CREATE TABLE IF NOT EXISTS order_summary_templates (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                gender_label TEXT DEFAULT '–ü–æ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è',
                recipient_name_label TEXT DEFAULT '–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è',
                gift_reason_label TEXT DEFAULT '–ü–æ–≤–æ–¥',
                relation_label TEXT DEFAULT '–û—Ç–Ω–æ—à–µ–Ω–∏–µ',
                style_label TEXT DEFAULT '–°—Ç–∏–ª—å',
                format_label TEXT DEFAULT '–§–æ—Ä–º–∞—Ç',
                sender_name_label TEXT DEFAULT '–û—Ç –∫–æ–≥–æ',
                song_gender_label TEXT DEFAULT '–ü–æ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è',
                song_recipient_name_label TEXT DEFAULT '–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è',
                song_gift_reason_label TEXT DEFAULT '–ü–æ–≤–æ–¥',
                song_relation_label TEXT DEFAULT '–û—Ç–Ω–æ—à–µ–Ω–∏–µ',
                song_style_label TEXT DEFAULT '–°—Ç–∏–ª—å',
                song_voice_label TEXT DEFAULT '–ì–æ–ª–æ—Å',
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ gender, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        try:
            await db.execute('ALTER TABLE voice_styles ADD COLUMN gender TEXT DEFAULT "male"')
        except:
            pass  # –ü–æ–ª–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        await db.execute('''
            CREATE TABLE IF NOT EXISTS manager_queue (
                id INTEGER PRIMARY KEY,
                last_manager_id INTEGER DEFAULT 0
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ü–µ–Ω
        await db.execute('''
            CREATE TABLE IF NOT EXISTS pricing_items (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                product TEXT NOT NULL,
                price REAL NOT NULL,
                currency TEXT DEFAULT 'RUB',
                description TEXT,
                upgrade_price_difference REAL DEFAULT 0, -- –†–∞–∑–Ω–∏—Ü–∞ –≤ —Ü–µ–Ω–µ –ø—Ä–∏ –∞–ø–≥—Ä–µ–π–¥–µ
                is_active BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É upgrade_price_difference –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            await db.execute('ALTER TABLE pricing_items ADD COLUMN upgrade_price_difference REAL DEFAULT 0')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ upgrade_price_difference –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É pricing_items")
        except aiosqlite.OperationalError as e:
            if "duplicate column name" in str(e):
                print("‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ upgrade_price_difference —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ÑπÔ∏è –ö–æ–ª–æ–Ω–∫–∞ upgrade_price_difference: {e}")
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —à–∞–≥–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        await db.execute('''
            CREATE TABLE IF NOT EXISTS content_steps (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                step_key TEXT NOT NULL UNIQUE,
                step_name TEXT NOT NULL,
                content_type TEXT DEFAULT 'text',
                content TEXT NOT NULL,
                materials TEXT,
                is_active BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–≤–∏–∑–∞ –¥–ª—è –ø–µ—Å–Ω–∏ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ —Ç–µ–∫—Å—Ç—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —Å–≤—è–∑—è–º)
        await db.execute('''
            CREATE TABLE IF NOT EXISTS song_quiz (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                relation_key TEXT NOT NULL,
                author_gender TEXT NOT NULL, -- 'male' | 'female'
                title TEXT DEFAULT '',
                intro TEXT NOT NULL,
                phrases_hint TEXT DEFAULT '',
                questions_json TEXT NOT NULL, -- JSON –º–∞—Å—Å–∏–≤ –∏–∑ 8 –ø—É–Ω–∫—Ç–æ–≤
                outro TEXT DEFAULT '',
                is_active BOOLEAN DEFAULT 1,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                UNIQUE(relation_key, author_gender)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞
        await db.execute('''
            CREATE TABLE IF NOT EXISTS bot_messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                message_key TEXT UNIQUE NOT NULL,
                message_name TEXT NOT NULL,
                content TEXT NOT NULL,
                context TEXT, -- –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "welcome", "photo_upload", "payment")
                stage TEXT, -- –≠—Ç–∞–ø –±–æ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "start", "character_creation", "payment")
                sort_order INTEGER DEFAULT 0, -- –ü–æ—Ä—è–¥–æ–∫ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                is_editable BOOLEAN NOT NULL DEFAULT 1,
                is_active BOOLEAN NOT NULL DEFAULT 1,
                usage_count INTEGER DEFAULT 0, -- –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å
                last_used DATETIME,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫ —Å–æ–±—ã—Ç–∏–π
        await db.execute('''
            CREATE TABLE IF NOT EXISTS event_metrics (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                event_type TEXT NOT NULL,
                event_data TEXT, -- JSON –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
                step_name TEXT, -- –ù–∞–∑–≤–∞–Ω–∏–µ —à–∞–≥–∞ (–¥–ª—è –æ—Ç–≤–∞–ª–æ–≤)
                product_type TEXT, -- –¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ (–∫–Ω–∏–≥–∞/–ø–µ—Å–Ω—è)
                order_id INTEGER, -- ID –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
                amount REAL, -- –°—É–º–º–∞ (–¥–ª—è –ø–æ–∫—É–ø–æ–∫)
                source TEXT, -- –ò—Å—Ç–æ—á–Ω–∏–∫ (–∫–∞–Ω–∞–ª/–∫–∞–º–ø–∞–Ω–∏—è)
                utm_source TEXT, -- UTM source
                utm_medium TEXT, -- UTM medium
                utm_campaign TEXT, -- UTM campaign
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º UTM-–∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        try:
            await db.execute('ALTER TABLE event_metrics ADD COLUMN utm_source TEXT')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ utm_source –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É event_metrics")
        except aiosqlite.OperationalError as e:
            if "duplicate column name" not in str(e):
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è utm_source: {e}")
        
        try:
            await db.execute('ALTER TABLE event_metrics ADD COLUMN utm_medium TEXT')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ utm_medium –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É event_metrics")
        except aiosqlite.OperationalError as e:
            if "duplicate column name" not in str(e):
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è utm_medium: {e}")
        
        try:
            await db.execute('ALTER TABLE event_metrics ADD COLUMN utm_campaign TEXT')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ utm_campaign –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É event_metrics")
        except aiosqlite.OperationalError as e:
            if "duplicate column name" not in str(e):
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è utm_campaign: {e}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º UTM-–∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É orders –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        try:
            await db.execute('ALTER TABLE orders ADD COLUMN source TEXT')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ source –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É orders")
        except aiosqlite.OperationalError as e:
            if "duplicate column name" not in str(e):
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è source: {e}")
        
        try:
            await db.execute('ALTER TABLE orders ADD COLUMN utm_source TEXT')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ utm_source –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É orders")
        except aiosqlite.OperationalError as e:
            if "duplicate column name" not in str(e):
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è utm_source: {e}")
        
        try:
            await db.execute('ALTER TABLE orders ADD COLUMN utm_medium TEXT')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ utm_medium –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É orders")
        except aiosqlite.OperationalError as e:
            if "duplicate column name" not in str(e):
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è utm_medium: {e}")
        
        try:
            await db.execute('ALTER TABLE orders ADD COLUMN utm_campaign TEXT')
            print("‚úÖ –ö–æ–ª–æ–Ω–∫–∞ utm_campaign –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É orders")
        except aiosqlite.OperationalError as e:
            if "duplicate column name" not in str(e):
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è utm_campaign: {e}")

        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        await db.execute('''
            CREATE INDEX IF NOT EXISTS idx_event_metrics_user_id ON event_metrics(user_id)
        ''')
        await db.execute('''
            CREATE INDEX IF NOT EXISTS idx_event_metrics_event_type ON event_metrics(event_type)
        ''')
        await db.execute('''
            CREATE INDEX IF NOT EXISTS idx_event_metrics_timestamp ON event_metrics(timestamp)
        ''')
        await db.execute('''
            CREATE INDEX IF NOT EXISTS idx_event_metrics_order_id ON event_metrics(order_id)
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        await db.execute('''
            CREATE TABLE IF NOT EXISTS order_notifications (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                order_id INTEGER NOT NULL,
                manager_id INTEGER, -- ID –º–µ–Ω–µ–¥–∂–µ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–∑–Ω–∞—á–µ–Ω –∑–∞–∫–∞–∑
                is_read BOOLEAN DEFAULT 0, -- –ø—Ä–æ—á–∏—Ç–∞–Ω–æ –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                last_user_message_at DATETIME, -- –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(order_id) REFERENCES orders(id) ON DELETE CASCADE,
                FOREIGN KEY(manager_id) REFERENCES managers(id) ON DELETE SET NULL,
                UNIQUE(order_id) -- –æ–¥–∏–Ω –∑–∞–∫–∞–∑ = –æ–¥–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            )
        ''')
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        await db.execute('''
            CREATE INDEX IF NOT EXISTS idx_order_notifications_manager_id ON order_notifications(manager_id)
        ''')
        await db.execute('''
            CREATE INDEX IF NOT EXISTS idx_order_notifications_is_read ON order_notifications(is_read)
        ''')
        await db.execute('''
            CREATE INDEX IF NOT EXISTS idx_order_notifications_order_id ON order_notifications(order_id)
        ''')
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        await db.execute('''
            INSERT OR IGNORE INTO manager_queue (id, last_manager_id) VALUES (1, 0)
        ''')
        await db.commit()

async def save_user_profile(user_data: dict, generated_book: str = None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É"""
    async def _save_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await configure_db_connection(db)
            
            # –û—á–∏—â–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
            username = user_data.get('username') if user_data.get('username') and user_data.get('username') != "None" else None
            first_name = user_data.get('first_name') if user_data.get('first_name') and user_data.get('first_name') != "None" else None
            last_name = user_data.get('last_name') if user_data.get('last_name') and user_data.get('last_name') != "None" else None
            
            await db.execute('''
                INSERT OR REPLACE INTO user_profiles 
                (user_id, username, first_name, last_name, product, relation, 
                 main_hero_intro, main_hero_photos, heroes, generated_book, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, datetime('now'))
            ''', (
                user_data.get('user_id'),
                username,
                first_name,
                last_name,
                user_data.get('product'),
                user_data.get('relation'),
                user_data.get('main_hero_intro'),
                json.dumps(user_data.get('main_hero_photos', [])),
                json.dumps(user_data.get('heroes', [])),
                generated_book
            ))
            await db.commit()
    
    await safe_db_operation(_save_operation)
async def get_user_book(user_id: int) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–Ω–∏–≥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async def _get_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await configure_db_connection(db)
            
            async with db.execute('''
                SELECT generated_book, created_at FROM user_profiles 
                WHERE user_id = ?
            ''', (user_id,)) as cursor:
                row = await cursor.fetchone()
                if row:
                    return {
                        'generated_book': row[0],
                        'created_at': row[1]
                    }
                return None
    
    return await safe_db_operation(_get_operation)

# --- –†–∞–±–æ—Ç–∞ —Å –∑–∞–∫–∞–∑–∞–º–∏ ---

async def create_order(user_id: int, order_data: dict) -> int:
    print(f"üîç –û–¢–õ–ê–î–ö–ê: create_order –≤—ã–∑–≤–∞–Ω–∞ —Å user_id={user_id}, order_data={order_data}")
    
    async with aiosqlite.connect(DB_PATH) as db:
        # –ï—Å–ª–∏ username –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ù–ï –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–∫–∞–∑–æ–≤)
        if not order_data.get('username'):
            try:
                async with db.execute('''
                    SELECT username 
                    FROM user_profiles 
                    WHERE user_id = ? 
                    LIMIT 1
                ''', (user_id,)) as cursor:
                    row = await cursor.fetchone()
                    if row and row[0]:
                        order_data['username'] = row[0]
                        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–¥—Ç—è–Ω—É–ª–∏ username –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {row[0]}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è username –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        cursor = await db.execute('''
            INSERT INTO orders (user_id, order_data, status, source, utm_source, utm_medium, utm_campaign, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, datetime('now'))
        ''', (user_id, json.dumps(order_data), 'pending', order_data.get('source'), order_data.get('utm_source'), order_data.get('utm_medium'), order_data.get('utm_campaign')))
        
        order_id = cursor.lastrowid
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ #{order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É user_profiles
        try:
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
            print(f"üîç –û–¢–õ–ê–î–ö–ê: user_id={user_id}, username={order_data.get('username')}, first_name={order_data.get('first_name')}, last_name={order_data.get('last_name')}, product={order_data.get('product')}")
            
            # –û—á–∏—â–∞–µ–º None –∑–Ω–∞—á–µ–Ω–∏—è
            username = order_data.get('username') if order_data.get('username') and order_data.get('username') != "None" else None
            first_name = order_data.get('first_name') if order_data.get('first_name') and order_data.get('first_name') != "None" else None
            last_name = order_data.get('last_name') if order_data.get('last_name') and order_data.get('last_name') != "None" else None
            
            await db.execute('''
                INSERT OR REPLACE INTO user_profiles 
                (user_id, username, first_name, last_name, product, created_at)
                VALUES (?, ?, ?, ?, ?, datetime('now'))
            ''', (
                user_id,
                username,
                first_name,
                last_name,
                order_data.get('product')
            ))
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫ –Ω–æ–≤–æ–º—É –∑–∞–∫–∞–∑—É
        try:
            # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± - –±–µ—Ä–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É
            async with db.execute('''
                SELECT id FROM managers WHERE is_super_admin = 0 ORDER BY id ASC
            ''') as cursor:
                managers = await cursor.fetchall()
            
            if managers:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
                async with db.execute('SELECT COUNT(*) FROM orders') as cursor:
                    order_count = (await cursor.fetchone())[0]
                
                # –í—ã–±–∏—Ä–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É round-robin
                manager_index = (order_count - 1) % len(managers)
                selected_manager_id = managers[manager_index][0]
                
                await db.execute('''
                    UPDATE orders
                    SET assigned_manager_id = ?
                    WHERE id = ?
                ''', (selected_manager_id, order_id))
                print(f"üîç –û–¢–õ–ê–î–ö–ê: –ú–µ–Ω–µ–¥–∂–µ—Ä ID {selected_manager_id} –Ω–∞–∑–Ω–∞—á–µ–Ω –∫ –∑–∞–∫–∞–∑—É #{order_id}")
            else:
                print(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫ –∑–∞–∫–∞–∑—É {order_id}: {e}")
        
        await db.commit()
        return order_id

async def get_orders(status: Optional[str] = None) -> List[Dict]:
    async def _get_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await configure_db_connection(db)
            
            if status:
                query = '''
                    SELECT o.*, o.user_id as telegram_id, u.username, m.email as manager_email, m.full_name as manager_name 
                    FROM orders o 
                    LEFT JOIN user_profiles u ON o.user_id = u.user_id 
                    LEFT JOIN managers m ON o.assigned_manager_id = m.id 
                    WHERE o.status = ? 
                    ORDER BY o.created_at DESC
                '''
                args = (status,)
            else:
                query = '''
                    SELECT o.*, o.user_id as telegram_id, u.username, m.email as manager_email, m.full_name as manager_name 
                    FROM orders o 
                    LEFT JOIN user_profiles u ON o.user_id = u.user_id 
                    LEFT JOIN managers m ON o.assigned_manager_id = m.id 
                    ORDER BY o.created_at DESC
                '''
                args = ()
            async with db.execute(query, args) as cursor:
                rows = await cursor.fetchall()
                return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]
    
    return await safe_db_operation(_get_operation)

async def get_orders_filtered(
    status: Optional[str] = None,
    order_type: Optional[str] = None,
    telegram_id: Optional[str] = None,
    order_id: Optional[int] = None,
    sort_by: str = 'created_at',
    sort_dir: str = 'desc',
) -> List[Dict]:
    async with aiosqlite.connect(DB_PATH) as db:
        query = '''
            SELECT o.*, o.user_id as telegram_id, u.product, u.username, m.email as manager_email, m.full_name as manager_name, d.phone
            FROM orders o 
            LEFT JOIN user_profiles u ON o.user_id = u.user_id 
            LEFT JOIN managers m ON o.assigned_manager_id = m.id 
            LEFT JOIN delivery_addresses d ON o.id = d.order_id
            WHERE 1=1
        '''
        args = []
        if status:
            query += ' AND o.status = ?'
            args.append(status)
        if order_type:
            query += ' AND u.product = ?'
            args.append(order_type)
        if telegram_id:
            query += ' AND o.user_id = ?'
            args.append(int(telegram_id))
        if order_id:
            query += ' AND o.id = ?'
            args.append(order_id)
        if sort_by not in ['created_at', 'status', 'id']:
            sort_by = 'created_at'
        if sort_dir.lower() not in ['asc', 'desc']:
            sort_dir = 'desc'
        query += f' ORDER BY o.{sort_by} {sort_dir.upper()}'
        async with db.execute(query, args) as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def get_order(order_id: int) -> Optional[Dict]:
    async def _get_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await configure_db_connection(db)
            
            async with db.execute('''
                SELECT o.*, o.user_id as telegram_id, u.username, u.first_name, u.last_name, m.email as manager_email, m.full_name as manager_name 
                FROM orders o 
                LEFT JOIN user_profiles u ON o.user_id = u.user_id 
                LEFT JOIN managers m ON o.assigned_manager_id = m.id 
                WHERE o.id = ?
            ''', (order_id,)) as cursor:
                row = await cursor.fetchone()
                if row:
                    return dict(zip([column[0] for column in cursor.description], row))
                return None
    
    return await safe_db_operation(_get_operation)

async def get_user_active_order_by_user_id(user_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª—é–±–æ–≥–æ —Ç–∏–ø–∞)"""
    async def _get_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await configure_db_connection(db)
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω
            async with db.execute('''
                SELECT o.*, o.user_id as telegram_id, u.username, u.first_name, u.last_name, m.email as manager_email, m.full_name as manager_name 
                FROM orders o 
                LEFT JOIN user_profiles u ON o.user_id = u.user_id 
                LEFT JOIN managers m ON o.assigned_manager_id = m.id 
                WHERE o.user_id = ? 
                AND o.status NOT IN ('delivered', 'cancelled', 'completed')
                ORDER BY o.created_at DESC
                LIMIT 1
            ''', (user_id,)) as cursor:
                row = await cursor.fetchone()
                if row:
                    return dict(zip([column[0] for column in cursor.description], row))
                return None
    
    return await safe_db_operation(_get_operation)

async def get_user_active_order(user_id: int, product: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞"""
    async def _get_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await configure_db_connection(db)
            
            # –ò—â–µ–º –∑–∞–∫–∞–∑ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º –∏ —Å—Ç–∞—Ç—É—Å–æ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º
            async with db.execute('''
                SELECT o.*, o.user_id as telegram_id, u.username, u.first_name, u.last_name, m.email as manager_email, m.full_name as manager_name 
                FROM orders o 
                LEFT JOIN user_profiles u ON o.user_id = u.user_id 
                LEFT JOIN managers m ON o.assigned_manager_id = m.id 
                WHERE o.user_id = ? 
                AND json_extract(o.order_data, '$.product') = ?
                AND o.status NOT IN ('completed', 'cancelled', 'refunded')
                ORDER BY o.created_at DESC
                LIMIT 1
            ''', (user_id, product)) as cursor:
                row = await cursor.fetchone()
                if row:
                    return dict(zip([column[0] for column in cursor.description], row))
                return None
    
    return await safe_db_operation(_get_operation)

async def get_last_order_by_user_and_product(user_id: int, product: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–∞ (–≤–∫–ª—é—á–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)"""
    async def _get_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await configure_db_connection(db)
            
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø—Ä–æ–¥—É–∫—Ç–æ–º (–≤–∫–ª—é—á–∞—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
            async with db.execute('''
                SELECT o.*, o.user_id as telegram_id, u.username, u.first_name, u.last_name, m.email as manager_email, m.full_name as manager_name 
                FROM orders o 
                LEFT JOIN user_profiles u ON o.user_id = u.user_id 
                LEFT JOIN managers m ON o.assigned_manager_id = m.id 
                WHERE o.user_id = ? 
                AND json_extract(o.order_data, '$.product') = ?
                ORDER BY o.created_at DESC
                LIMIT 1
            ''', (user_id, product)) as cursor:
                row = await cursor.fetchone()
                if row:
                    return dict(zip([column[0] for column in cursor.description], row))
                return None
    
    return await safe_db_operation(_get_operation)

async def update_order_status(order_id: int, status: str, total_amount: float = None):
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        cursor = await db.execute('''
            SELECT user_id, order_data, status as old_status FROM orders WHERE id = ?
        ''', (order_id,))
        order_data = await cursor.fetchone()
        
        if not order_data:
            return
        
        user_id, order_json, old_status = order_data
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏ total_amount –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω
        if total_amount is not None:
            await db.execute('''
                UPDATE orders SET status = ?, total_amount = ?, updated_at = datetime('now') WHERE id = ?
            ''', (status, total_amount, order_id))
        else:
            await db.execute('''
                UPDATE orders SET status = ?, updated_at = datetime('now') WHERE id = ?
            ''', (status, order_id))
        await db.commit()
        
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–∏–ª—Å—è, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä—ã
        if old_status != status:
            try:
                import json
                order_info = json.loads(order_json) if order_json else {}
                product_type = order_info.get('product', 'Unknown')
                
                # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –Ω–æ–≤–æ–≥–æ —ç—Ç–∞–ø–∞
                if status == 'demo_sent':
                    # –°–Ω–∞—á–∞–ª–∞ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –í–°–ï —Å—Ç–∞—Ä—ã–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
                    await deactivate_user_timers(user_id, order_id)
                    
                    # –î–ª—è —Å—Ç–∞—Ç—É—Å–∞ demo_sent —Å–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –ø—Ä–æ–¥—É–∫—Ç–∞
                    if product_type == '–ü–µ—Å–Ω—è':
                        await create_or_update_user_timer(user_id, order_id, 'demo_received_song', product_type)
                    else:
                        await create_or_update_user_timer(user_id, order_id, 'demo_received_book', product_type)
                else:
                    await create_or_update_user_timer(user_id, order_id, status, product_type)
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–∞–π–º–µ—Ä—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–∞—é—â–∏—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
                if status in ['paid', 'upsell_paid', 'ready', 'delivered', 'completed', 'cancelled', 'refunded']:
                    await deactivate_user_timers(user_id, order_id)
                    print(f"üîï –¢–∞–π–º–µ—Ä—ã –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –ø—Ä–∏ —Å—Ç–∞—Ç—É—Å–µ {status}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

async def cleanup_trigger_messages_for_order(db, order_id: int, new_status: str):
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω—ã
    –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    """
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
        messages_to_remove = []
        
        if new_status in ['paid', 'upsell_paid', 'ready', 'delivered', 'completed', 'payment_pending', 'waiting_draft', 'waiting_final', 'final_sent']:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω –∏–ª–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã, —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
            messages_to_remove.extend(['payment_reminder', 'final_reminder', 'payment_reminder_24h', 'payment_reminder_48h', 'abandoned_cart', 'payment_delay'])
        
        if new_status in ['cancelled', 'refunded']:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω, —É–¥–∞–ª—è–µ–º –≤—Å–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            messages_to_remove.extend(['demo_example', 'payment_reminder', 'final_reminder', 'payment_reminder_24h', 'payment_reminder_48h', 'delivery_reminder', 'abandoned_cart', 'payment_delay'])
        
        if new_status in ['demo_sent', 'draft_sent']:
            # –ï—Å–ª–∏ –¥–µ–º–æ –∏–ª–∏ —á–µ—Ä–Ω–æ–≤–∏–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–º–æ
            messages_to_remove.extend(['demo_example', 'demo_reminder'])
        
        if new_status in ['waiting_feedback', 'feedback_processed']:
            # –ï—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Ñ–∏–¥–±–µ–∫, —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —á–µ—Ä–Ω–æ–≤–∏–∫–µ
            messages_to_remove.extend(['draft_reminder', 'feedback_delay'])
        
        if new_status in ['waiting_delivery', 'delivered']:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–æ—Å—Ç–∞–≤–∫–µ
            messages_to_remove.extend(['delivery_reminder', 'delivery_delay'])
        
        if new_status in ['waiting_cover_choice', 'cover_selected']:
            # –ï—Å–ª–∏ –æ–±–ª–æ–∂–∫–∞ –≤—ã–±—Ä–∞–Ω–∞, —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—ã–±–æ—Ä–µ –æ–±–ª–æ–∂–∫–∏
            messages_to_remove.extend(['cover_reminder', 'cover_choice_delay'])
        
        if new_status in ['waiting_story_choice', 'story_selected']:
            # –ï—Å–ª–∏ —Å—é–∂–µ—Ç –≤—ã–±—Ä–∞–Ω, —É–¥–∞–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—ã–±–æ—Ä–µ —Å—é–∂–µ—Ç–∞
            messages_to_remove.extend(['story_reminder', 'story_choice_delay'])
        
        if messages_to_remove:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
            placeholders = ','.join(['?' for _ in messages_to_remove])
            await db.execute(f'''
                DELETE FROM delayed_messages 
                WHERE order_id = ? AND message_type IN ({placeholders})
            ''', [order_id] + messages_to_remove)
            
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
_order_locks = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–∫ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
_db_lock = asyncio.Lock()

async def configure_db_connection(db):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    await db.execute('PRAGMA journal_mode=WAL')
    await db.execute('PRAGMA synchronous=NORMAL')
    await db.execute('PRAGMA cache_size=10000')
    await db.execute('PRAGMA temp_store=MEMORY')
    await db.execute('PRAGMA mmap_size=268435456')  # 256MB
    await db.execute('PRAGMA busy_timeout=30000')  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

async def safe_db_operation(operation, max_retries=3, delay=0.1):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏"""
    for attempt in range(max_retries):
        try:
            async with _db_lock:
                return await operation()
        except aiosqlite.OperationalError as e:
            if "database is locked" in str(e) and attempt < max_retries - 1:
                print(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
                await asyncio.sleep(delay * (attempt + 1))
                continue
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
                raise e
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise e

async def update_order_data(order_id: int, order_data: dict):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞, –º–µ—Ä–¥–∂–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        cursor = await db.execute('SELECT order_data FROM orders WHERE id = ?', (order_id,))
        row = await cursor.fetchone()
        
        if row and row[0]:
            try:
                existing_data = json.loads(row[0])
            except json.JSONDecodeError:
                existing_data = {}
        else:
            existing_data = {}
        
        # –ú–µ—Ä–¥–∂–∏–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏
        merged_data = {**existing_data, **order_data}
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_data = [json.dumps(merged_data), order_id]
        update_query = 'UPDATE orders SET order_data = ?, updated_at = datetime(\'now\')'
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å sender_name, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É
        if 'sender_name' in order_data:
            update_query += ', sender_name = ?'
            update_data.insert(1, order_data['sender_name'])
        
        update_query += ' WHERE id = ?'
        
        await db.execute(update_query, update_data)
        await db.commit()

async def get_order_data_debug(order_id: int) -> dict:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        cursor = await db.execute('''
            SELECT o.order_data, o.first_page_text, o.last_page_text, o.first_last_design, o.sender_name,
                   u.username, u.first_name, u.last_name
            FROM orders o 
            LEFT JOIN user_profiles u ON o.user_id = u.user_id 
            WHERE o.id = ?
        ''', (order_id,))
        row = await cursor.fetchone()
        
        if row:
            order_data, first_page_text, last_page_text, first_last_design, sender_name, username, first_name, last_name = row
            print(f"üîç –û–¢–õ–ê–î–ö–ê get_order_data_debug: first_page_text='{first_page_text}', last_page_text='{last_page_text}'")
            
            # –ü–∞—Ä—Å–∏–º order_data
            if order_data:
                try:
                    data = json.loads(order_data)
                except json.JSONDecodeError:
                    data = {}
            else:
                data = {}
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            data['username'] = username
            data['first_name'] = first_name
            data['last_name'] = last_name
            
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            if first_page_text:
                data['first_page_text'] = first_page_text
            if last_page_text:
                data['last_page_text'] = last_page_text
            if first_last_design:
                data['first_last_design'] = first_last_design
            if sender_name:
                data['sender_name'] = sender_name
            
            return data
        return {}
async def save_selected_pages(order_id: int, selected_pages: list):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        cursor = await db.execute('SELECT order_data FROM orders WHERE id = ?', (order_id,))
        row = await cursor.fetchone()
        if row and row[0]:
            try:
                existing_data = json.loads(row[0])
            except json.JSONDecodeError:
                existing_data = {}
        else:
            existing_data = {}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        existing_data["selected_pages"] = selected_pages
        existing_data["pages_selection_completed"] = True
        existing_data["pages_selection_date"] = datetime.now().isoformat()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        await db.execute('''
            UPDATE orders SET order_data = ?, updated_at = datetime('now') WHERE id = ?
        ''', (json.dumps(existing_data), order_id))
        await db.commit()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        await log_order_status_change(order_id, "pages_selected", f"–í—ã–±—Ä–∞–Ω–æ {len(selected_pages)} —Å—Ç—Ä–∞–Ω–∏—Ü")

async def update_order_files(order_id: int, pdf_path: str = None, mp3_path: str = None):
    async def _update_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await configure_db_connection(db)
            
            if pdf_path:
                await db.execute("UPDATE orders SET pdf_path = ?, updated_at = datetime('now') WHERE id = ?", (pdf_path, order_id))
            if mp3_path:
                await db.execute("UPDATE orders SET mp3_path = ?, updated_at = datetime('now') WHERE id = ?", (mp3_path, order_id))
            await db.commit()
    
    await safe_db_operation(_update_operation) 

# --- –†–∞–±–æ—Ç–∞ —Å outbox (–æ—á–µ—Ä–µ–¥—å –æ—Ç–ø—Ä–∞–≤–∫–∏) ---

async def add_outbox_task(order_id: int, user_id: int, type_: str, content: str, file_type: str = None, comment: str = None, button_text: str = None, button_callback: str = None, is_general_message: bool = False):
    async def _add_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await configure_db_connection(db)
            
            await db.execute('''
                INSERT INTO outbox (order_id, user_id, type, content, file_type, comment, button_text, button_callback, is_general_message, status, created_at, retry_count, max_retries)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, 'pending', datetime('now'), 0, 3)
            ''', (order_id, user_id, type_, content, file_type, comment, button_text, button_callback, 1 if is_general_message else 0))
            await db.commit()
    
    await safe_db_operation(_add_operation)

async def get_pending_outbox_tasks():
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤ outbox –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        debug_cursor = await db.execute('''
            SELECT id, order_id, user_id, type, status, retry_count, max_retries, created_at 
            FROM outbox 
            ORDER BY created_at DESC 
            LIMIT 10
        ''')
        debug_tasks = await debug_cursor.fetchall()
        print(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê OUTBOX: –≤—Å–µ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–¥–∞—á:")
        for task in debug_tasks:
            print(f"   ID={task['id']}, status={task['status']}, retry={task['retry_count']}, max={task['max_retries']}, type={task['type']}")
        
        cursor = await db.execute('''
            SELECT id, order_id, user_id, type, content, file_type, comment, button_text, button_callback, 
                   COALESCE(is_general_message, 0) as is_general_message, created_at, COALESCE(retry_count, 0) as retry_count, COALESCE(max_retries, 3) as max_retries
            FROM outbox 
            WHERE status = 'pending' AND (COALESCE(retry_count, 0) < COALESCE(max_retries, 3))
            ORDER BY created_at ASC
        ''')
        tasks = await cursor.fetchall()
        print(f"üîç –ù–ê–ô–î–ï–ù–û PENDING –ó–ê–î–ê–ß: {len(tasks)}")
        return [dict(task) for task in tasks]

async def update_outbox_task_status(task_id: int, status: str):
    async def _update_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await configure_db_connection(db)
            
            await db.execute('''
                UPDATE outbox SET status = ?, sent_at = datetime('now') WHERE id = ?
            ''', (status, task_id))
            await db.commit()
    
    await safe_db_operation(_update_operation)

async def increment_outbox_retry_count(task_id: int):
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∑–∞–¥–∞—á–∏"""
    async def _increment_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            await configure_db_connection(db)
            
            await db.execute('''
                UPDATE outbox SET retry_count = retry_count + 1 WHERE id = ?
            ''', (task_id,))
            await db.commit()
    
    await safe_db_operation(_increment_operation)

# --- –†–∞–±–æ—Ç–∞ —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞) ---

async def create_message_template(name: str, message_type: str, content: str, order_step: str, delay_minutes: int = 0, manager_id: int = None):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è"""
    async def _create_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            await configure_db_connection(db)
            
            await db.execute('''
                INSERT INTO message_templates 
                (name, message_type, content, order_step, delay_minutes, manager_id)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (name, message_type, content, order_step, delay_minutes, manager_id))
            await db.commit()
            
            cursor = await db.execute('SELECT last_insert_rowid()')
            result = await cursor.fetchone()
            return result[0] if result else None
    
    return await safe_db_operation(_create_operation)

async def get_message_templates() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('''
            SELECT mt.*, m.email as manager_email, m.full_name as manager_name
            FROM message_templates mt
            LEFT JOIN managers m ON mt.manager_id = m.id
            WHERE mt.is_active = 1
            ORDER BY mt.order_step, mt.delay_minutes
        ''')
        rows = await cursor.fetchall()
        return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def get_message_template_by_id(template_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID"""
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('''
            SELECT mt.*, m.email as manager_email, m.full_name as manager_name
            FROM message_templates mt
            LEFT JOIN managers m ON mt.manager_id = m.id
            WHERE mt.id = ?
        ''', (template_id,))
        row = await cursor.fetchone()
        return dict(row) if row else None

async def update_message_template(template_id: int, name: str, content: str, delay_minutes: int, message_type: str, order_step: str = None) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è"""
    async def _update_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            await configure_db_connection(db)
            
            if order_step is not None:
                await db.execute('''
                    UPDATE message_templates 
                    SET name = ?, content = ?, delay_minutes = ?, message_type = ?, order_step = ?, updated_at = datetime('now')
                    WHERE id = ?
                ''', (name, content, delay_minutes, message_type, order_step, template_id))
            else:
                await db.execute('''
                    UPDATE message_templates 
                    SET name = ?, content = ?, delay_minutes = ?, message_type = ?, updated_at = datetime('now')
                    WHERE id = ?
                ''', (name, content, delay_minutes, message_type, template_id))
            await db.commit()
            
            return True
    
    return await safe_db_operation(_update_operation)

async def delete_message_template(template_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è"""
    async def _delete_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            await configure_db_connection(db)
            
            await db.execute('DELETE FROM message_templates WHERE id = ?', (template_id,))
            await db.commit()
            
            return True
    
    return await safe_db_operation(_delete_operation)

async def get_template_by_step_and_delay(order_step: str, delay_minutes: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —à–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —à–∞–≥–∞ –∏ –∑–∞–¥–µ—Ä–∂–∫–∏"""
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('''
            SELECT * FROM message_templates 
            WHERE order_step = ? AND delay_minutes = ? AND is_active = 1
            LIMIT 1
        ''', (order_step, delay_minutes))
        row = await cursor.fetchone()
        return dict(row) if row else None

async def is_message_sent_to_user(template_id: int, user_id: int, order_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            SELECT COUNT(*) FROM sent_messages_log 
            WHERE template_id = ? AND user_id = ? AND order_id = ?
        ''', (template_id, user_id, order_id))
        result = await cursor.fetchone()
        return result[0] > 0 if result else False

async def log_message_sent(template_id: int, user_id: int, order_id: int):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    async def _log_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            await configure_db_connection(db)
            
            await db.execute('''
                INSERT INTO sent_messages_log (template_id, user_id, order_id)
                VALUES (?, ?, ?)
            ''', (template_id, user_id, order_id))
            await db.commit()
    
    return await safe_db_operation(_log_operation)

async def get_users_on_step(order_step: str, delay_minutes: int = 0) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —à–∞–≥–µ –∑–∞–∫–∞–∑–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã–ª –ø–æ–ø–∞—Å—Ç—å –Ω–∞ —ç—Ç–æ—Ç —à–∞–≥
        target_time = datetime.now() - timedelta(minutes=delay_minutes)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –∏ —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–∑ order_step
        if order_step == "song_collecting_facts":
            # –î–ª—è –ø–µ—Å–µ–Ω –∏—â–µ–º —Å—Ç–∞—Ç—É—Å collecting_facts —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º "–ü–µ—Å–Ω—è"
            logging.info(f"üîç –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è song_collecting_facts, delay_minutes={delay_minutes}, target_time={target_time}")
            cursor = await db.execute('''
                SELECT DISTINCT o.id as order_id, o.user_id, o.order_data, o.created_at, o.updated_at
                FROM orders o
                WHERE o.status = 'collecting_facts'
                AND o.updated_at <= ?
                AND o.status NOT IN ('completed', 'cancelled', 'failed', 'paid', 'upsell_paid', 'ready', 'delivered')
                AND JSON_EXTRACT(o.order_data, '$.product') = '–ü–µ—Å–Ω—è'
            ''', (target_time.isoformat(),))
        elif order_step == "book_collecting_facts":
            # –î–ª—è –∫–Ω–∏–≥ –∏—â–µ–º —Å—Ç–∞—Ç—É—Å collecting_facts —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º "–ö–Ω–∏–≥–∞"
            cursor = await db.execute('''
                SELECT DISTINCT o.id as order_id, o.user_id, o.order_data, o.created_at, o.updated_at
                FROM orders o
                WHERE o.status = 'collecting_facts'
                AND o.updated_at <= ?
                AND o.status NOT IN ('completed', 'cancelled', 'failed', 'paid', 'upsell_paid', 'ready', 'delivered')
                AND JSON_EXTRACT(o.order_data, '$.product') = '–ö–Ω–∏–≥–∞'
            ''', (target_time.isoformat(),))
        else:
            # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —à–∞–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É
            cursor = await db.execute('''
                SELECT DISTINCT o.id as order_id, o.user_id, o.order_data, o.created_at, o.updated_at
                FROM orders o
                WHERE o.status = ? 
                AND o.updated_at <= ?
                AND o.status NOT IN ('completed', 'cancelled', 'failed', 'paid', 'upsell_paid', 'ready', 'delivered')
            ''', (order_step, target_time.isoformat()))
        
        rows = await cursor.fetchall()
        result = [dict(zip([column[0] for column in cursor.description], row)) for row in rows]
        logging.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(result)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è order_step={order_step}, delay_minutes={delay_minutes}")
        return result

# --- –†–∞–±–æ—Ç–∞ —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞) ---

async def add_delayed_message(order_id: Optional[int], user_id: Optional[int], message_type: str, content: str, delay_minutes: int, manager_id: int = None, is_automatic: bool = False, order_step: str = None, story_batch: int = 0, story_pages: str = None, selected_stories: str = None):
    print(f"üîç –û–¢–õ–ê–î–ö–ê: add_delayed_message –≤—ã–∑–≤–∞–Ω–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:")
    print(f"üîç order_id: {order_id}, user_id: {user_id}, message_type: {message_type}")
    print(f"üîç delay_minutes: {delay_minutes}, content: {content[:100]}...")
    
    async def _add_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await configure_db_connection(db)
            
            # –í—ã—á–∏—Å–ª—è–µ–º scheduled_at –Ω–∞ –æ—Å–Ω–æ–≤–µ delay_minutes
            if delay_minutes > 0:
                scheduled_time = datetime.now() + timedelta(minutes=delay_minutes)
            else:
                scheduled_time = datetime.now()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–¥–µ—Ä–∂–∫–∏
            if delay_minutes > 0:
                status = 'pending'  # –û–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
            else:
                status = 'pending'   # –î–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º pending
            
            await db.execute('''
                INSERT INTO delayed_messages 
                (order_id, user_id, manager_id, message_type, content, delay_minutes, status, scheduled_at, is_automatic, order_step, story_batch, story_pages, selected_stories)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (order_id, user_id, manager_id, message_type, content, delay_minutes, status, scheduled_time, is_automatic, order_step, story_batch, story_pages, selected_stories))
            await db.commit()
            
            cursor = await db.execute('SELECT last_insert_rowid()')
            result = await cursor.fetchone()
            return result[0] if result else None
    
    return await safe_db_operation(_add_operation)
async def add_delayed_message_file(delayed_message_id: int, file_path: str, file_type: str, file_name: str, file_size: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –æ–±–µ —Ç–∞–±–ª–∏—Ü—ã)"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ delayed_message_files (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
        await db.execute('''
            INSERT INTO delayed_message_files (delayed_message_id, file_path, file_type, file_name, file_size, created_at)
            VALUES (?, ?, ?, ?, ?, datetime('now'))
        ''', (delayed_message_id, file_path, file_type, file_name, file_size))
        
        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ message_template_files (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        cursor = await db.execute('''
            SELECT message_type, content FROM delayed_messages WHERE id = ?
        ''', (delayed_message_id,))
        delayed_msg = await cursor.fetchone()
        
        if delayed_msg:
            message_type = delayed_msg[0]
            content = delayed_msg[1]
            
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —à–∞–±–ª–æ–Ω
            cursor = await db.execute('''
                SELECT id FROM message_templates 
                WHERE message_type = ? AND content = ? AND is_active = 1
            ''', (message_type, content))
            template = await cursor.fetchone()
            
            template_id = None
            if template:
                template_id = template[0]
            else:
                # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º order_step –ø–æ —Ç–∏–ø—É —Å–æ–æ–±—â–µ–Ω–∏—è
                order_step = None
                if 'book_filling_reminder' in message_type:
                    order_step = 'book_collecting_facts'
                elif 'song_filling_reminder' in message_type:
                    order_step = 'song_collecting_facts'
                elif 'song_warming' in message_type:
                    order_step = 'waiting_full_song'
                elif 'payment_reminder' in message_type:
                    order_step = 'waiting_payment'
                elif 'demo_example' in message_type:
                    order_step = 'waiting_demo_song'
                elif 'answering_questions' in message_type:
                    order_step = 'answering_questions'
                else:
                    order_step = 'product_selected'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                
                # –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω
                cursor = await db.execute('''
                    INSERT INTO message_templates 
                    (name, message_type, content, order_step, delay_minutes, is_active, created_at)
                    VALUES (?, ?, ?, ?, ?, 1, datetime('now'))
                ''', (f"–ê–≤—Ç–æ-—à–∞–±–ª–æ–Ω {message_type}", message_type, content, order_step, 0))
                template_id = cursor.lastrowid
            
            if template_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —Ñ–∞–π–ª–∞
                cursor = await db.execute('''
                    SELECT id FROM message_template_files 
                    WHERE template_id = ? AND file_name = ? AND file_path = ?
                ''', (template_id, file_name, file_path))
                existing = await cursor.fetchone()
                
                if not existing:
                    await db.execute('''
                        INSERT INTO message_template_files (template_id, file_path, file_type, file_name, file_size, created_at)
                        VALUES (?, ?, ?, ?, ?, datetime('now'))
                    ''', (template_id, file_path, file_type, file_name, file_size))
        
        await db.commit()

async def create_payment_reminder_messages(order_id: int, user_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
    
    Args:
        order_id: ID –∑–∞–∫–∞–∑–∞
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏
        order = await get_order(order_id)
        if not order:
            logging.warning(f"‚ö†Ô∏è –ó–∞–∫–∞–∑ {order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ")
            return
        
        # –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ
        reminder_text = """üí≥ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ</b>

–í—ã –Ω–∞—á–∞–ª–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø–ª–∞—Ç—É.

–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá"""
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å —Ä–∞–∑–Ω—ã–º–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        # –û–±—ã—á–Ω–æ: —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç, 2 —á–∞—Å–∞, 6 —á–∞—Å–æ–≤, 24 —á–∞—Å–∞
        reminders = [
            (30, "payment_reminder_30min"),
            (120, "payment_reminder_2h"),
            (360, "payment_reminder_6h"),
            (1440, "payment_reminder_24h")
        ]
        
        for delay_minutes, message_type in reminders:
            await add_delayed_message(
                order_id=order_id,
                user_id=user_id,
                message_type=message_type,
                content=reminder_text,
                delay_minutes=delay_minutes,
                is_automatic=True,
                order_step='waiting_payment'
            )
        
        logging.info(f"‚úÖ –°–æ–∑–¥–∞–Ω—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}")
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")

async def get_delayed_message_files(delayed_message_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT * FROM delayed_message_files WHERE delayed_message_id = ? ORDER BY created_at ASC
        ''', (delayed_message_id,)) as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def get_delayed_message_files_by_type(message_type: str) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ —Ç–∏–ø—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT dmf.* FROM delayed_message_files dmf
            JOIN delayed_messages dm ON dmf.delayed_message_id = dm.id
            WHERE dm.message_type = ? AND dm.status = 'pending'
            ORDER BY dmf.created_at ASC
        ''', (message_type,)) as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def get_delayed_messages_by_type(message_type: str) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT * FROM delayed_messages WHERE message_type = ? AND status = 'pending'
            ORDER BY created_at ASC
        ''', (message_type,)) as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def get_delayed_message_files_by_content(content: str) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–π–ª—ã –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT dmf.* FROM delayed_message_files dmf
            JOIN delayed_messages dm ON dmf.delayed_message_id = dm.id
            WHERE dm.content = ? AND dm.status = 'pending'
            ORDER BY dmf.created_at ASC
        ''', (content,)) as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def get_delayed_message_files_by_message_type(message_type: str) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–π–ª—ã –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∏–ø—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT dmf.* FROM delayed_message_files dmf
            JOIN delayed_messages dm ON dmf.delayed_message_id = dm.id
            WHERE dm.message_type = ? AND dm.status = 'pending'
            ORDER BY dmf.created_at ASC
        ''', (message_type,)) as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def add_message_template_file(template_id: int, file_path: str, file_type: str, file_name: str, file_size: int):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –∫ —à–∞–±–ª–æ–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
    import logging
    logging.info(f"üîß –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∫ —à–∞–±–ª–æ–Ω—É {template_id}: {file_name} ({file_type})")
    
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ files
        cursor = await db.execute('SELECT files FROM message_templates WHERE id = ?', (template_id,))
        row = await cursor.fetchone()
        current_files = []
        
        import json
        
        if row and row[0]:
            try:
                current_files = json.loads(row[0])
                logging.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(current_files)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–ª–æ–Ω–∫–µ 'files'")
            except Exception as e:
                logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤: {e}")
                current_files = []
        else:
            logging.info(f"üìÅ –ö–æ–ª–æ–Ω–∫–∞ 'files' –ø—É—Å—Ç–∞—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        new_file = {
            "file_path": file_path,
            "file_type": file_type,
            "file_name": file_name,
            "file_size": file_size,
            "created_at": "now"
        }
        current_files.append(new_file)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–ª–æ–Ω–∫—É files
        files_json = json.dumps(current_files)
        await db.execute('''
            UPDATE message_templates SET files = ? WHERE id = ?
        ''', (files_json, template_id))
        logging.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(current_files)} —Ñ–∞–π–ª–æ–≤ –≤ –∫–æ–ª–æ–Ω–∫—É 'files'")
        
        # –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞
            cursor = await db.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='message_template_files'")
            table_exists = await cursor.fetchone()
            
            if table_exists:
                await db.execute('''
                    INSERT INTO message_template_files (template_id, file_path, file_type, file_name, file_size, created_at)
                    VALUES (?, ?, ?, ?, ?, datetime('now'))
                ''', (template_id, file_path, file_type, file_name, file_size))
                logging.info(f"‚úÖ –§–∞–π–ª —Ç–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É 'message_template_files'")
            else:
                logging.info(f"‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ 'message_template_files' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É: {e}")
        
        await db.commit()
        logging.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∫ —à–∞–±–ª–æ–Ω—É {template_id}")

async def get_message_template_files(template_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (–æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∏–∑ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ –∏ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã)"""
    async with aiosqlite.connect(DB_PATH) as db:
        all_files = []
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ files
        async with db.execute('''
            SELECT files FROM message_templates WHERE id = ?
        ''', (template_id,)) as cursor:
            row = await cursor.fetchone()
            if row and row[0]:
                import json
                try:
                    files_data = json.loads(row[0])
                    if isinstance(files_data, list):
                        all_files.extend(files_data)
                        logging.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(files_data)} —Ñ–∞–π–ª–æ–≤ –≤ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ 'files' –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template_id}")
                except Exception as e:
                    logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON —Ñ–∞–π–ª–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template_id}: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã message_template_files (–µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        # –ù–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ files
        try:
            cursor = await db.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='message_template_files'")
            table_exists = await cursor.fetchone()
            
            if table_exists:
                # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                new_file_names = {f.get('file_name', '') for f in all_files}
                
                async with db.execute('''
                    SELECT * FROM message_template_files WHERE template_id = ? ORDER BY created_at ASC
                ''', (template_id,)) as cursor:
                    rows = await cursor.fetchall()
                    old_files = [dict(zip([column[0] for column in cursor.description], row)) for row in rows]
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
                    unique_old_files = []
                    for old_file in old_files:
                        old_file_name = old_file.get('file_name', '')
                        if old_file_name not in new_file_names:
                            unique_old_files.append(old_file)
                    
                    all_files.extend(unique_old_files)
                    if unique_old_files:
                        logging.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(unique_old_files)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü–µ 'message_template_files' –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template_id}")
                    elif old_files:
                        logging.info(f"‚ÑπÔ∏è –í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã —É–∂–µ –µ—Å—Ç—å –≤ –Ω–æ–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ")
            else:
                logging.info(f"‚ÑπÔ∏è –¢–∞–±–ª–∏—Ü–∞ 'message_template_files' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü–µ: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã delayed_message_files –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É
        async with db.execute('''
            SELECT content FROM message_templates WHERE id = ?
        ''', (template_id,)) as cursor:
            row = await cursor.fetchone()
            if row and row[0]:
                content = row[0]
                
                async with db.execute('''
                    SELECT dmf.* FROM delayed_message_files dmf
                    JOIN delayed_messages dm ON dmf.delayed_message_id = dm.id
                    WHERE dm.content = ?
                    ORDER BY dmf.created_at ASC
                ''', (content,)) as cursor:
                    rows = await cursor.fetchall()
                    delayed_files = [dict(zip([column[0] for column in cursor.description], row)) for row in rows]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É
                    existing_paths = {f.get('file_path', '') for f in all_files}
                    unique_delayed_files = []
                    
                    for delayed_file in delayed_files:
                        delayed_file_path = delayed_file.get('file_path', '')
                        if delayed_file_path not in existing_paths:
                            unique_delayed_files.append(delayed_file)
                            existing_paths.add(delayed_file_path)
                    
                    all_files.extend(unique_delayed_files)
                    if unique_delayed_files:
                        logging.info(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(unique_delayed_files)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ 'delayed_message_files' –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template_id}")
                    elif delayed_files:
                        logging.info(f"‚ÑπÔ∏è –í—Å–µ —Ñ–∞–π–ª—ã –∏–∑ delayed_message_files —É–∂–µ –µ—Å—Ç—å –≤ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        logging.info(f"üìÅ –ò—Ç–æ–≥–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —à–∞–±–ª–æ–Ω–∞ {template_id}: {len(all_files)}")
        return all_files

async def delete_message_template_files(template_id: int):
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        files = await get_message_template_files(template_id)
        for file_info in files:
            try:
                if os.path.exists(file_info['file_path']):
                    os.remove(file_info['file_path'])
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {file_info['file_path']}: {e}")
        
        # –û—á–∏—â–∞–µ–º –∫–æ–ª–æ–Ω–∫—É files –≤ message_templates
        await db.execute('UPDATE message_templates SET files = NULL WHERE id = ?', (template_id,))
        
        # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
        await db.execute('DELETE FROM message_template_files WHERE template_id = ?', (template_id,))
        await db.commit()

async def delete_message_template_file(file_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ ID"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('DELETE FROM message_template_files WHERE id = ?', (file_id,))
        await db.commit()
        return True

async def delete_message_template_file_by_name(template_id: int, file_name: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª —à–∞–±–ª–æ–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ files
        cursor = await db.execute('SELECT files FROM message_templates WHERE id = ?', (template_id,))
        row = await cursor.fetchone()
        current_files = []
        
        if row and row[0]:
            import json
            try:
                current_files = json.loads(row[0])
            except:
                current_files = []
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ —Å–ø–∏—Å–∫–∞
        updated_files = [f for f in current_files if f.get('file_name') != file_name]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        files_json = json.dumps(updated_files)
        await db.execute('''
            UPDATE message_templates SET files = ? WHERE id = ?
        ''', (files_json, template_id))
        
        # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º –∏–∑ —Å—Ç–∞—Ä–æ–π —Ç–∞–±–ª–∏—Ü—ã
        await db.execute('''
            DELETE FROM message_template_files 
            WHERE template_id = ? AND file_name = ?
        ''', (template_id, file_name))
        
        await db.commit()
        return True
async def delete_delayed_message_file(file_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    async def _delete_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            await configure_db_connection(db)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å –¥–∏—Å–∫–∞
            cursor = await db.execute('''
                SELECT file_path FROM delayed_message_files WHERE id = ?
            ''', (file_id,))
            file_row = await cursor.fetchone()
            
            if file_row:
                file_path = file_row[0]
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
                try:
                    import os
                    if os.path.exists(file_path):
                        os.remove(file_path)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –¥–∏—Å–∫–∞: {e}")
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await db.execute('''
                    DELETE FROM delayed_message_files WHERE id = ?
                ''', (file_id,))
                await db.commit()
                return True
            return False
    
    return await safe_db_operation(_delete_operation)

async def delete_delayed_message_file_by_name(delayed_message_id: int, file_name: str) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Ñ–∞–π–ª –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∏–º–µ–Ω–∏"""
    async def _delete_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            await configure_db_connection(db)
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å –¥–∏—Å–∫–∞
            cursor = await db.execute('''
                SELECT id, file_path FROM delayed_message_files 
                WHERE delayed_message_id = ? AND file_name = ?
            ''', (delayed_message_id, file_name))
            file_row = await cursor.fetchone()
            
            if file_row:
                file_id, file_path = file_row
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å –¥–∏—Å–∫–∞
                try:
                    import os
                    if os.path.exists(file_path):
                        os.remove(file_path)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å –¥–∏—Å–∫–∞: {e}")
                
                # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
                await db.execute('''
                    DELETE FROM delayed_message_files WHERE id = ?
                ''', (file_id,))
                await db.commit()
                return True
            return False
    
    return await safe_db_operation(_delete_operation)

# --- –†–∞–±–æ—Ç–∞ —Å —Ç–∞–π–º–µ—Ä–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ —ç—Ç–∞–ø–∞—Ö ---

async def create_or_update_user_timer(user_id: int, order_id: int, order_step: str, product_type: str = None) -> bool:
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–π–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —ç—Ç–∞–ø–µ"""
    async def _timer_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            await configure_db_connection(db)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–∑–∞–∫–∞–∑–∞/—ç—Ç–∞–ø–∞ (–∞–∫—Ç–∏–≤–Ω—ã–π –∏–ª–∏ –Ω–µ—Ç)
            cursor = await db.execute('''
                SELECT id, is_active FROM user_step_timers 
                WHERE user_id = ? AND order_id = ? AND order_step = ?
            ''', (user_id, order_id, order_step))
            existing = await cursor.fetchone()
            
            if existing:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–∞–π–º–µ—Ä (–¥–µ–ª–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è)
                await db.execute('''
                    UPDATE user_step_timers 
                    SET step_started_at = CURRENT_TIMESTAMP,
                        step_updated_at = CURRENT_TIMESTAMP,
                        product_type = COALESCE(?, product_type),
                        is_active = 1
                    WHERE id = ?
                ''', (product_type, existing[0]))
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∑–∞–∫–∞–∑ {order_id}, —ç—Ç–∞–ø {order_step}")
            else:
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è/–∑–∞–∫–∞–∑–∞
                await db.execute('''
                    UPDATE user_step_timers 
                    SET is_active = 0 
                    WHERE user_id = ? AND order_id = ? AND is_active = 1
                ''', (user_id, order_id))
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä
                await db.execute('''
                    INSERT INTO user_step_timers 
                    (user_id, order_id, order_step, product_type, step_started_at, step_updated_at, is_active)
                    VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 1)
                ''', (user_id, order_id, order_step, product_type))
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∑–∞–∫–∞–∑ {order_id}, —ç—Ç–∞–ø {order_step}")
            
            await db.commit()
            return True
    
    return await safe_db_operation(_timer_operation)

async def get_users_ready_for_messages() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –≥–æ—Ç–æ–≤—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, –∏—Å–∫–ª—é—á–∞—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
        cursor = await db.execute('''
            SELECT DISTINCT
                t.id as timer_id,
                t.user_id,
                t.order_id,
                t.order_step,
                t.product_type,
                t.step_started_at,
                mt.id as template_id,
                mt.message_type,
                mt.content,
                mt.delay_minutes,
                mt.name as template_name
            FROM user_step_timers t
            JOIN message_templates mt ON (
                (t.order_step = 'product_selected' AND mt.order_step = 'product_selected') OR
                (t.order_step = 'collecting_facts' AND t.product_type = '–ü–µ—Å–Ω—è' AND mt.order_step = 'song_collecting_facts') OR
                (t.order_step = 'collecting_facts' AND t.product_type = '–ö–Ω–∏–≥–∞' AND mt.order_step = 'book_collecting_facts') OR
                (t.order_step = 'waiting_demo_song' AND mt.order_step = 'waiting_demo_song') OR
                (t.order_step = 'waiting_demo_book' AND mt.order_step = 'waiting_demo_book') OR
                (t.order_step = 'demo_received_song' AND mt.order_step = 'demo_received_song') OR
                (t.order_step = 'demo_received_book' AND mt.order_step = 'demo_received_book') OR
                (t.order_step = 'story_selection' AND mt.order_step = 'story_selection') OR
                (t.order_step = 'answering_questions' AND mt.order_step = 'answering_questions') OR
                (t.order_step = 'waiting_full_song' AND mt.order_step = 'waiting_full_song') OR
                (t.order_step = 'waiting_main_book' AND mt.order_step = 'waiting_main_book') OR
                (t.order_step = mt.order_step)
            )
            LEFT JOIN timer_messages_sent tms ON (
                t.id = tms.timer_id AND 
                mt.id = tms.template_id AND 
                mt.delay_minutes = tms.delay_minutes
            )
            WHERE t.is_active = 1 
            AND mt.is_active = 1
            AND datetime(t.step_started_at, '+' || mt.delay_minutes || ' minutes') <= datetime('now')
            AND tms.id IS NULL
            ORDER BY t.step_started_at ASC, mt.delay_minutes ASC
        ''')
        
        rows = await cursor.fetchall()
        return [dict(row) for row in rows]

async def is_timer_message_sent(timer_id: int, template_id: int, delay_minutes: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞/—à–∞–±–ª–æ–Ω–∞/–∑–∞–¥–µ—Ä–∂–∫–∏"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            SELECT id FROM timer_messages_sent 
            WHERE timer_id = ? AND template_id = ? AND delay_minutes = ?
        ''', (timer_id, template_id, delay_minutes))
        result = await cursor.fetchone()
        return result is not None

async def log_timer_message_sent(timer_id: int, template_id: int, user_id: int, order_id: int, message_type: str, delay_minutes: int) -> bool:
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Ñ–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —Ç–∞–π–º–µ—Ä—É"""
    async def _log_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            await configure_db_connection(db)
            
            await db.execute('''
                INSERT OR IGNORE INTO timer_messages_sent 
                (timer_id, template_id, user_id, order_id, message_type, delay_minutes)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (timer_id, template_id, user_id, order_id, message_type, delay_minutes))
            await db.commit()
            return True
    
    return await safe_db_operation(_log_operation)

async def deactivate_user_timers(user_id: int, order_id: int) -> bool:
    """–î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–∫–∞–∑–∞ (–ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏)"""
    async def _deactivate_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            await configure_db_connection(db)
            
            await db.execute('''
                UPDATE user_step_timers 
                SET is_active = 0 
                WHERE user_id = ? AND order_id = ?
            ''', (user_id, order_id))
            await db.commit()
            
            cursor = await db.execute('SELECT changes()')
            changes = await cursor.fetchone()
            print(f"‚úÖ –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {changes[0]} —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, –∑–∞–∫–∞–∑ {order_id}")
            return True
    
    return await safe_db_operation(_deactivate_operation)

async def get_active_timers_for_order(order_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã –¥–ª—è –∑–∞–∫–∞–∑–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('''
            SELECT id, user_id, order_id, order_step, product_type, step_started_at, is_active
            FROM user_step_timers 
            WHERE order_id = ? AND is_active = 1
            ORDER BY step_started_at DESC
        ''', (order_id,))
        rows = await cursor.fetchall()
        return [dict(row) for row in rows]

async def get_pending_delayed_messages():
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('''
            SELECT id, order_id, user_id, message_type, content, delay_minutes, created_at, scheduled_at, is_automatic, order_step, is_active, usage_count, last_used
            FROM delayed_messages 
            WHERE status = 'pending' AND scheduled_at <= datetime('now') AND is_active = 1
            ORDER BY scheduled_at ASC
        ''')
        messages = await cursor.fetchall()
        print(f"üîç –û–¢–õ–ê–î–ö–ê: get_pending_delayed_messages –Ω–∞–π–¥–µ–Ω–æ: {len(messages)}")
        for message in messages:
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –°–æ–æ–±—â–µ–Ω–∏–µ {message['id']}, —Ç–∏–ø: {message['message_type']}, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ: {message['is_automatic']}, —à–∞–≥: {message['order_step']}, –∞–∫—Ç–∏–≤–µ–Ω: {message['is_active']}, –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {message['scheduled_at']}")
        return [dict(message) for message in messages]

async def get_delayed_message_templates() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã message_templates"""
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ message_templates
        cursor = await db.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='message_templates'
        """)
        table_exists = await cursor.fetchone()
        
        if table_exists:
            # –ü–æ–ª—É—á–∞–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã message_templates
            cursor = await db.execute('''
                SELECT mt.id, NULL as order_id, NULL as user_id, mt.manager_id, 
                       mt.message_type, mt.content, mt.delay_minutes, 
                       'active' as status, mt.created_at, NULL as scheduled_at, NULL as sent_at, 
                       1 as is_automatic, mt.order_step, 
                       0 as story_batch, NULL as story_pages, NULL as selected_stories, 
                       mt.is_active, 0 as usage_count, NULL as last_used, mt.name
                FROM message_templates mt
                WHERE mt.is_active = 1
                ORDER BY mt.order_step, mt.delay_minutes, mt.created_at DESC
            ''')
        else:
            # –ï—Å–ª–∏ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            cursor = await db.execute('''
                SELECT id, order_id, user_id, manager_id, message_type, content, delay_minutes, 
                       status, created_at, scheduled_at, sent_at, is_automatic, order_step, 
                       story_batch, story_pages, selected_stories, is_active, usage_count, last_used,
                       message_type as name
                FROM delayed_messages 
                WHERE order_id IS NULL
                ORDER BY message_type, created_at DESC
            ''')
        
        messages = await cursor.fetchall()
        result = []
        for message in messages:
            msg_dict = dict(message)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º None –≤ None –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            if msg_dict['scheduled_at'] is None:
                msg_dict['scheduled_at'] = None
            if msg_dict['sent_at'] is None:
                msg_dict['sent_at'] = None
            if msg_dict['last_used'] is None:
                msg_dict['last_used'] = None
            result.append(msg_dict)
        return result

async def toggle_template_active(template_id: int, is_active: bool) -> bool:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —à–∞–±–ª–æ–Ω–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            UPDATE delayed_messages 
            SET is_active = ? 
            WHERE id = ?
        ''', (is_active, template_id))
        await db.commit()
        return True

async def increment_template_usage(template_id: int) -> bool:
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π —à–∞–±–ª–æ–Ω–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            UPDATE delayed_messages 
            SET usage_count = usage_count + 1, last_used = datetime('now')
            WHERE id = ?
        ''', (template_id,))
        await db.commit()
        return True

async def get_all_orders() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('''
            SELECT id, user_id, status, order_data, created_at
            FROM orders 
            ORDER BY created_at DESC
        ''')
        orders = await cursor.fetchall()
        return [dict(order) for order in orders]

async def get_active_orders_by_step(order_step: str) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —à–∞–≥–µ"""
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        
        # –ú–∞–ø–ø–∏–Ω–≥ —à–∞–≥–æ–≤ –∑–∞–∫–∞–∑–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å—ã
        step_to_status = {
            'waiting_for_payment': ['pending'],
            'waiting_for_email': ['paid', 'demo_sent', 'waiting_draft'],  # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            'waiting_for_privacy_consent': ['email_received'],
            'waiting_for_hero_photos': ['privacy_consent_received'],
            'waiting_for_other_heroes': ['hero_photos_received'],
            'waiting_for_story_selection': ['other_heroes_received'],
            'waiting_for_style_selection': ['story_selected'],
            'waiting_for_voice_selection': ['style_selected'],
            'waiting_for_draft': ['voice_selected'],
            'waiting_for_final': ['draft_received'],
            'completed': ['ready', 'delivered']
        }
        
        statuses = step_to_status.get(order_step, [])
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –®–∞–≥ {order_step} -> —Å—Ç–∞—Ç—É—Å—ã: {statuses}")
        
        if not statuses:
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è —à–∞–≥–∞ {order_step}")
            return []
        
        placeholders = ','.join(['?' for _ in statuses])
        query = f'''
            SELECT id, user_id, status, order_data
            FROM orders 
            WHERE status IN ({placeholders}) AND status NOT IN ('completed', 'cancelled', 'failed')
            ORDER BY created_at DESC
        '''
        print(f"üîç –û–¢–õ–ê–î–ö–ê: SQL –∑–∞–ø—Ä–æ—Å: {query}")
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {statuses}")
        
        cursor = await db.execute(query, statuses)
        
        orders = await cursor.fetchall()
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}")
        for order in orders:
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order['id']}, —Å—Ç–∞—Ç—É—Å: {order['status']}, user_id: {order['user_id']}")
        
        return [dict(order) for order in orders]

async def update_delayed_message_status(message_id: int, status: str):
    async def _update_operation():
        async with aiosqlite.connect(DB_PATH) as db:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await configure_db_connection(db)
            
            await db.execute('''
                UPDATE delayed_messages SET status = ?, sent_at = datetime('now') WHERE id = ?
            ''', (status, message_id))
            await db.commit()
    
    await safe_db_operation(_update_operation)

async def log_general_message_sent(delayed_message_id: int, user_id: int, order_id: int):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫—É –æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    async with aiosqlite.connect(DB_PATH) as db:
        try:
            await db.execute('''
                INSERT OR IGNORE INTO general_message_sent_log (delayed_message_id, user_id, order_id)
                VALUES (?, ?, ?)
            ''', (delayed_message_id, user_id, order_id))
            await db.commit()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def is_general_message_sent_to_user(delayed_message_id: int, user_id: int, order_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –±—ã–ª–æ –ª–∏ –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('''
            SELECT id FROM general_message_sent_log 
            WHERE delayed_message_id = ? AND user_id = ? AND order_id = ?
        ''', (delayed_message_id, user_id, order_id))
        row = await cursor.fetchone()
        return row is not None

# --- –†–∞–±–æ—Ç–∞ —Å –∞–¥—Ä–µ—Å–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ ---

async def save_delivery_address(order_id: int, user_id: int, address: str, recipient_name: str = None, phone: str = None):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            INSERT INTO delivery_addresses (order_id, user_id, address, recipient_name, phone, created_at)
            VALUES (?, ?, ?, ?, ?, datetime('now'))
        ''', (order_id, user_id, address, recipient_name, phone))
        await db.commit()

async def get_delivery_address(order_id: int):
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑
        cursor = await db.execute('''
            SELECT id FROM orders WHERE id = ?
        ''', (order_id,))
        order_exists = await cursor.fetchone()
        
        if not order_exists:
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
        
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—â–µ–º –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏
        cursor = await db.execute('''
            SELECT * FROM delivery_addresses WHERE order_id = ? ORDER BY created_at DESC LIMIT 1
        ''', (order_id,))
        address = await cursor.fetchone()
        return dict(address) if address else None

async def log_order_status_change(order_id: int, old_status: str, new_status: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await log_order_status_change_with_db(db, order_id, old_status, new_status)
        await db.commit()

async def log_order_status_change_with_db(db, order_id: int, old_status: str, new_status: str):
    """–õ–æ–≥–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞, –∏—Å–ø–æ–ª—å–∑—É—è –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    await db.execute('''
        INSERT INTO order_status_history (order_id, old_status, new_status, changed_at)
        VALUES (?, ?, ?, datetime('now'))
    ''', (order_id, old_status, new_status))

async def get_order_status_history(order_id: int) -> List[Dict]:
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT * FROM order_status_history WHERE order_id = ? ORDER BY changed_at ASC
        ''', (order_id,)) as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def add_message_history(order_id: int, sender: str, message: str):
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(f'''
            INSERT INTO message_history (order_id, sender, message, sent_at)
            VALUES (?, ?, ?, {get_moscow_time()})
        ''', (order_id, sender, message))
        await db.commit()
async def save_early_user_message(user_id: int, message: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–∞–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(f'''
            INSERT INTO early_user_messages (user_id, message, sent_at)
            VALUES (?, ?, {get_moscow_time()})
        ''', (user_id, message))
        await db.commit()

async def get_early_user_messages(user_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT message, sent_at FROM early_user_messages 
            WHERE user_id = ? 
            ORDER BY sent_at ASC
        ''', (user_id,)) as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def transfer_early_messages_to_order(user_id: int, order_id: int):
    """–ü–µ—Ä–µ–Ω–æ—Å–∏—Ç —Ä–∞–Ω–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é –∑–∞–∫–∞–∑–∞"""
    early_messages = await get_early_user_messages(user_id)
    for msg in early_messages:
        await add_message_history(order_id, "user", msg['message'])
    
    # –£–¥–∞–ª—è–µ–º –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            DELETE FROM early_user_messages WHERE user_id = ?
        ''', (user_id,))
        await db.commit()

async def get_message_history(order_id: int) -> List[Dict]:
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT * FROM message_history WHERE order_id = ? ORDER BY sent_at ASC
        ''', (order_id,)) as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows] 

async def get_order_timeline(order_id: int) -> dict:
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —ç—Ç–∞–ø—ã
    STAGES = [
        ("created", "–°—Ç–∞—Ä—Ç"),
        ("product_selected", "–í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞"),
        ("payment_pending", "–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã"),
        ("paid", "–û–ø–ª–∞—á–µ–Ω"),
        ("waiting_draft", "–û–∂–∏–¥–∞–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞"),
        ("draft_sent", "–ß–µ—Ä–Ω–æ–≤–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω"),
        ("editing", "–í–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫"),
        ("waiting_final", "–û–∂–∏–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª–∞"),
        ("ready", "–§–∏–Ω–∞–ª—å–Ω–∞—è –≥–æ—Ç–æ–≤–∞"),
        ("delivered", "–î–æ—Å—Ç–∞–≤–∫–∞")
    ]
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞—Ç—É—Å–æ–≤
    history = await get_order_status_history(order_id)
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑
    order = await get_order(order_id)
    timeline = []
    last_time = order["created_at"] if order else None
    now = datetime.utcnow()
    active_found = False
    for stage_code, stage_name in STAGES:
        # –ù–∞–π—Ç–∏ –ø–µ—Ä–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏–∏, –≥–¥–µ new_status == stage_code
        entry = next((h for h in history if h["new_status"] == stage_code), None)
        if entry:
            timeline.append({
                "code": stage_code,
                "name": stage_name,
                "status": "completed",
                "changed_at": entry["changed_at"],
                "inactive_for": None
            })
            last_time = entry["changed_at"]
        elif not active_found:
            # –ü–µ—Ä–≤—ã–π –Ω–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–π —ç—Ç–∞–ø ‚Äî –∞–∫—Ç–∏–≤–Ω—ã–π
            active_found = True
            # inactive_for = now - last_time
            if last_time:
                last_dt = datetime.strptime(last_time, "%Y-%m-%d %H:%M:%S")
                inactive_for = (now - last_dt).total_seconds()
            else:
                inactive_for = None
            timeline.append({
                "code": stage_code,
                "name": stage_name,
                "status": "active",
                "changed_at": last_time,
                "inactive_for": inactive_for
            })
        else:
            timeline.append({
                "code": stage_code,
                "name": stage_name,
                "status": "pending",
                "changed_at": None,
                "inactive_for": None
            })
    return {
        "timeline": timeline,
        "active_stage": next((t for t in timeline if t["status"] == "active"), None),
        "last_action_time": last_time,
        "inactive_for": timeline[-1]["inactive_for"] if timeline and timeline[-1]["status"] == "active" else None
    }

# --- –†–∞–±–æ—Ç–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º–∏ ---

async def get_managers() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏ (–±–µ–∑ –ø–∞—Ä–æ–ª–µ–π)"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT id, email, COALESCE(full_name, '') as full_name, is_super_admin FROM managers ORDER BY id DESC
        ''') as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def get_managers_for_auth() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—Å —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–æ–ª—è–º–∏)"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT id, email, hashed_password, full_name, is_super_admin FROM managers ORDER BY id DESC
        ''') as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def get_regular_managers() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–Ω–µ –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤)"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT id, email, COALESCE(full_name, '') as full_name, is_super_admin FROM managers 
            WHERE is_super_admin = 0 ORDER BY id DESC
        ''') as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def add_manager(email: str, password: str, full_name: str, is_super_admin: bool = False) -> int:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        hashed_password = get_password_hash(password)
        cursor = await db.execute('''
            INSERT INTO managers (email, hashed_password, full_name, is_super_admin)
            VALUES (?, ?, ?, ?)
        ''', (email, hashed_password, full_name, is_super_admin))
        await db.commit()
        return cursor.lastrowid

async def delete_manager(manager_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ ID"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('DELETE FROM managers WHERE id = ?', (manager_id,))
        await db.commit()
        return cursor.rowcount > 0

async def get_manager_by_email(email: str) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ email"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT id, email, hashed_password, full_name, is_super_admin FROM managers WHERE email = ?
        ''', (email,)) as cursor:
            row = await cursor.fetchone()
            if row:
                return dict(zip([column[0] for column in cursor.description], row))
            return None

async def get_manager_by_id(manager_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ ID"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT id, email, hashed_password, full_name, is_super_admin FROM managers WHERE id = ?
        ''', (manager_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                return dict(zip([column[0] for column in cursor.description], row))
            return None
async def update_manager_profile(manager_id: int, full_name: Optional[str] = None, new_password: Optional[str] = None) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
            updates = []
            params = []
            
            if full_name is not None:
                updates.append("full_name = ?")
                params.append(full_name)
            
            if new_password is not None:
                updates.append("hashed_password = ?")
                params.append(get_password_hash(new_password))
            
            if not updates:
                return True  # –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
            
            params.append(manager_id)
            query = f"UPDATE managers SET {', '.join(updates)} WHERE id = ?"
            
            await db.execute(query, params)
            await db.commit()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
            return False

async def update_manager_super_admin_status(manager_id: int, is_super_admin: bool) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        try:
            await db.execute('''
                UPDATE managers SET is_super_admin = ? WHERE id = ?
            ''', (is_super_admin, manager_id))
            await db.commit()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞: {e}")
            return False

async def get_next_manager_in_queue() -> Optional[int]:
    """–ü–æ–ª—É—á–∞–µ—Ç ID —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    print("üîç –û–¢–õ–ê–î–ö–ê: get_next_manager_in_queue() –≤—ã–∑–≤–∞–Ω–∞")
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–ù–ï —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤)
        async with db.execute('''
            SELECT id FROM managers WHERE is_super_admin = 0 ORDER BY id ASC
        ''') as cursor:
            managers = await cursor.fetchall()
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ (–Ω–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤): {len(managers)}")
        
        if not managers:
            print("üîç –û–¢–õ–ê–î–ö–ê: –ù–µ—Ç –æ–±—ã—á–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –ø—Ä–æ–±—É–µ–º –≤—Å–µ—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤")
            # –ï—Å–ª–∏ –Ω–µ—Ç –æ–±—ã—á–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤, –±–µ—Ä–µ–º –≤—Å–µ—Ö
            async with db.execute('''
                SELECT id FROM managers ORDER BY id ASC
            ''') as cursor:
                managers = await cursor.fetchall()
            
            if not managers:
                print("üîç –û–¢–õ–ê–î–ö–ê: –ù–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –≤–æ–æ–±—â–µ")
                return None
        
        manager_ids = [m[0] for m in managers]
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–Ω–µ–¥–∂–µ—Ä—ã –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {manager_ids}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏–∑ –æ—á–µ—Ä–µ–¥–∏
        async with db.execute('''
            SELECT last_manager_id FROM manager_queue WHERE id = 1
        ''') as cursor:
            result = await cursor.fetchone()
            last_manager_id = result[0] if result else 0
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä: {last_manager_id}")
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        if last_manager_id == 0:
            next_manager_id = manager_ids[0]
        else:
            try:
                current_index = manager_ids.index(last_manager_id)
                next_index = (current_index + 1) % len(manager_ids)
                next_manager_id = manager_ids[next_index]
            except ValueError:
                next_manager_id = manager_ids[0]
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –í—ã–±—Ä–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä ID {next_manager_id} –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
        await db.execute('''
            UPDATE manager_queue SET last_manager_id = ? WHERE id = 1
        ''', (next_manager_id,))
        await db.commit()
        
        return next_manager_id

async def is_super_admin(email: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT is_super_admin FROM managers WHERE email = ?
        ''', (email,)) as cursor:
            row = await cursor.fetchone()
            return row[0] == 1 if row else False

async def get_manager_orders(manager_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT o.*, o.user_id as telegram_id, u.product, m.email as manager_email, m.full_name as manager_name 
            FROM orders o 
            LEFT JOIN user_profiles u ON o.user_id = u.user_id 
            LEFT JOIN managers m ON o.assigned_manager_id = m.id 
            WHERE o.assigned_manager_id = ? 
            ORDER BY o.created_at DESC
        ''', (manager_id,)) as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows] 

async def get_orders_with_permissions(manager_email: str, status: Optional[str] = None, page: int = 1, limit: int = 50) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–∫–∞–∑—ã —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
        is_admin = await is_super_admin(manager_email)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        offset = (page - 1) * limit
        
        if is_admin:
            # –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã
            if status:
                query = '''
                    SELECT o.*, o.user_id as telegram_id, u.username, u.first_name, u.last_name, m.email as manager_email, m.full_name as manager_name,
                           notif.id as notification_id, notif.is_read as notification_is_read, notif.last_user_message_at as notification_last_message_at
                    FROM orders o 
                    LEFT JOIN user_profiles u ON o.user_id = u.user_id 
                    LEFT JOIN managers m ON o.assigned_manager_id = m.id 
                    LEFT JOIN order_notifications notif ON o.id = notif.order_id
                    WHERE o.status = ? 
                    ORDER BY o.created_at DESC
                    LIMIT ? OFFSET ?
                '''
                args = (status, limit, offset)
            else:
                query = '''
                    SELECT o.*, o.user_id as telegram_id, u.username, u.first_name, u.last_name, m.email as manager_email, m.full_name as manager_name,
                           notif.id as notification_id, notif.is_read as notification_is_read, notif.last_user_message_at as notification_last_message_at
                    FROM orders o 
                    LEFT JOIN user_profiles u ON o.user_id = u.user_id 
                    LEFT JOIN managers m ON o.assigned_manager_id = m.id 
                    LEFT JOIN order_notifications notif ON o.id = notif.order_id
                    ORDER BY o.created_at DESC
                    LIMIT ? OFFSET ?
                '''
                args = (limit, offset)
        else:
            # –û–±—ã—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã
            manager = await get_manager_by_email(manager_email)
            if not manager:
                return []
            
            if status:
                query = '''
                    SELECT o.*, o.user_id as telegram_id, u.username, u.first_name, u.last_name, m.email as manager_email, m.full_name as manager_name,
                           notif.id as notification_id, notif.is_read as notification_is_read, notif.last_user_message_at as notification_last_message_at
                    FROM orders o 
                    LEFT JOIN managers m ON o.assigned_manager_id = m.id 
                    LEFT JOIN user_profiles u ON o.user_id = u.user_id 
                    LEFT JOIN order_notifications notif ON o.id = notif.order_id AND notif.manager_id = ?
                    WHERE o.assigned_manager_id = ? AND o.status = ? 
                    ORDER BY o.created_at DESC
                    LIMIT ? OFFSET ?
                '''
                args = (manager["id"], manager["id"], status, limit, offset)
            else:
                query = '''
                    SELECT o.*, o.user_id as telegram_id, u.username, u.first_name, u.last_name, m.email as manager_email, m.full_name as manager_name,
                           notif.id as notification_id, notif.is_read as notification_is_read, notif.last_user_message_at as notification_last_message_at
                    FROM orders o 
                    LEFT JOIN managers m ON o.assigned_manager_id = m.id 
                    LEFT JOIN user_profiles u ON o.user_id = u.user_id 
                    LEFT JOIN order_notifications notif ON o.id = notif.order_id AND notif.manager_id = ?
                    WHERE o.assigned_manager_id = ? 
                    ORDER BY o.created_at DESC
                    LIMIT ? OFFSET ?
                '''
                args = (manager["id"], manager["id"], limit, offset)
        
        async with db.execute(query, args) as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def get_last_order_username(user_id: int) -> Optional[str]:
    """–ü–æ–ª—É—á–∞–µ—Ç username –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT u.username 
            FROM orders o 
            LEFT JOIN user_profiles u ON o.user_id = u.user_id 
            WHERE o.user_id = ? 
            ORDER BY o.created_at DESC 
            LIMIT 1
        ''', (user_id,)) as cursor:
            row = await cursor.fetchone()
            return row[0] if row and row[0] else None

async def get_orders_filtered_with_permissions(
    manager_email: str,
    status: Optional[str] = None,
    order_type: Optional[str] = None,
    telegram_id: Optional[str] = None,
    order_id: Optional[int] = None,
    sort_by: str = 'created_at',
    sort_dir: str = 'desc',
) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
        is_admin = await is_super_admin(manager_email)
        
        query = '''
            SELECT o.*, o.user_id as telegram_id, u.product, u.username, u.first_name, u.last_name, m.email as manager_email, m.full_name as manager_name, d.phone
            FROM orders o 
            LEFT JOIN user_profiles u ON o.user_id = u.user_id 
            LEFT JOIN managers m ON o.assigned_manager_id = m.id 
            LEFT JOIN delivery_addresses d ON o.id = d.order_id
            WHERE 1=1
        '''
        args = []
        
        if not is_admin:
            # –û–±—ã—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã
            manager = await get_manager_by_email(manager_email)
            if not manager:
                return []
            query += ' AND o.assigned_manager_id = ?'
            args.append(manager["id"])
        
        if status:
            query += ' AND o.status = ?'
            args.append(status)
        if order_type:
            query += ' AND u.product = ?'
            args.append(order_type)
        if telegram_id:
            query += ' AND o.user_id = ?'
            args.append(int(telegram_id))
        if order_id:
            query += ' AND o.id = ?'
            args.append(order_id)
        if sort_by not in ['created_at', 'status', 'id']:
            sort_by = 'created_at'
        if sort_dir.lower() not in ['asc', 'desc']:
            sort_dir = 'desc'
        query += f' ORDER BY o.{sort_by} {sort_dir.upper()}'
        
        # –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º SQL –∑–∞–ø—Ä–æ—Å
        print(f"üîç –û–¢–õ–ê–î–ö–ê SQL –∑–∞–ø—Ä–æ—Å: {query}")
        print(f"üîç –û–¢–õ–ê–î–ö–ê SQL –∞—Ä–≥—É–º–µ–Ω—Ç—ã: {args}")
        
        async with db.execute(query, args) as cursor:
            rows = await cursor.fetchall()
            result = [dict(zip([column[0] for column in cursor.description], row)) for row in rows]
            
            # –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö
            print(f"üîç –û–¢–õ–ê–î–ö–ê get_orders_filtered_with_permissions: –ø–æ–ª—É—á–µ–Ω–æ {len(result)} –∑–∞–∫–∞–∑–æ–≤")
            for i, order in enumerate(result[:3]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–∫–∞–∑–∞
                print(f"  –ó–∞–∫–∞–∑ {i+1}: ID={order.get('id')}, product={order.get('product')}, user_id={order.get('user_id')}")
            
            return result

async def can_access_order(manager_email: str, order_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫–∞–∑—É"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
        is_admin = await is_super_admin(manager_email)
        
        if is_admin:
            return True
        
        # –û–±—ã—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –∫ —Å–≤–æ–∏–º –∑–∞–∫–∞–∑–∞–º
        manager = await get_manager_by_email(manager_email)
        if not manager:
            return False
        
        async with db.execute('''
            SELECT assigned_manager_id FROM orders WHERE id = ?
        ''', (order_id,)) as cursor:
            row = await cursor.fetchone()
            if not row:
                return False
            
            return row[0] == manager["id"] 

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ ---

async def get_all_photos() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –∏ order_data"""
    import glob
    import os
    from datetime import datetime
    
    print("üîç –û–¢–õ–ê–î–ö–ê: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
    
    async with aiosqlite.connect(DB_PATH) as db:
        photos = []
        processed_files = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        
        # Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º
        def add_photo(id, order_id, filename, type, created_at, base_dir="uploads"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
            file_key = f"{order_id}_{filename}_{type}"
            if file_key in processed_files:
                print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç {file_key}")
                return
            processed_files.add(file_key)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Ñ–∏–∑–∏—á–µ—Å–∫–∏
            file_path = os.path.join(base_dir, filename)
            if not os.path.exists(file_path):
                print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return
            
            photo_data = {
                "id": id,
                "order_id": order_id,
                "filename": filename,
                "type": type,
                "created_at": created_at,
                "path": f"{base_dir}/{filename}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ —Å–ª–µ—à–∏ –¥–ª—è –≤–µ–±-–ø—É—Ç–µ–π
            }
            photos.append(photo_data)
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –≤ –º–∞—Å—Å–∏–≤: {photo_data}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ order_data (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≥–µ—Ä–æ–µ–≤)
        async with db.execute('''
            SELECT id, id as order_id, order_data, created_at
            FROM orders
            WHERE order_data IS NOT NULL AND order_data != ''
        ''') as cursor:
            rows = await cursor.fetchall()
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ {len(rows)} –∑–∞–∫–∞–∑–æ–≤ —Å order_data")
            for row in rows:
                order_id = row[1]
                order_data_str = row[2]
                created_at = row[3]
                print(f"üîç –û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ {order_id}")
                
                try:
                    order_data = json.loads(order_data_str)
                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order_id}, order_data –∫–ª—é—á–∏: {list(order_data.keys())}")
                    
                    # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è
                    main_hero_photos = order_data.get('main_hero_photos', [])
                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order_id}, main_hero_photos: {main_hero_photos}")
                    
                    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    main_face_1 = order_data.get('main_face_1')
                    main_face_2 = order_data.get('main_face_2')
                    main_full = order_data.get('main_full')
                    joint_photo = order_data.get('joint_photo')
                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order_id}, main_face_1: {main_face_1}, main_face_2: {main_face_2}, main_full: {main_full}, joint_photo: {joint_photo}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É main_hero_photos (–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤)
                    if isinstance(main_hero_photos, list):
                        for photo_obj in main_hero_photos:
                            if isinstance(photo_obj, dict):
                                # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {'type': 'face_1', 'filename': '...'}
                                photo_filename = photo_obj.get('filename')
                                photo_type = photo_obj.get('type', 'main_hero')
                                if photo_filename and photo_filename != "-":
                                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ {photo_filename} —Å —Ç–∏–ø–æ–º {photo_type}")
                                    add_photo(len(photos) + 1, order_id, photo_filename, photo_type, created_at)
                            elif isinstance(photo_obj, str):
                                # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
                                photo_filename = photo_obj
                                if photo_filename and photo_filename != "-":
                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                                    if "main_face_1" in photo_filename:
                                        photo_type = "main_hero"
                                    elif "main_face_2" in photo_filename:
                                        photo_type = "main_hero"
                                    elif "main_full" in photo_filename:
                                        photo_type = "main_hero"
                                    else:
                                        photo_type = f"main_hero"
                                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ {photo_filename} —Å —Ç–∏–ø–æ–º {photo_type}")
                                    add_photo(len(photos) + 1, order_id, photo_filename, photo_type, created_at)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
                    if main_face_1 and main_face_1 != "-":
                        print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º main_face_1 {main_face_1}")
                        add_photo(len(photos) + 1, order_id, main_face_1, "main_face_1", created_at)
                    
                    if main_face_2 and main_face_2 != "-":
                        print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º main_face_2 {main_face_2}")
                        add_photo(len(photos) + 1, order_id, main_face_2, "main_face_2", created_at)
                    
                    if main_full and main_full != "-":
                        print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º main_full {main_full}")
                        add_photo(len(photos) + 1, order_id, main_full, "main_full", created_at)
                    
                    # –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ
                    joint_photo = order_data.get('joint_photo')
                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order_id}, joint_photo: {joint_photo}")
                    if joint_photo and joint_photo != "-":
                        print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ {joint_photo}")
                        add_photo(len(photos) + 1, order_id, joint_photo, "joint_photo", created_at)
                    
                    # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥—Ä—É–≥–∏—Ö –≥–µ—Ä–æ–µ–≤
                    other_heroes = order_data.get('other_heroes', [])
                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order_id}, other_heroes: {other_heroes}")
                    for hero_index, hero in enumerate(other_heroes):
                        hero_name = hero.get('name', f'hero_{hero_index+1}')
                        print(f"üîç –û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–µ—Ä–æ—è {hero_name}")
                        
                        # –§–æ—Ç–æ –ª–∏—Ü–∞ 1
                        face_1 = hero.get('face_1')
                        if face_1 and face_1 != "-":
                            print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è {face_1} —Å —Ç–∏–ø–æ–º {hero_name}_face_1")
                            add_photo(len(photos) + 1, order_id, face_1, f"{hero_name}_face_1", created_at)
                        
                        # –§–æ—Ç–æ –ª–∏—Ü–∞ 2
                        face_2 = hero.get('face_2')
                        if face_2 and face_2 != "-":
                            print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è {face_2} —Å —Ç–∏–ø–æ–º {hero_name}_face_2")
                            add_photo(len(photos) + 1, order_id, face_2, f"{hero_name}_face_2", created_at)
                        
                        # –ü–æ–ª–Ω–æ–µ —Ñ–æ—Ç–æ
                        full = hero.get('full')
                        if full and full != "-":
                            print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è {full} —Å —Ç–∏–ø–æ–º {hero_name}_full")
                            add_photo(len(photos) + 1, order_id, full, f"{hero_name}_full", created_at)
                    
                except json.JSONDecodeError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ order_data –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
                    continue
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ –ø–∞–ø–∫–∏ uploads/order_{id}_pages (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã)
        try:
            pages_dirs = glob.glob("uploads/order_*_pages")
            for pages_dir in pages_dirs:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
                    order_id = int(pages_dir.split("order_")[1].split("_pages")[0])
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏
                    page_files = glob.glob(os.path.join(pages_dir, "*"))
                    for i, file_path in enumerate(page_files):
                        if os.path.isfile(file_path):
                            filename = os.path.basename(file_path)
                            # –î–ª—è page_X —Ç–∏–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ
                            add_photo(len(photos) + 1, order_id, filename, f"page_{i+1}", datetime.now().isoformat(), pages_dir)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {pages_dir}: {e}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞–ø–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã uploads (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –¥—Ä—É–≥–∏–µ)
        try:
            async with db.execute('''
                SELECT id, order_id, filename, file_type, uploaded_at
                FROM uploads
                ORDER BY uploaded_at DESC
            ''') as cursor:
                upload_rows = await cursor.fetchall()
                print(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ {len(upload_rows)} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ uploads")
                
                for row in upload_rows:
                    upload_id, order_id, filename, file_type, uploaded_at = row
                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º upload: order_id={order_id}, filename={filename}, file_type={file_type}")
                    add_photo(upload_id, order_id, filename, file_type, uploaded_at)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã uploads: {e}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        photos.sort(key=lambda x: x["created_at"], reverse=True)
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}")
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–∏–º–µ—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos[:3] if photos else '–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'}")
        
        return photos
async def get_selected_photos() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ order_data"""
    import glob
    import os
    from datetime import datetime
    
    print("üîç –û–¢–õ–ê–î–ö–ê: –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π")
    
    async with aiosqlite.connect(DB_PATH) as db:
        photos = []
        processed_files = set()  # –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        
        # Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø—É—Ç–µ–º
        def add_photo(id, order_id, filename, type, created_at, base_dir="uploads"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —ç—Ç–æ—Ç —Ñ–∞–π–ª
            file_key = f"{order_id}_{filename}_{type}"
            if file_key in processed_files:
                print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç {file_key}")
                return
            processed_files.add(file_key)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª —Ñ–∏–∑–∏—á–µ—Å–∫–∏
            file_path = os.path.join(base_dir, filename)
            if not os.path.exists(file_path):
                print(f"‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                return
            
            photo_data = {
                "id": id,
                "order_id": order_id,
                "filename": filename,
                "type": type,
                "created_at": created_at,
                "path": f"{base_dir}/{filename}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ —Å–ª–µ—à–∏ –¥–ª—è –≤–µ–±-–ø—É—Ç–µ–π
            }
            photos.append(photo_data)
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è: {photo_data}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ order_data (–æ—Å–Ω–æ–≤–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≥–µ—Ä–æ–µ–≤)
        async with db.execute('''
            SELECT id, id as order_id, order_data, created_at
            FROM orders
            WHERE order_data IS NOT NULL AND order_data != ''
        ''') as cursor:
            rows = await cursor.fetchall()
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ {len(rows)} –∑–∞–∫–∞–∑–æ–≤ —Å order_data")
            for row in rows:
                order_id = row[1]
                order_data_str = row[2]
                created_at = row[3]
                print(f"üîç –û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑ {order_id}")
                
                try:
                    order_data = json.loads(order_data_str)
                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order_id}, order_data –∫–ª—é—á–∏: {list(order_data.keys())}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    selected_pages = order_data.get('selected_pages', [])
                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order_id}, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {selected_pages}")
                    
                    # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º)
                    main_hero_photos = order_data.get('main_hero_photos', [])
                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order_id}, main_hero_photos: {main_hero_photos}")
                    
                    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    main_face_1 = order_data.get('main_face_1')
                    main_face_2 = order_data.get('main_face_2')
                    main_full = order_data.get('main_full')
                    joint_photo = order_data.get('joint_photo')
                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order_id}, main_face_1: {main_face_1}, main_face_2: {main_face_2}, main_full: {main_full}, joint_photo: {joint_photo}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É main_hero_photos (–º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤)
                    if isinstance(main_hero_photos, list):
                        for photo_obj in main_hero_photos:
                            if isinstance(photo_obj, dict):
                                # –ù–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {'type': 'face_1', 'filename': '...'}
                                photo_filename = photo_obj.get('filename')
                                photo_type = photo_obj.get('type', 'main_hero')
                                if photo_filename and photo_filename != "-":
                                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è {photo_filename} —Å —Ç–∏–ø–æ–º {photo_type}")
                                    add_photo(len(photos) + 1, order_id, photo_filename, photo_type, created_at)
                            elif isinstance(photo_obj, str):
                                # –°—Ç–∞—Ä–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
                                photo_filename = photo_obj
                                if photo_filename and photo_filename != "-":
                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                                    if "main_face_1" in photo_filename:
                                        photo_type = "main_hero"
                                    elif "main_face_2" in photo_filename:
                                        photo_type = "main_hero"
                                    elif "main_full" in photo_filename:
                                        photo_type = "main_hero"
                                    else:
                                        photo_type = f"main_hero"
                                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è {photo_filename} —Å —Ç–∏–ø–æ–º {photo_type}")
                                    add_photo(len(photos) + 1, order_id, photo_filename, photo_type, created_at)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
                    if main_face_1 and main_face_1 != "-":
                        print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º main_face_1 {main_face_1}")
                        add_photo(len(photos) + 1, order_id, main_face_1, "main_face_1", created_at)
                    
                    if main_face_2 and main_face_2 != "-":
                        print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º main_face_2 {main_face_2}")
                        add_photo(len(photos) + 1, order_id, main_face_2, "main_face_2", created_at)
                    
                    if main_full and main_full != "-":
                        print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º main_full {main_full}")
                        add_photo(len(photos) + 1, order_id, main_full, "main_full", created_at)
                    
                    # –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ
                    joint_photo = order_data.get('joint_photo')
                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order_id}, joint_photo: {joint_photo}")
                    if joint_photo and joint_photo != "-":
                        print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ {joint_photo}")
                        add_photo(len(photos) + 1, order_id, joint_photo, "joint_photo", created_at)
                    
                    # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥—Ä—É–≥–∏—Ö –≥–µ—Ä–æ–µ–≤
                    other_heroes = order_data.get('other_heroes', [])
                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order_id}, other_heroes: {other_heroes}")
                    for hero_index, hero in enumerate(other_heroes):
                        hero_name = hero.get('name', f'hero_{hero_index+1}')
                        print(f"üîç –û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–µ—Ä–æ—è {hero_name}")
                        
                        # –§–æ—Ç–æ –ª–∏—Ü–∞ 1
                        face_1 = hero.get('face_1')
                        if face_1 and face_1 != "-":
                            print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è {face_1} —Å —Ç–∏–ø–æ–º {hero_name}_face_1")
                            add_photo(len(photos) + 1, order_id, face_1, f"{hero_name}_face_1", created_at)
                        
                        # –§–æ—Ç–æ –ª–∏—Ü–∞ 2
                        face_2 = hero.get('face_2')
                        if face_2 and face_2 != "-":
                            print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è {face_2} —Å —Ç–∏–ø–æ–º {hero_name}_face_2")
                            add_photo(len(photos) + 1, order_id, face_2, f"{hero_name}_face_2", created_at)
                        
                        # –ü–æ–ª–Ω–æ–µ —Ñ–æ—Ç–æ
                        full = hero.get('full')
                        if full and full != "-":
                            print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è {full} —Å —Ç–∏–ø–æ–º {hero_name}_full")
                            add_photo(len(photos) + 1, order_id, full, f"{hero_name}_full", created_at)
                    
                except json.JSONDecodeError as e:
                    print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ order_data –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
                    continue
        
        # –ü–æ–ª—É—á–∞–µ–º –¢–û–õ–¨–ö–û –í–´–ë–†–ê–ù–ù–´–ï —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –ø–∞–ø–∫–∏ uploads/order_{id}_pages
        try:
            pages_dirs = glob.glob("uploads/order_*_pages")
            for pages_dir in pages_dirs:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ –∏–º–µ–Ω–∏ –ø–∞–ø–∫–∏
                    order_id = int(pages_dir.split("order_")[1].split("_pages")[0])
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
                    cursor = await db.execute('SELECT order_data FROM orders WHERE id = ?', (order_id,))
                    row = await cursor.fetchone()
                    if row and row[0]:
                        try:
                            order_data = json.loads(row[0])
                            selected_pages = order_data.get('selected_pages', [])
                            print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order_id}, –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {selected_pages}")
                        except json.JSONDecodeError:
                            selected_pages = []
                            print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order_id}, –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ order_data")
                    else:
                        selected_pages = []
                        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order_id}, –Ω–µ—Ç order_data")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏
                    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
                    order_pages = await get_order_pages(order_id)
                    
                    for page_info in order_pages:
                        page_num = page_info['page_number']
                        filename = page_info['filename']
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                        file_path = os.path.join(pages_dir, filename)
                        if os.path.isfile(file_path):
                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–∞
                            if page_num in selected_pages:
                                print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num}: {filename}")
                                add_photo(len(photos) + 1, order_id, filename, f"page_{page_num}", datetime.now().isoformat(), pages_dir)
                            else:
                                print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É {page_num}: {filename}")
                                
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–ø–∫–∏ {pages_dir}: {e}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–∞–ø–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü: {e}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        photos.sort(key=lambda x: x["created_at"], reverse=True)
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {len(photos)}")
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü—Ä–∏–º–µ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π: {photos[:3] if photos else '–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π'}")
        
        return photos

async def get_complete_photos() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏: –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã + –≤–∫–ª–∞–¥—ã—à–∏ + —Å–≤–æ–∏ —Ñ–æ—Ç–æ + –æ–±–ª–æ–∂–∫–∏"""
    import glob
    import os
    from datetime import datetime
    
    async with aiosqlite.connect(DB_PATH) as db:
        photos = []
        processed_files = set()
        
        def add_photo(id, order_id, filename, type, created_at, base_dir="uploads"):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ filename - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
            if not isinstance(filename, str):
                print(f"üîç –û–¢–õ–ê–î–ö–ê: filename –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π: {filename}")
                return
                
            file_key = f"{order_id}_{filename}_{type}"
            if file_key in processed_files:
                print(f"üîç –û–¢–õ–ê–î–ö–ê: –§–∞–π–ª —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {file_key}")
                return
            processed_files.add(file_key)
            
            file_path = os.path.join(base_dir, filename)
            if not os.path.exists(file_path):
                print(f"üîç –û–¢–õ–ê–î–ö–ê: –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {file_path}")
                return
            
            # –ö–æ–¥–∏—Ä—É–µ–º filename –¥–ª—è URL
            from urllib.parse import quote
            encoded_filename = quote(filename)
            
            photo_data = {
                "id": id,
                "order_id": order_id,
                "filename": filename,
                "type": type,
                "created_at": created_at,
                "path": f"{base_dir}/{encoded_filename}"
            }
            photos.append(photo_data)
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è: {photo_data}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ order_data
        async with db.execute('''
            SELECT id, id as order_id, order_data, created_at
            FROM orders
            WHERE order_data IS NOT NULL AND order_data != ''
        ''') as cursor:
            rows = await cursor.fetchall()
            for row in rows:
                order_id = row[1]
                order_data_str = row[2]
                created_at = row[3]
                
                try:
                    order_data = json.loads(order_data_str)
                    
                    # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è
                    main_hero_photos = order_data.get('main_hero_photos', [])
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º main_hero_photos
                    if isinstance(main_hero_photos, list):
                        for photo_obj in main_hero_photos:
                            if isinstance(photo_obj, dict):
                                photo_filename = photo_obj.get('filename')
                                photo_type = photo_obj.get('type', 'main_hero')
                                if photo_filename and photo_filename != "-":
                                    add_photo(len(photos) + 1, order_id, photo_filename, photo_type, created_at)
                            elif isinstance(photo_obj, str):
                                photo_filename = photo_obj
                                if photo_filename and photo_filename != "-":
                                    photo_type = "main_hero"
                                    add_photo(len(photos) + 1, order_id, photo_filename, photo_type, created_at)
                    
                    # –û—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    main_face_1 = order_data.get('main_face_1')
                    main_face_2 = order_data.get('main_face_2')
                    main_full = order_data.get('main_full')
                    joint_photo = order_data.get('joint_photo')
                    
                    if main_face_1 and main_face_1 != "-":
                        add_photo(len(photos) + 1, order_id, main_face_1, "main_face_1", created_at)
                    
                    if main_face_2 and main_face_2 != "-":
                        add_photo(len(photos) + 1, order_id, main_face_2, "main_face_2", created_at)
                    
                    if main_full and main_full != "-":
                        add_photo(len(photos) + 1, order_id, main_full, "main_full", created_at)
                    
                    # –°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ
                    if joint_photo and joint_photo != "-":
                        add_photo(len(photos) + 1, order_id, joint_photo, "joint_photo", created_at)
                    
                    # –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥—Ä—É–≥–∏—Ö –≥–µ—Ä–æ–µ–≤
                    other_heroes = order_data.get('other_heroes', [])
                    for hero_index, hero in enumerate(other_heroes):
                        hero_name = hero.get('name', f'hero_{hero_index+1}')
                        
                        # –§–æ—Ç–æ –ª–∏—Ü–∞ 1
                        face_1 = hero.get('face_1')
                        if face_1 and face_1 != "-":
                            add_photo(len(photos) + 1, order_id, face_1, f"{hero_name}_face_1", created_at)
                        
                        # –§–æ—Ç–æ –ª–∏—Ü–∞ 2
                        face_2 = hero.get('face_2')
                        if face_2 and face_2 != "-":
                            add_photo(len(photos) + 1, order_id, face_2, f"{hero_name}_face_2", created_at)
                        
                        # –ü–æ–ª–Ω–æ–µ —Ñ–æ—Ç–æ
                        full = hero.get('full')
                        if full and full != "-":
                            add_photo(len(photos) + 1, order_id, full, f"{hero_name}_full", created_at)
                    
                    # –í–∫–ª–∞–¥—ã—à–∏ (inserts)
                    inserts = order_data.get('inserts', [])
                    for insert_filename in inserts:
                        if insert_filename and insert_filename != "-":
                            add_photo(len(photos) + 1, order_id, insert_filename, "insert", created_at)
                    
                    # –°–≤–æ–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (custom_photos)
                    custom_photos = order_data.get('custom_photos', [])
                    for custom_photo_filename in custom_photos:
                        if custom_photo_filename and custom_photo_filename != "-":
                            add_photo(len(photos) + 1, order_id, custom_photo_filename, "custom_photo", created_at)
                    
                    # –í—ã–±—Ä–∞–Ω–Ω–∞—è –æ–±–ª–æ–∂–∫–∞
                    selected_cover = order_data.get('selected_cover', {})
                    if selected_cover and isinstance(selected_cover, dict):
                        cover_filename = selected_cover.get('filename')
                        if cover_filename and cover_filename != "-":
                            add_photo(len(photos) + 1, order_id, cover_filename, "selected_cover", created_at)
                    
                except json.JSONDecodeError as e:
                    continue
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –ø–∞–ø–∫–∏ uploads/order_{id}_pages
        try:
            pages_dirs = glob.glob("uploads/order_*_pages")
            for pages_dir in pages_dirs:
                try:
                    order_id = int(pages_dir.split("order_")[1].split("_pages")[0])
                    
                    cursor = await db.execute('SELECT order_data FROM orders WHERE id = ?', (order_id,))
                    row = await cursor.fetchone()
                    if row and row[0]:
                        try:
                            order_data = json.loads(row[0])
                            selected_pages = order_data.get('selected_pages', [])
                        except json.JSONDecodeError:
                            selected_pages = []
                    else:
                        selected_pages = []
                    
                    page_files = glob.glob(os.path.join(pages_dir, "*"))
                    page_files.sort()
                    
                    for i, file_path in enumerate(page_files):
                        if os.path.isfile(file_path):
                            filename = os.path.basename(file_path)
                            page_num = i + 1
                            
                            if page_num in selected_pages:
                                add_photo(len(photos) + 1, order_id, filename, f"page_{page_num}", datetime.now().isoformat(), pages_dir)
                                
                except Exception as e:
                    continue
        except Exception as e:
            pass
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–µ—Ä–æ–µ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã hero_photos
        try:
            async with db.execute('''
                SELECT id, order_id, filename, photo_type, hero_name, created_at
                FROM hero_photos
                ORDER BY created_at DESC
            ''') as cursor:
                hero_photo_rows = await cursor.fetchall()
                
                for row in hero_photo_rows:
                    photo_id, order_id, filename, photo_type, hero_name, created_at = row
                    
                    if hero_name:
                        display_type = f"{hero_name}_{photo_type}"
                    else:
                        display_type = f"hero_{photo_type}"
                    
                    add_photo(photo_id, order_id, filename, display_type, created_at)
        
        except Exception as e:
            pass
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã uploads (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –ø–µ—Ä–≤–æ–π –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –¥—Ä—É–≥–∏–µ)
        try:
            async with db.execute('''
                SELECT id, order_id, filename, file_type, uploaded_at
                FROM uploads
                ORDER BY uploaded_at DESC
            ''') as cursor:
                upload_rows = await cursor.fetchall()
                print(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ {len(upload_rows)} –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ uploads")
                
                for row in upload_rows:
                    upload_id, order_id, filename, file_type, uploaded_at = row
                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º upload: order_id={order_id}, filename={filename}, file_type={file_type}")
                    add_photo(upload_id, order_id, filename, file_type, uploaded_at)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã uploads: {e}")
            pass
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        photos.sort(key=lambda x: x["created_at"], reverse=True)
        
        return photos

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ---

async def save_main_hero_photo(order_id: int, filename: str) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≥–ª–∞–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            INSERT INTO main_hero_photos (order_id, filename)
            VALUES (?, ?)
        ''', (order_id, filename))
        await db.commit()
        return cursor.lastrowid

async def save_hero_photo(order_id: int, filename: str, photo_type: str, hero_name: str = None) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥—Ä—É–≥–æ–≥–æ –≥–µ—Ä–æ—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            INSERT INTO hero_photos (order_id, filename, photo_type, hero_name, created_at)
            VALUES (?, ?, ?, ?, datetime('now'))
        ''', (order_id, filename, photo_type, hero_name))
        await db.commit()
        return cursor.lastrowid

async def save_joint_photo(order_id: int, filename: str) -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            INSERT INTO joint_photos (order_id, filename)
            VALUES (?, ?)
        ''', (order_id, filename))
        await db.commit()
        return cursor.lastrowid

async def save_uploaded_file(order_id: int, filename: str, file_type: str = "image") -> int:
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            INSERT INTO uploads (order_id, filename, file_type, uploaded_at)
            VALUES (?, ?, ?, datetime('now'))
        ''', (order_id, filename, file_type))
        await db.commit()
        return cursor.lastrowid

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∞–±–ª–æ–Ω–∞–º–∏ –æ–±–ª–æ–∂–µ–∫ ---

async def get_cover_templates() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —à–∞–±–ª–æ–Ω—ã –æ–±–ª–æ–∂–µ–∫"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT id, name, filename, category, created_at
            FROM cover_templates
            ORDER BY created_at ASC
        ''') as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def get_cover_template_by_id(template_id: int) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —à–∞–±–ª–æ–Ω –æ–±–ª–æ–∂–∫–∏ –ø–æ ID"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT id, name, filename, category, created_at
            FROM cover_templates
            WHERE id = ?
        ''', (template_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                return dict(zip([column[0] for column in cursor.description], row))
            return None

async def add_cover_template(name: str, filename: str, category: str) -> Dict:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —à–∞–±–ª–æ–Ω –æ–±–ª–æ–∂–∫–∏"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            INSERT INTO cover_templates (name, filename, category, created_at)
            VALUES (?, ?, ?, datetime('now'))
        ''', (name, filename, category))
        await db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —à–∞–±–ª–æ–Ω
        template_id = cursor.lastrowid
        async with db.execute('''
            SELECT id, name, filename, category, created_at
            FROM cover_templates
            WHERE id = ?
        ''', (template_id,)) as cursor:
            row = await cursor.fetchone()
            return dict(zip([column[0] for column in cursor.description], row))

async def delete_cover_template(template_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —à–∞–±–ª–æ–Ω –æ–±–ª–æ–∂–∫–∏ –ø–æ ID"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            DELETE FROM cover_templates
            WHERE id = ?
        ''', (template_id,))
        await db.commit()
        return cursor.rowcount > 0

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∏–ª—è–º–∏ –∫–Ω–∏–≥ ---

async def get_book_styles() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å—Ç–∏–ª–∏ –∫–Ω–∏–≥"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT id, name, description, filename, category, created_at
            FROM book_styles
            ORDER BY 
                CASE 
                    WHEN name LIKE '%Pixar%' THEN 1
                    WHEN name LIKE '%Ghibli%' THEN 2
                    WHEN name LIKE '%Love is%' THEN 3
                    ELSE 4
                END,
                created_at ASC
        ''') as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def add_book_style(name: str, description: str, filename: str, category: str) -> Dict:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å –∫–Ω–∏–≥–∏"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            INSERT INTO book_styles (name, description, filename, category, created_at)
            VALUES (?, ?, ?, ?, datetime('now'))
        ''', (name, description, filename, category))
        await db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å
        style_id = cursor.lastrowid
        async with db.execute('''
            SELECT id, name, description, filename, category, created_at
            FROM book_styles
            WHERE id = ?
        ''', (style_id,)) as cursor:
            row = await cursor.fetchone()
            return dict(zip([column[0] for column in cursor.description], row))

async def delete_book_style(style_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∏–ª—å –∫–Ω–∏–≥–∏ –ø–æ ID"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('DELETE FROM book_styles WHERE id = ?', (style_id,))
        await db.commit()
        return cursor.rowcount > 0

async def update_book_style(style_id: int, name: str, description: str, filename: str, category: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∏–ª—å –∫–Ω–∏–≥–∏"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            UPDATE book_styles 
            SET name = ?, description = ?, filename = ?, category = ?
            WHERE id = ?
        ''', (name, description, filename, category, style_id))
        await db.commit()
        return cursor.rowcount > 0

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ç–∏–ª—è–º–∏ –≥–æ–ª–æ—Å–∞ ---

async def get_voice_styles() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å—Ç–∏–ª–∏ –≥–æ–ª–æ—Å–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        print(f"üîç –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ voice_styles")
        async with db.execute('''
            SELECT id, name, description, filename, gender, created_at
            FROM voice_styles
            ORDER BY created_at DESC
        ''') as cursor:
            rows = await cursor.fetchall()
            result = [dict(zip([column[0] for column in cursor.description], row)) for row in rows]
            print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(result)} –∑–∞–ø–∏—Å–µ–π –∏–∑ voice_styles: {result}")
            return result

async def add_voice_style(name: str, description: str, filename: str, gender: str = "male") -> Dict:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π —Å—Ç–∏–ª—å –≥–æ–ª–æ—Å–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            INSERT INTO voice_styles (name, description, filename, gender, created_at)
            VALUES (?, ?, ?, ?, datetime('now'))
        ''', (name, description, filename, gender))
        await db.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å
        style_id = cursor.lastrowid
        async with db.execute('''
            SELECT id, name, description, filename, gender, created_at
            FROM voice_styles
            WHERE id = ?
        ''', (style_id,)) as cursor:
            row = await cursor.fetchone()
            return dict(zip([column[0] for column in cursor.description], row))

async def delete_voice_style(style_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∏–ª—å –≥–æ–ª–æ—Å–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            DELETE FROM voice_styles WHERE id = ?
        ''', (style_id,))
        await db.commit()
        return cursor.rowcount > 0

async def update_voice_style(style_id: int, name: str, description: str, filename: str, gender: str = "male") -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∏–ª—å –≥–æ–ª–æ—Å–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            UPDATE voice_styles 
            SET name = ?, description = ?, filename = ?, gender = ?
            WHERE id = ?
        ''', (name, description, filename, gender, style_id))
        await db.commit()
        return cursor.rowcount > 0

async def get_all_delayed_messages() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ–Ω–µ–¥–∂–µ—Ä–µ"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT dm.*, m.email as manager_email, m.full_name as manager_name
            FROM delayed_messages dm
            LEFT JOIN managers m ON dm.manager_id = m.id
            ORDER BY dm.created_at DESC
        ''') as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def get_manager_delayed_messages(manager_email: str) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT dm.*, m.email as manager_email, m.full_name as manager_name
            FROM delayed_messages dm
            LEFT JOIN managers m ON dm.manager_id = m.id
            WHERE m.email = ? OR dm.manager_id IS NULL
            ORDER BY dm.created_at DESC
        ''', (manager_email,)) as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]
async def can_manager_access_delayed_message(manager_email: str, message_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (is_super_admin = 1)
        async with db.execute('''
            SELECT is_super_admin FROM managers WHERE email = ?
        ''', (manager_email,)) as cursor:
            row = await cursor.fetchone()
            if not row or row[0] != 1:
                return False  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è–º –∏ —à–∞–±–ª–æ–Ω–∞–º
        return True

async def can_manager_access_message_template(manager_email: str, template_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —à–∞–±–ª–æ–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º (is_super_admin = 1)
        async with db.execute('''
            SELECT is_super_admin FROM managers WHERE email = ?
        ''', (manager_email,)) as cursor:
            row = await cursor.fetchone()
            if not row or row[0] != 1:
                return False  # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø
        
        # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —à–∞–±–ª–æ–Ω–∞–º
        return True

async def delete_delayed_message(message_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            DELETE FROM delayed_messages WHERE id = ?
        ''', (message_id,))
        await db.commit()
        return cursor.rowcount > 0

async def get_delayed_message_by_id(message_id: int) -> Optional[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ ID"""
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        async with db.execute('''
            SELECT dm.*, m.email as manager_email, m.full_name as manager_name
            FROM delayed_messages dm
            LEFT JOIN managers m ON dm.manager_id = m.id
            WHERE dm.id = ?
        ''', (message_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                message = dict(row)
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
                files = await get_delayed_message_files(message_id)
                message['files'] = files
                return message
            return None

async def update_delayed_message(message_id: int, content: str, delay_minutes: int, message_type: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º scheduled_at –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        cursor = await db.execute('''
            UPDATE delayed_messages 
            SET content = ?, delay_minutes = ?, message_type = ?, scheduled_at = datetime(created_at, '+' || ? || ' minutes')
            WHERE id = ?
        ''', (content, delay_minutes, message_type, delay_minutes, message_id))
        await db.commit()
        return cursor.rowcount > 0

async def cleanup_trigger_messages_by_type(order_id: int, message_types: List[str]) -> int:
    """
    –£–¥–∞–ª—è–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    async with aiosqlite.connect(DB_PATH) as db:
        if not message_types:
            return 0
            
        placeholders = ','.join(['?' for _ in message_types])
        cursor = await db.execute(f'''
            DELETE FROM delayed_messages 
            WHERE order_id = ? AND message_type IN ({placeholders}) AND status = 'pending'
        ''', [order_id] + message_types)
        await db.commit()
        return cursor.rowcount

async def get_trigger_messages_for_order(order_id: int) -> List[Dict]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ç—Ä–∏–≥–≥–µ—Ä–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞ —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ —Ç–∏–ø–∞–º
    """
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute('''
            SELECT message_type, COUNT(*) as count, 
                   GROUP_CONCAT(id) as message_ids,
                   MIN(scheduled_at) as next_scheduled
            FROM delayed_messages 
            WHERE order_id = ? AND status = 'pending'
            GROUP BY message_type
            ORDER BY message_type
        ''', (order_id,))
        rows = await cursor.fetchall()
        return [dict(row) for row in rows]

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–∞–º–∏ ---

async def get_pricing_items() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Ü–µ–Ω—ã"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT * FROM pricing_items ORDER BY created_at DESC
        ''') as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def create_pricing_item(product: str, price: float, currency: str, description: str, upgrade_price_difference: float = 0.0, is_active: bool = True) -> int:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Ü–µ–Ω—É"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            INSERT INTO pricing_items (product, price, currency, description, upgrade_price_difference, is_active, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))
        ''', (product, price, currency, description, upgrade_price_difference, is_active))
        await db.commit()
        return cursor.lastrowid

async def update_pricing_item(item_id: int, product: str, price: float, currency: str, description: str, upgrade_price_difference: float = 0.0, is_active: bool = True) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—É"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            UPDATE pricing_items 
            SET product = ?, price = ?, currency = ?, description = ?, upgrade_price_difference = ?, is_active = ?, updated_at = datetime('now')
            WHERE id = ?
        ''', (product, price, currency, description, upgrade_price_difference, is_active, item_id))
        await db.commit()
        return cursor.rowcount > 0

async def toggle_pricing_item(item_id: int, is_active: bool) -> bool:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Ü–µ–Ω—ã"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            UPDATE pricing_items 
            SET is_active = ?, updated_at = datetime('now')
            WHERE id = ?
        ''', (is_active, item_id))
        await db.commit()
        return cursor.rowcount > 0
async def delete_pricing_item(item_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Ü–µ–Ω—É"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            DELETE FROM pricing_items WHERE id = ?
        ''', (item_id,))
        await db.commit()
        return cursor.rowcount > 0

async def populate_pricing_items() -> None:
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ü–µ–Ω –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    prices = [
        ("üìÑ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞", 1990.0, "RUB", "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–Ω–∏–≥–∞ –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ", 0.0, True),  # –†–∞–∑–Ω–∏—Ü–∞ 0, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –±–∞–∑–æ–≤–∞—è –≤–µ—Ä—Å–∏—è
        ("üì¶ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è + –ü–µ—á–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è", 7639.0, "RUB", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ + –ø–µ—á–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π", 4000.0, True),  # –†–∞–∑–Ω–∏—Ü–∞ 4000 –¥–ª—è –∞–ø–≥—Ä–µ–π–¥–∞
        ("üíå –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è", 2990.0, "RUB", "–£–Ω–∏–∫–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è —Å –≤–∞—à–∏–º –≥–æ–ª–æ—Å–æ–º", 0.0, True),  # –†–∞–∑–Ω–∏—Ü–∞ 0, —Ç–∞–∫ –∫–∞–∫ –Ω–µ—Ç –∞–ø–≥—Ä–µ–π–¥–∞
    ]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ü–µ–Ω—ã –≤ –±–∞–∑–µ
    existing_items = await get_pricing_items()
    if existing_items:
        print("üí∞ –¶–µ–Ω—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")
        return
    
    for product, price, currency, description, upgrade_difference, is_active in prices:
        await create_pricing_item(product, price, currency, description, upgrade_difference, is_active)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º ---

async def get_content_steps() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —à–∞–≥–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT * FROM content_steps ORDER BY created_at DESC
        ''') as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def create_content_step(step_key: str, step_name: str, content_type: str, content: str, materials: str, is_active: bool) -> int:
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —à–∞–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            INSERT INTO content_steps (step_key, step_name, content_type, content, materials, is_active, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))
        ''', (step_key, step_name, content_type, content, materials, is_active))
        await db.commit()
        return cursor.lastrowid

async def update_content_step(step_id: int, step_key: str, step_name: str, content_type: str, content: str, materials: str, is_active: bool) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —à–∞–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            UPDATE content_steps 
            SET step_key = ?, step_name = ?, content_type = ?, content = ?, materials = ?, is_active = ?, updated_at = datetime('now')
            WHERE id = ?
        ''', (step_key, step_name, content_type, content, materials, is_active, step_id))
        await db.commit()
        return cursor.rowcount > 0

async def toggle_content_step(step_id: int, is_active: bool) -> bool:
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —à–∞–≥–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            UPDATE content_steps 
            SET is_active = ?, updated_at = datetime('now')
            WHERE id = ?
        ''', (is_active, step_id))
        await db.commit()
        return cursor.rowcount > 0

async def delete_content_step(step_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —à–∞–≥ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            DELETE FROM content_steps WHERE id = ?
        ''', (step_id,))
        await db.commit()
        return cursor.rowcount > 0

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –±–æ—Ç–∞ ---

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–≤–∏–∑–æ–º –ø–µ—Å–Ω–∏ ---
async def get_song_quiz_list() -> List[Dict]:
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT * FROM song_quiz ORDER BY relation_key, author_gender
        ''') as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def get_song_quiz_item(relation_key: str, author_gender: str) -> Dict:
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT * FROM song_quiz WHERE relation_key = ? AND author_gender = ? AND is_active = 1
        ''', (relation_key, author_gender)) as cursor:
            row = await cursor.fetchone()
            return dict(zip([column[0] for column in cursor.description], row)) if row else None

async def get_song_quiz_by_id(quiz_id: int) -> Dict:
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT * FROM song_quiz WHERE id = ?
        ''', (quiz_id,)) as cursor:
            row = await cursor.fetchone()
            return dict(zip([column[0] for column in cursor.description], row)) if row else None

async def create_song_quiz_item(relation_key: str, author_gender: str, title: str, intro: str, phrases_hint: str, questions_json: str, outro: str, is_active: bool = True) -> int:
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            INSERT OR REPLACE INTO song_quiz (relation_key, author_gender, title, intro, phrases_hint, questions_json, outro, is_active, created_at, updated_at)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, datetime('now'), datetime('now'))
        ''', (relation_key, author_gender, title, intro, phrases_hint, questions_json, outro, is_active))
        await db.commit()
        return cursor.lastrowid

async def update_song_quiz_item(item_id: int, relation_key: str, author_gender: str, title: str, intro: str, phrases_hint: str, questions_json: str, outro: str, is_active: bool) -> bool:
    async with aiosqlite.connect(DB_PATH) as db:
        print(f"üîç –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–≤–∏–∑–∞ –≤ –ë–î: ID={item_id}, relation_key={relation_key}, author_gender={author_gender}")
        print(f"üîç intro (–ø–æ–ª–Ω—ã–π): {repr(intro)}")
        print(f"üîç phrases_hint: {phrases_hint}")
        print(f"üîç questions_json: {questions_json}")
        print(f"üîç outro (–ø–æ–ª–Ω—ã–π): {repr(outro)}")
        
        cursor = await db.execute('''
            UPDATE song_quiz
            SET relation_key = ?, author_gender = ?, title = ?, intro = ?, phrases_hint = ?, questions_json = ?, outro = ?, is_active = ?, updated_at = datetime('now')
            WHERE id = ?
        ''', (relation_key, author_gender, title, intro, phrases_hint, questions_json, outro, is_active, item_id))
        await db.commit()
        
        print(f"üîç –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—Ç—Ä–æ–∫: {cursor.rowcount}")
        return cursor.rowcount > 0

async def delete_song_quiz_item(item_id: int) -> bool:
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('DELETE FROM song_quiz WHERE id = ?', (item_id,))
        await db.commit()
        return cursor.rowcount > 0

async def get_bot_messages() -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT * FROM bot_messages ORDER BY sort_order, context, stage, message_name
        ''') as cursor:
            rows = await cursor.fetchall()
            messages = [dict(zip([column[0] for column in cursor.description], row)) for row in rows]
            
            # –î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            for message in messages:
                if message['message_key'] == 'book_delivery_confirmed':
                    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
                    example_content = message['content'].replace("–≥. —â—à–æ–≤—ã–ª—Ç–¥—å–º", "–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 1, –∫–≤. 10")
                    example_content = example_content.replace("–∏–∞–ø–º—Ç", "–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á")
                    example_content = example_content.replace("89068714014", "+7 (999) 123-45-67")
                    message['content'] = example_content
                elif message['message_key'] == 'book_pages_selection_completed':
                    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü
                    example_content = message['content'].replace("24/24", "15/24")
                    example_content = example_content.replace("24 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö", "15 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")
                    message['content'] = example_content
                elif message['message_key'] == 'privacy_consent_request':
                    # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞
                    example_content = message['content'].replace("‚Ññ0458", "‚Ññ1234")
                    message['content'] = example_content
            
            return messages

async def upsert_bot_message(message_key: str, message_name: str, content: str, context: str = None, stage: str = None, sort_order: int = 0) -> int:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            INSERT OR REPLACE INTO bot_messages 
            (message_key, message_name, content, context, stage, sort_order, updated_at)
            VALUES (?, ?, ?, ?, ?, ?, datetime('now'))
        ''', (message_key, message_name, content, context, stage, sort_order))
        await db.commit()
        return cursor.lastrowid

async def update_bot_message(message_id: int, content: str, is_active: bool = True) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"""
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–ª—é—á —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            message_key = None
            try:
                cursor = await db.execute('SELECT message_key FROM bot_messages WHERE id = ?', (message_id,))
                row = await cursor.fetchone()
                if row:
                    message_key = row[0]
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            processed_content = content
            if message_key == 'book_delivery_confirmed':
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
                processed_content = processed_content.replace("–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, –¥. 1, –∫–≤. 10", "–≥. —â—à–æ–≤—ã–ª—Ç–¥—å–º")
                processed_content = processed_content.replace("–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á", "–∏–∞–ø–º—Ç")
                processed_content = processed_content.replace("+7 (999) 123-45-67", "89068714014")
            elif message_key == 'book_pages_selection_completed':
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –æ–±—Ä–∞—Ç–Ω–æ
                processed_content = processed_content.replace("15/24", "24/24")
                processed_content = processed_content.replace("15 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö", "24 —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö")
            elif message_key == 'privacy_consent_request':
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ –æ–±—Ä–∞—Ç–Ω–æ
                processed_content = processed_content.replace("‚Ññ1234", "‚Ññ0458")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            cursor = await db.execute('''
                UPDATE bot_messages 
                SET content = ?, is_active = ?, updated_at = datetime('now')
                WHERE id = ?
            ''', (processed_content, is_active, message_id))
            await db.commit()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if message_key:
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ {message_key} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            else:
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            
            return cursor.rowcount > 0
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {message_id}: {e}")
        return False

async def delete_bot_message(message_id: int) -> bool:
    """–£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            DELETE FROM bot_messages 
            WHERE id = ?
        ''', (message_id,))
        await db.commit()
        return cursor.rowcount > 0

async def increment_message_usage(message_key: str) -> bool:
    """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            UPDATE bot_messages 
            SET usage_count = usage_count + 1, last_used = datetime('now')
            WHERE message_key = ?
        ''', (message_key,))
        await db.commit()
        return cursor.rowcount > 0

async def get_bot_message_by_key(message_key: str) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –ø–æ –∫–ª—é—á—É"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT * FROM bot_messages WHERE message_key = ?
        ''', (message_key,)) as cursor:
            row = await cursor.fetchone()
            return dict(zip([column[0] for column in cursor.description], row)) if row else None

async def get_bot_message_by_id(message_id: int) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ –ø–æ ID"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT * FROM bot_messages WHERE id = ?
        ''', (message_id,)) as cursor:
            row = await cursor.fetchone()
            return dict(zip([column[0] for column in cursor.description], row)) if row else None
async def populate_bot_messages() -> None:
    """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏–π –±–æ—Ç–∞ –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ
    existing_messages = await get_bot_messages()
    if existing_messages:
        print("üìù –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ")
        return
    
    messages = [
        # === –ü–†–ò–í–ï–¢–°–¢–í–ò–ï –ò –ù–ê–ß–ê–õ–û ===
        ("welcome_message", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", 
         "üëã –ü—Ä–∏–≤–µ—Ç!\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–Ω–∏–≥—É –∏–ª–∏ –ø–µ—Å–Ω—é —Å —Ç–≤–æ–∏–º –≥–æ–ª–æ—Å–æ–º, –ª–∏—Ü–æ–º –∏ —Ç–µ–ø–ª–æ–º ‚Äî –¥–ª—è –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.\n\n–≠—Ç–æ –±—É–¥–µ—Ç –∏—Å—Ç–æ—Ä–∏—è –∏–ª–∏ –º–µ–ª–æ–¥–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã ‚Äî –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π.\n\n–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? üíå", 
         "welcome", "start", 1),
        
        ("welcome_ready", "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å", 
         "üëã –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞?", 
         "welcome", "start", 2),
        
        # === –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ===
        ("phone_request", "–ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞", 
         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –≤—Ä—É—á–Ω—É—é.", 
         "registration", "phone"),
        
        ("name_request", "–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏", 
         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", 
         "registration", "name"),
        
        ("lastname_request", "–ó–∞–ø—Ä–æ—Å —Ñ–∞–º–∏–ª–∏–∏", 
         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:", 
         "registration", "lastname"),
        
        ("registration_success", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞", 
         "–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", 
         "registration", "success"),
        
        # === –í–´–ë–û–† –ü–†–û–î–£–ö–¢–ê ===
        ("product_selection", "–í—ã–±–æ—Ä –ø—Ä–æ–¥—É–∫—Ç–∞", 
         "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å:", 
         "product", "selection"),
        
        ("product_book", "–ö–Ω–∏–≥–∞", 
         "üìñ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∫–Ω–∏–≥–∞", 
         "product", "book"),
        
        ("product_song", "–ü–µ—Å–Ω—è", 
         "üéµ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è", 
         "product", "song"),
        
        # === –ü–£–¢–¨ –°–û–ó–î–ê–ù–ò–Ø –ü–ï–°–ù–ò ===
        ("song_intro", "–í–≤–µ–¥–µ–Ω–∏–µ –∫ —Å–æ–∑–¥–∞–Ω–∏—é –ø–µ—Å–Ω–∏", 
         "üéµ –û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Å–Ω–∏.\n\n–ú—ã —Å–æ–∑–¥–∞–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—É—é –ø–µ—Å–Ω—é —Å –≤–∞—à–∏–º –≥–æ–ª–æ—Å–æ–º, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –ø–æ—Å–≤—è—â–µ–Ω–∞ –≤–∞—à–µ–º—É –ª—é–±–∏–º–æ–º—É —á–µ–ª–æ–≤–µ–∫—É.", 
         "song", "intro"),
        
        ("song_voice_request", "–ó–∞–ø—Ä–æ—Å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", 
         "üé§ –¢–µ–ø–µ—Ä—å –∑–∞–ø–∏—à–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–∏–º –ø–µ–Ω–∏–µ–º.\n\n–°–ø–æ–π—Ç–µ –ª—é–±—É—é –ø–µ—Å–Ω—é, –∫–æ—Ç–æ—Ä–∞—è –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–π—Ç–µ –º–µ–ª–æ–¥–∏—é. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–Ω—è—Ç—å –≤–∞—à –≥–æ–ª–æ—Å –∏ —Å—Ç–∏–ª—å.", 
         "song", "voice"),
        
        ("song_voice_instructions", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞", 
         "üìù –°–æ–≤–µ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏:\n‚Ä¢ –ù–∞–π–¥–∏—Ç–µ —Ç–∏—Ö–æ–µ –º–µ—Å—Ç–æ\n‚Ä¢ –ì–æ–≤–æ—Ä–∏—Ç–µ —á–µ—Ç–∫–æ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ\n‚Ä¢ –ó–∞–ø–∏—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 10-30 —Å–µ–∫—É–Ω–¥\n‚Ä¢ –ú–æ–∂–Ω–æ —Å–ø–µ—Ç—å –∫—É–ø–ª–µ—Ç –ª—é–±–∏–º–æ–π –ø–µ—Å–Ω–∏", 
         "song", "voice_instructions"),
        
        ("song_voice_received", "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ", 
         "‚úÖ –í–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –ú—ã –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –≥–æ–ª–æ—Å...", 
         "song", "voice_received"),
        
        ("song_style_request", "–ó–∞–ø—Ä–æ—Å —Å—Ç–∏–ª—è –ø–µ—Å–Ω–∏", 
         "üéº –ö–∞–∫–æ–π —Å—Ç–∏–ª—å –ø–µ—Å–Ω–∏ –≤—ã –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ?\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", 
         "song", "style"),
        
        ("song_style_pop", "–ü–æ–ø-—Å—Ç–∏–ª—å", 
         "üéµ –ü–æ–ø - –ª–µ–≥–∫–∞—è, –º–µ–ª–æ–¥–∏—á–Ω–∞—è –ø–µ—Å–Ω—è", 
         "song", "style_pop"),
        
        ("song_style_romantic", "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å", 
         "üíï –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è - –Ω–µ–∂–Ω–∞—è, –ª–∏—Ä–∏—á–µ—Å–∫–∞—è –ø–µ—Å–Ω—è", 
         "song", "style_romantic"),
        
        ("song_style_fun", "–í–µ—Å–µ–ª–∞—è –ø–µ—Å–Ω—è", 
         "üòä –í–µ—Å–µ–ª–∞—è - –ø–æ–∑–∏—Ç–∏–≤–Ω–∞—è, —ç–Ω–µ—Ä–≥–∏—á–Ω–∞—è –ø–µ—Å–Ω—è", 
         "song", "style_fun"),
        
        ("song_style_ballad", "–ë–∞–ª–ª–∞–¥–∞", 
         "üé≠ –ë–∞–ª–ª–∞–¥–∞ - –º–µ–¥–ª–µ–Ω–Ω–∞—è, –¥—É—à–µ–≤–Ω–∞—è –ø–µ—Å–Ω—è", 
         "song", "style_ballad"),
        
        ("song_style_custom", "–°–≤–æ–π —Å—Ç–∏–ª—å", 
         "üé® –°–≤–æ–π —Å—Ç–∏–ª—å - –æ–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Å—Ç–∏–ª—å –≤—ã —Ö–æ—Ç–∏—Ç–µ", 
         "song", "style_custom"),
        
        ("song_custom_style_request", "–ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∏–ª—è", 
         "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–π —Å—Ç–∏–ª—å –ø–µ—Å–Ω–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä–æ–∫, –¥–∂–∞–∑, —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞ –∏ —Ç.–¥.):", 
         "song", "custom_style"),
        
        ("song_mood_request", "–ó–∞–ø—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è", 
         "üé≠ –ö–∞–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–∞ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –ø–µ—Å–Ω—è?", 
         "song", "mood"),
        
        ("song_mood_love", "–õ—é–±–æ–≤–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", 
         "üíï –õ—é–±–æ–≤–Ω–æ–µ - –Ω–µ–∂–Ω—ã–µ —á—É–≤—Å—Ç–≤–∞ –∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏—è", 
         "song", "mood_love"),
        
        ("song_mood_friendship", "–î—Ä—É–∂–µ—Å–∫–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ", 
         "ü§ù –î—Ä—É–∂–µ—Å–∫–æ–µ - —Ç–µ–ø–ª–∞—è –¥—Ä—É–∂–±–∞ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞", 
         "song", "mood_friendship"),
        
        ("song_mood_gratitude", "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å", 
         "üôè –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å - –ø—Ä–∏–∑–Ω–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏ —É–≤–∞–∂–µ–Ω–∏–µ", 
         "song", "mood_gratitude"),
        
        ("song_mood_celebration", "–ü—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ", 
         "üéâ –ü—Ä–∞–∑–¥–Ω–∏—á–Ω–æ–µ - —Ä–∞–¥–æ—Å—Ç—å –∏ –≤–µ—Å–µ–ª—å–µ", 
         "song", "mood_celebration"),
        
        ("song_mood_nostalgic", "–ù–æ—Å—Ç–∞–ª—å–≥–∏—á–µ—Å–∫–æ–µ", 
         "üì∏ –ù–æ—Å—Ç–∞–ª—å–≥–∏—á–µ—Å–∫–æ–µ - –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–æ—à–ª–æ–º", 
         "song", "mood_nostalgic"),
        
        ("song_instrument_request", "–ó–∞–ø—Ä–æ—Å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤", 
         "üé∏ –ö–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Å–ª—ã—à–∞—Ç—å –≤ –ø–µ—Å–Ω–µ?", 
         "song", "instruments"),
        
        ("song_instrument_piano", "–§–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ", 
         "üéπ –§–æ—Ä—Ç–µ–ø–∏–∞–Ω–æ - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –∑–≤—É—á–∞–Ω–∏–µ", 
         "song", "instrument_piano"),
        
        ("song_instrument_guitar", "–ì–∏—Ç–∞—Ä–∞", 
         "üé∏ –ì–∏—Ç–∞—Ä–∞ - –∞–∫—É—Å—Ç–∏—á–µ—Å–∫–æ–µ –∏–ª–∏ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–µ –∑–≤—É—á–∞–Ω–∏–µ", 
         "song", "instrument_guitar"),
        
        ("song_instrument_orchestra", "–û—Ä–∫–µ—Å—Ç—Ä", 
         "üéª –û—Ä–∫–µ—Å—Ç—Ä - –±–æ–≥–∞—Ç–æ–µ, –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ –∑–≤—É—á–∞–Ω–∏–µ", 
         "song", "instrument_orchestra"),
        
        ("song_instrument_electronic", "–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞", 
         "üéß –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –º—É–∑—ã–∫–∞ - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∑–≤—É—á–∞–Ω–∏–µ", 
         "song", "instrument_electronic"),
        
        ("song_instrument_mixed", "–°–º–µ—à–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", 
         "üéº –°–º–µ—à–∞–Ω–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã - –∫–æ–º–±–∏–Ω–∞—Ü–∏—è —Ä–∞–∑–Ω—ã—Ö —Å—Ç–∏–ª–µ–π", 
         "song", "instrument_mixed"),
        
        ("song_duration_request", "–ó–∞–ø—Ä–æ—Å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", 
         "‚è±Ô∏è –ö–∞–∫–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Å–Ω—è?", 
         "song", "duration"),
        
        ("song_duration_short", "–ö–æ—Ä–æ—Ç–∫–∞—è (1-2 –º–∏–Ω—É—Ç—ã)", 
         "‚è±Ô∏è –ö–æ—Ä–æ—Ç–∫–∞—è - 1-2 –º–∏–Ω—É—Ç—ã", 
         "song", "duration_short"),
        
        ("song_duration_medium", "–°—Ä–µ–¥–Ω—è—è (2-3 –º–∏–Ω—É—Ç—ã)", 
         "‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è - 2-3 –º–∏–Ω—É—Ç—ã", 
         "song", "duration_medium"),
        
        ("song_duration_long", "–î–ª–∏–Ω–Ω–∞—è (3-4 –º–∏–Ω—É—Ç—ã)", 
         "‚è±Ô∏è –î–ª–∏–Ω–Ω–∞—è - 3-4 –º–∏–Ω—É—Ç—ã", 
         "song", "duration_long"),
        
        ("song_language_request", "–ó–∞–ø—Ä–æ—Å —è–∑—ã–∫–∞", 
         "üåç –ù–∞ –∫–∞–∫–æ–º —è–∑—ã–∫–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Å–Ω—è?", 
         "song", "language"),
        
        ("song_language_russian", "–†—É—Å—Å–∫–∏–π", 
         "üá∑üá∫ –†—É—Å—Å–∫–∏–π", 
         "song", "language_russian"),
        
        ("song_language_english", "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", 
         "üá∫üá∏ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π", 
         "song", "language_english"),
        
        ("song_language_mixed", "–°–º–µ—à–∞–Ω–Ω—ã–π", 
         "üåç –°–º–µ—à–∞–Ω–Ω—ã–π - —Ä—É—Å—Å–∫–∏–π –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π", 
         "song", "language_mixed"),
        
        ("song_special_requests", "–ó–∞–ø—Ä–æ—Å –æ—Å–æ–±—ã—Ö –ø–æ–∂–µ–ª–∞–Ω–∏–π", 
         "üí≠ –ï—Å—Ç—å –ª–∏ –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –∫ –ø–µ—Å–Ω–µ?\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n‚Ä¢ –°—Å—ã–ª–∫–∏ –Ω–∞ –ª—é–±–∏–º—ã–µ –ø–µ—Å–Ω–∏\n‚Ä¢ –û—Å–æ–±—ã–µ —Å–ª–æ–≤–∞ –∏–ª–∏ —Ñ—Ä–∞–∑—ã\n‚Ä¢ –°—Ç–∏–ª—å –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è\n‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç'", 
         "song", "special_requests"),
        
        ("song_processing", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Å–Ω–∏", 
         "üéµ –°–æ–∑–¥–∞–µ–º –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –ø–µ—Å–Ω—é...\n\n–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –ø–µ—Å–Ω—è –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞!", 
         "song", "processing"),
        
        ("song_demo_ready", "–î–µ–º–æ –ø–µ—Å–Ω–∏ –≥–æ—Ç–æ–≤–æ", 
         "üéµ –í–∞—à–∞ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è –ø–µ—Å–Ω–∏ –≥–æ—Ç–æ–≤–∞!\n\n–ü–æ—Å–ª—É—à–∞–π—Ç–µ –∏ —Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –¥—É–º–∞–µ—Ç–µ:", 
         "song", "demo_ready"),
        
        ("song_demo_feedback", "–ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ –æ –¥–µ–º–æ", 
         "–ö–∞–∫ –≤–∞–º –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è? –•–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?", 
         "song", "demo_feedback"),
        
        ("song_final_ready", "–§–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–æ—Ç–æ–≤–∞", 
         "üéµ –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è –≥–æ—Ç–æ–≤–∞!\n\n–≠—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è, —Å–æ–∑–¥–∞–Ω–Ω–∞—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å –∏ –≤–∞—à–µ–≥–æ –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.", 
         "song", "final_ready"),
        
        ("song_download_ready", "–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–æ", 
         "üì• –í–∞—à–∞ –ø–µ—Å–Ω—è –≥–æ—Ç–æ–≤–∞ –∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—é!\n\n–í—ã –ø–æ–ª—É—á–∏—Ç–µ:\n‚Ä¢ –ê—É–¥–∏–æ—Ñ–∞–π–ª –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ\n‚Ä¢ –¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏\n‚Ä¢ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é", 
         "song", "download_ready"),
        
        ("song_error_voice", "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≥–æ–ª–æ—Å–∞", 
         "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑.", 
         "song", "error_voice"),
        
        ("song_error_processing", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Å–Ω–∏", 
         "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Å–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", 
         "song", "error_processing"),
        
        # === –í–´–ë–û–† –û–¢–ù–û–®–ï–ù–ò–Ø ===
        ("relation_selection", "–í—ã–±–æ—Ä –æ—Ç–Ω–æ—à–µ–Ω–∏—è", 
         "–ö–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫?", 
         "relation", "selection"),
        
        # === –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ì–ï–†–û–ï ===
        ("hero_name_request", "–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –≥–µ—Ä–æ—è", 
         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", 
         "hero", "name"),
        
        ("hero_intro_request", "–ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –≥–µ—Ä–æ—è", 
         "–ù–∞–º –≤–∞–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ –æ —Ç–æ–º, –∫–æ–º—É –±—É–¥–µ—Ç –ø–æ—Å–≤—è—â–µ–Ω–∞ –∫–Ω–∏–≥–∞ ‚ù§Ô∏è\n–ß—Ç–æ–±—ã –ø–µ—Ä—Å–æ–Ω–∞–∂ –±—ã–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂, —Ä–∞—Å—Å–∫–∞–∂–∏: —Å–∫–æ–ª—å–∫–æ –µ–º—É –ª–µ—Ç, –∫–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ —É –Ω–µ–≥–æ –≥–ª–∞–∑–∞ –∏ –µ—Å—Ç—å –ª–∏ –æ—Å–æ–±–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ü©∑\n–≠—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–º–æ–≥—É—Ç —Ö—É–¥–æ–∂–Ω–∏–∫—É –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∫–Ω–∏–≥–∏ üíû", 
         "hero", "intro"),
        
        ("gift_reason_request", "–ó–∞–ø—Ä–æ—Å –ø–æ–≤–æ–¥–∞ –ø–æ–¥–∞—Ä–∫–∞", 
         "–ù–∞–ø–∏—à–∏ –ø–æ –∫–∞–∫–æ–º—É –ø–æ–≤–æ–¥—É –º—ã —Å–æ–∑–¥–∞—ë–º –ø–µ—Å–Ω—éüé∂\n–ò–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –±–µ–∑ –ø–æ–≤–æ–¥–∞?", 
         "gift", "reason"),
        
        # === –ó–ê–ì–†–£–ó–ö–ê –§–û–¢–û–ì–†–ê–§–ò–ô ===
        ("photo_face_1", "–ó–∞–ø—Ä–æ—Å –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ –ª–∏—Ü–∞", 
         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è (–ª–∏—Ü–æ–º):", 
         "photo", "face_1"),
        
        ("photo_face_2", "–ó–∞–ø—Ä–æ—Å –≤—Ç–æ—Ä–æ–≥–æ —Ñ–æ—Ç–æ –ª–∏—Ü–∞", 
         "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è (–ª–∏—Ü–æ–º):", 
         "photo", "face_2"),
        
        ("photo_full", "–ó–∞–ø—Ä–æ—Å —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç", 
         "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç:", 
         "photo", "full"),
        
        ("photo_joint", "–ó–∞–ø—Ä–æ—Å —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ —Ñ–æ—Ç–æ", 
         "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤:", 
         "photo", "joint"),
        
        # === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ì–ï–†–û–ò ===
        ("add_hero_prompt", "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—å –≥–µ—Ä–æ—è", 
         "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è:", 
         "hero", "add"),
        
        ("new_hero_name", "–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è", 
         "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è:", 
         "hero", "new_name"),
        
        ("new_hero_intro", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è", 
         "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ –≥–µ—Ä–æ–µ {hero_name}:\n\n–ü—Ä–∏–º–µ—Ä: –≠—Ç–æ –º–æ–π –¥—Ä—É–≥, –µ–º—É 27 –ª–µ—Ç, –æ–Ω –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ö–æ–∫–µ–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–∞–∫—Å–∏ –∏ –ª—é–±–∏—Ç —Å–æ–±–∞–∫.", 
         "hero", "new_intro"),
        
        ("new_hero_photo_1", "–§–æ—Ç–æ –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è 1", 
         "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –≥–µ—Ä–æ—è {hero_name} (–ª–∏—Ü–æ–º):", 
         "hero", "new_photo_1"),
        
        ("new_hero_photo_2", "–§–æ—Ç–æ –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è 2", 
         "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –≥–µ—Ä–æ—è {hero_name} (–ª–∏—Ü–æ–º):", 
         "hero", "new_photo_2"),
        
        ("new_hero_photo_full", "–§–æ—Ç–æ –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç", 
         "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≥–µ—Ä–æ—è {hero_name} –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç:", 
         "hero", "new_photo_full"),
        
        # === –í–û–ü–†–û–°–´ –ü–û –û–¢–ù–û–®–ï–ù–ò–Æ ===
        ("question_1_intro", "–í–≤–µ–¥–µ–Ω–∏–µ –∫ –ø–µ—Ä–≤–æ–º—É –≤–æ–ø—Ä–æ—Å—É", 
         "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å {relation}.\n\n–í–æ–ø—Ä–æ—Å 1 –∏–∑ 3:", 
         "question", "intro"),
        
        ("question_1_text", "–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å", 
         "–ß—Ç–æ –≤—ã –æ–±—ã—á–Ω–æ –¥–µ–ª–∞–µ—Ç–µ –≤–º–µ—Å—Ç–µ —Å {relation}?", 
         "question", "q1"),
        
        ("question_2_text", "–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å", 
         "–í–æ–ø—Ä–æ—Å 2 –∏–∑ 3:\n\n–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç —Å {relation} –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —Å–∞–º—ã–º —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º?", 
         "question", "q2"),
        
        ("question_3_text", "–¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å", 
         "–í–æ–ø—Ä–æ—Å 3 –∏–∑ 3:\n\n–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–∂–µ–ª–∞—Ç—å {relation}?", 
         "question", "q3"),
        
        ("answer_request", "–ó–∞–ø—Ä–æ—Å –æ—Ç–≤–µ—Ç–∞", 
         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:", 
         "question", "answer"),
        
        # === –û–ü–õ–ê–¢–ê ===
        ("payment_intro", "–í–≤–µ–¥–µ–Ω–∏–µ –∫ –æ–ø–ª–∞—Ç–µ", 
         "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º –∫ –æ–ø–ª–∞—Ç–µ.", 
         "payment", "intro"),
        
        ("payment_success", "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞", 
         "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É.", 
         "payment", "success"),
        
        ("payment_error", "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã", 
         "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", 
         "payment", "error"),
        
        # === –í–´–ë–û–† –°–¢–†–ê–ù–ò–¶ ===
        ("page_selection_intro", "–í–≤–µ–¥–µ–Ω–∏–µ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü", 
         "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏. –í–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º 19 —Å—Ç—Ä–∞–Ω–∏—Ü.", 
         "page_selection", "intro"),
        
        ("page_selection_minimum", "–ú–∏–Ω–∏–º—É–º —Å—Ç—Ä–∞–Ω–∏—Ü", 
         "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 19 —Å—Ç—Ä–∞–Ω–∏—Ü, –∑–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ '–î–∞–ª–µ–µ'.", 
         "page_selection", "minimum"),
        
        ("page_selection_continue", "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞", 
         "‚ÑπÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ '–î–∞–ª–µ–µ' –∫–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –º–∏–Ω–∏–º—É–º 19 —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", 
         "page_selection", "continue"),
        
        ("page_selected", "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–∞", 
         "‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—ã–±—Ä–∞–Ω–∞!", 
         "page_selection", "selected"),
        
        ("page_removed", "–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–±—Ä–∞–Ω–∞", 
         "‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–±—Ä–∞–Ω–∞ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö", 
         "page_selection", "removed"),
        
        # === –î–ï–ú–û-–ö–û–ù–¢–ï–ù–¢ ===
        ("demo_content_intro", "–í–≤–µ–¥–µ–Ω–∏–µ –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞", 
         "üé® –í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏:", 
         "demo", "intro"),
        
        ("demo_content_continue", "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–µ–º–æ", 
         "–ö–∞–∫ –≤–∞–º —Ç–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã? –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", 
         "demo", "continue"),
        
        # === –ß–ï–†–ù–û–í–ò–ö ===
        ("draft_review_intro", "–í–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞", 
         "üìñ –í–æ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –≤–∞—à–µ–π –∫–Ω–∏–≥–∏. –ö–∞–∫ –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç?", 
         "draft", "intro"),
        
        ("draft_feedback_request", "–ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ –æ —á–µ—Ä–Ω–æ–≤–∏–∫–µ", 
         "–ï—Å–ª–∏ –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ '–í—Å—ë —Å—É–ø–µ—Ä'. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ '–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏'.", 
         "draft", "feedback"),
        
        ("draft_edit_request", "–ó–∞–ø—Ä–æ—Å –ø—Ä–∞–≤–æ–∫", 
         "–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ –∫–Ω–∏–≥–µ:", 
         "draft", "edit"),
        
        ("draft_approved", "–ß–µ—Ä–Ω–æ–≤–∏–∫ –æ–¥–æ–±—Ä–µ–Ω", 
         "–û—Ç–ª–∏—á–Ω–æ! –í–∞—à —á–µ—Ä–Ω–æ–≤–∏–∫ –æ–¥–æ–±—Ä–µ–Ω.", 
         "draft", "approved"),
        
        # === –í–´–ë–û–† –û–ë–õ–û–ñ–ö–ò ===
        ("cover_selection_intro", "–í–≤–µ–¥–µ–Ω–∏–µ –∫ –≤—ã–±–æ—Ä—É –æ–±–ª–æ–∂–∫–∏", 
         "üé® –í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–ª–æ–∂–µ–∫ –¥–ª—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏:", 
         "cover", "intro"),
        
        ("cover_selected", "–û–±–ª–æ–∂–∫–∞ –≤—ã–±—Ä–∞–Ω–∞", 
         "‚úÖ –û–±–ª–æ–∂–∫–∞ –≤—ã–±—Ä–∞–Ω–∞: {cover_id}", 
         "cover", "selected"),
        
        # === –î–û–°–¢–ê–í–ö–ê ===
        ("delivery_address_request", "–ó–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", 
         "üì¶ <b>–î–ª—è –ø–µ—á–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω—É–∂–µ–Ω –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n‚Ä¢ –ò–Ω–¥–µ–∫—Å\n‚Ä¢ –ì–æ—Ä–æ–¥\n‚Ä¢ –£–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞\n‚Ä¢ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏", 
         "delivery", "address"),
        
        ("delivery_confirmed", "–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", 
         "‚úÖ –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!", 
         "delivery", "confirmed"),
        
        # === –ó–ê–í–ï–†–®–ï–ù–ò–ï ===
        ("order_completed", "–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω", 
         "üéâ <b>–í–∞—à–∞ –∫–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞!</b>\n\n–ú—ã —Å–æ–∑–¥–∞–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–Ω–∏–≥—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å. –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –æ–Ω–∞ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ —Ç–µ–ø–ª—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è!", 
         "completion", "finished"),
        
        ("order_in_progress", "–ó–∞–∫–∞–∑ –≤ —Ä–∞–±–æ—Ç–µ", 
         "üîÑ –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ —Ä–∞–±–æ—Ç—É. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.", 
         "completion", "in_progress"),
        
        # === –û–®–ò–ë–ö–ò ===
        ("error_photo_expected", "–û—à–∏–±–∫–∞ - –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ", 
         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.", 
         "error", "photo_expected"),
        
        ("error_text_expected", "–û—à–∏–±–∫–∞ - –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç", 
         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∞ –Ω–µ —Ñ–æ—Ç–æ.", 
         "error", "text_expected"),
        
        ("error_general", "–û–±—â–∞—è –æ—à–∏–±–∫–∞", 
         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", 
         "error", "general"),
        
        ("error_photo_processing", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ", 
         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.", 
         "error", "photo_processing"),
        
        ("error_order_creation", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞", 
         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", 
         "error", "order_creation"),
        
        ("error_payment", "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã", 
         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –æ–ø–ª–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", 
         "error", "payment"),
        
        # === –ò–ù–§–û–†–ú–ê–¶–ò–û–ù–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===
        ("info_photo_received", "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ", 
         "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.", 
         "info", "photo_received"),
        
        ("info_waiting", "–û–∂–∏–¥–∞–Ω–∏–µ", 
         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...", 
         "info", "waiting"),
        
        ("info_processing", "–û–±—Ä–∞–±–æ—Ç–∫–∞", 
         "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å...", 
         "info", "processing"),
        
        # === –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø ===
        ("reminder_payment_24h", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ 24—á", 
         "–í–æ–∑–º–æ–∂–Ω–æ, —Ü–µ–Ω–∞ –≤–∞—Å —Å–º—É—Ç–∏–ª–∞? –ú—ã –º–æ–∂–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º.", 
         "reminder", "payment_24h"),
        
        ("reminder_payment_48h", "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –æ–ø–ª–∞—Ç–µ 48—á", 
         "–ì–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –∫–Ω–∏–≥—É –ø—Ä–æ—â–µ, –Ω–æ –Ω–µ –º–µ–Ω–µ–µ –∏—Å–∫—Ä–µ–Ω–Ω–µ–π. –î–∞–π—Ç–µ –∑–Ω–∞—Ç—å, –µ—Å–ª–∏ –≤–∞–º —ç—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.", 
         "reminder", "payment_48h"),
        
        # === –ö–ù–û–ü–ö–ò –ò –ò–ù–¢–ï–†–§–ï–ô–° ===
        ("button_yes", "–ö–Ω–æ–ø–∫–∞ –î–∞", 
         "–î–∞", 
         "button", "yes"),
        
        ("button_no", "–ö–Ω–æ–ø–∫–∞ –ù–µ—Ç", 
         "–ù–µ—Ç", 
         "button", "no"),
        
        ("button_next", "–ö–Ω–æ–ø–∫–∞ –î–∞–ª–µ–µ", 
         "–î–∞–ª–µ–µ", 
         "button", "next"),
        
        ("button_back", "–ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥", 
         "–ù–∞–∑–∞–¥", 
         "button", "back"),
        
        ("button_edit", "–ö–Ω–æ–ø–∫–∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
         "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", 
         "button", "edit"),
        
        ("button_approve", "–ö–Ω–æ–ø–∫–∞ –û–¥–æ–±—Ä–∏—Ç—å", 
         "–û–¥–æ–±—Ä–∏—Ç—å", 
         "button", "approve"),
        
        ("button_select", "–ö–Ω–æ–ø–∫–∞ –í—ã–±—Ä–∞—Ç—å", 
         "–í—ã–±—Ä–∞—Ç—å", 
         "button", "select"),
        
        ("button_remove", "–ö–Ω–æ–ø–∫–∞ –£–±—Ä–∞—Ç—å", 
         "–£–±—Ä–∞—Ç—å", 
         "button", "remove"),
    ]
    
    for i, (message_key, message_name, content, context, stage) in enumerate(messages, 1):
        await upsert_bot_message(message_key, message_name, content, context, stage, i)
async def auto_collect_bot_messages() -> None:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–¥–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑–µ
    existing_messages = await get_bot_messages()
    if existing_messages:
        print("üîç –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—Å–æ–±–∏—Ä–∞–Ω–∏–µ")
        return
    
    # –≠—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä—è—Ç—å –ø–æ –º–µ—Ä–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–¥
    auto_messages = [
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑ WELCOME_TEXT
        ("welcome_text", "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç", 
         "üëã –ü—Ä–∏–≤–µ—Ç!\n\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–æ–¥–∞—Ä–æ–∫ ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∫–Ω–∏–≥—É –∏–ª–∏ –ø–µ—Å–Ω—é —Å —Ç–≤–æ–∏–º –≥–æ–ª–æ—Å–æ–º, –ª–∏—Ü–æ–º –∏ —Ç–µ–ø–ª–æ–º ‚Äî –¥–ª—è –ª—é–±–∏–º–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.\n\n–≠—Ç–æ –±—É–¥–µ—Ç –∏—Å—Ç–æ—Ä–∏—è –∏–ª–∏ –º–µ–ª–æ–¥–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã ‚Äî –≥–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π.\n\n–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? üíå", 
         "welcome", "start"),
        
        # –°–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–¥–∞ –±–æ—Ç–∞
        ("phone_contact_request", "–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–∞", 
         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∞ –∑–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç –≤—Ä—É—á–Ω—É—é.", 
         "registration", "phone"),
        
        ("ready_to_start", "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å", 
         "üëã –ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞?", 
         "welcome", "start"),
        
        ("first_name_request", "–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏", 
         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ñ–∞–º–∏–ª–∏—é:", 
         "registration", "name"),
        
        ("last_name_request", "–ó–∞–ø—Ä–æ—Å —Ñ–∞–º–∏–ª–∏–∏", 
         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:", 
         "registration", "name"),
        
        ("data_saved", "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", 
         "–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.", 
         "registration", "success"),
        
        ("recipient_name_request", "–ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è", 
         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:", 
         "hero", "name"),
        
        ("hero_description_request", "–ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –≥–µ—Ä–æ—è", 
         "–ù–∞–º –≤–∞–∂–Ω–æ —É–∑–Ω–∞—Ç—å —á—É—Ç—å –±–æ–ª—å—à–µ –æ —Ç–æ–º, –∫–æ–º—É –±—É–¥–µ—Ç –ø–æ—Å–≤—è—â–µ–Ω–∞ –∫–Ω–∏–≥–∞ ‚ù§Ô∏è\n–ß—Ç–æ–±—ã –ø–µ—Ä—Å–æ–Ω–∞–∂ –±—ã–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ—Ö–æ–∂, —Ä–∞—Å—Å–∫–∞–∂–∏: —Å–∫–æ–ª—å–∫–æ –µ–º—É –ª–µ—Ç, –∫–∞–∫–æ–≥–æ —Ü–≤–µ—Ç–∞ —É –Ω–µ–≥–æ –≥–ª–∞–∑–∞ –∏ –µ—Å—Ç—å –ª–∏ –æ—Å–æ–±–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ü©∑\n–≠—Ç–∏ –¥–µ—Ç–∞–ª–∏ –ø–æ–º–æ–≥—É—Ç —Ö—É–¥–æ–∂–Ω–∏–∫—É –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –∫–Ω–∏–≥–∏ üíû", 
         "hero", "intro"),
        
        ("gift_occasion_request", "–ó–∞–ø—Ä–æ—Å –ø–æ–≤–æ–¥–∞", 
         "–ù–∞–ø–∏—à–∏ –ø–æ –∫–∞–∫–æ–º—É –ø–æ–≤–æ–¥—É –º—ã —Å–æ–∑–¥–∞—ë–º –ø–µ—Å–Ω—éüé∂\n–ò–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥–∞—Ä–æ–∫ –±–µ–∑ –ø–æ–≤–æ–¥–∞?", 
         "gift", "reason"),
        
        ("first_face_photo", "–ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –ª–∏—Ü–∞", 
         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è (–ª–∏—Ü–æ–º):", 
         "photo", "face_1"),
        
        ("second_face_photo", "–í—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –ª–∏—Ü–∞", 
         "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è (–ª–∏—Ü–æ–º):", 
         "photo", "face_2"),
        
        ("full_body_photo", "–§–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç", 
         "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –≥–µ—Ä–æ—è –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç:", 
         "photo", "full"),
        
        ("add_second_hero", "–î–æ–±–∞–≤–∏—Ç—å –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è", 
         "–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–≥–æ –≥–µ—Ä–æ—è:", 
         "hero", "add"),
        
        ("new_hero_name_input", "–ò–º—è –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è", 
         "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è:", 
         "hero", "new_name"),
        
        ("new_hero_description", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è", 
         "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ –≥–µ—Ä–æ–µ {hero_name}:\n\n–ü—Ä–∏–º–µ—Ä: –≠—Ç–æ –º–æ–π –¥—Ä—É–≥, –µ–º—É 27 –ª–µ—Ç, –æ–Ω –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ö–æ–∫–µ–µ–º, —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ç–∞–∫—Å–∏ –∏ –ª—é–±–∏—Ç —Å–æ–±–∞–∫.", 
         "hero", "new_intro"),
        
        ("new_hero_face_1", "–ü–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è", 
         "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –≥–µ—Ä–æ—è {hero_name} (–ª–∏—Ü–æ–º):", 
         "hero", "new_photo_1"),
        
        ("new_hero_face_2", "–í—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è", 
         "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–µ —Ñ–æ—Ç–æ –≥–µ—Ä–æ—è {hero_name} (–ª–∏—Ü–æ–º):", 
         "hero", "new_photo_2"),
        
        ("new_hero_full", "–§–æ—Ç–æ –Ω–æ–≤–æ–≥–æ –≥–µ—Ä–æ—è –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç", 
         "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –≥–µ—Ä–æ—è {hero_name} –≤ –ø–æ–ª–Ω—ã–π —Ä–æ—Å—Ç:", 
         "hero", "new_photo_full"),
        
        ("joint_photo_request", "–°–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ", 
         "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–≤–º–µ—Å—Ç–Ω–æ–µ —Ñ–æ—Ç–æ –≤—Å–µ—Ö –≥–µ—Ä–æ–µ–≤:", 
         "photo", "joint"),
        
        ("questions_intro", "–í–≤–µ–¥–µ–Ω–∏–µ –∫ –≤–æ–ø—Ä–æ—Å–∞–º", 
         "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–∞—à–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å {relation}.\n\n–í–æ–ø—Ä–æ—Å 1 –∏–∑ 3:", 
         "question", "intro"),
        
        ("question_1", "–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å", 
         "–ß—Ç–æ –≤—ã –æ–±—ã—á–Ω–æ –¥–µ–ª–∞–µ—Ç–µ –≤–º–µ—Å—Ç–µ —Å {relation}?", 
         "question", "q1"),
        
        ("question_2", "–í—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å", 
         "–í–æ–ø—Ä–æ—Å 2 –∏–∑ 3:\n\n–ö–∞–∫–æ–π –º–æ–º–µ–Ω—Ç —Å {relation} –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —Å–∞–º—ã–º —Ç—Ä–æ–≥–∞—Ç–µ–ª—å–Ω—ã–º?", 
         "question", "q2"),
        
        ("question_3", "–¢—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å", 
         "–í–æ–ø—Ä–æ—Å 3 –∏–∑ 3:\n\n–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–∂–µ–ª–∞—Ç—å {relation}?", 
         "question", "q3"),
        
        ("answer_input", "–í–≤–æ–¥ –æ—Ç–≤–µ—Ç–∞", 
         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:", 
         "question", "answer"),
        
        ("payment_transition", "–ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ–ø–ª–∞—Ç–µ", 
         "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π—Ç–µ –ø–µ—Ä–µ–π–¥–µ–º –∫ –æ–ø–ª–∞—Ç–µ.", 
         "payment", "intro"),
        
        ("page_selection_intro", "–í–≤–µ–¥–µ–Ω–∏–µ –∫ –≤—ã–±–æ—Ä—É —Å—Ç—Ä–∞–Ω–∏—Ü", 
         "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏. –í–∞–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º 19 —Å—Ç—Ä–∞–Ω–∏—Ü.", 
         "page_selection", "intro"),
        
        ("minimum_pages_error", "–û—à–∏–±–∫–∞ –º–∏–Ω–∏–º—É–º–∞ —Å—Ç—Ä–∞–Ω–∏—Ü", 
         "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 19 —Å—Ç—Ä–∞–Ω–∏—Ü, –∑–∞—Ç–µ–º –Ω–∞–ø–∏—à–∏—Ç–µ '–î–∞–ª–µ–µ'.", 
         "page_selection", "minimum"),
        
        ("continue_prompt", "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ", 
         "‚ÑπÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ '–î–∞–ª–µ–µ' –∫–æ–≥–¥–∞ –≤—ã–±–µ—Ä–µ—Ç–µ –º–∏–Ω–∏–º—É–º 19 —Å—Ç—Ä–∞–Ω–∏—Ü –∏ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", 
         "page_selection", "continue"),
        
        ("demo_intro", "–í–≤–µ–¥–µ–Ω–∏–µ –¥–µ–º–æ", 
         "üé® –í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏:", 
         "demo", "intro"),
        
        ("demo_continue", "–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–µ–º–æ", 
         "–ö–∞–∫ –≤–∞–º —Ç–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã? –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", 
         "demo", "continue"),
        
        ("draft_intro", "–í–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–Ω–æ–≤–∏–∫–∞", 
         "üìñ –í–æ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –≤–∞—à–µ–π –∫–Ω–∏–≥–∏. –ö–∞–∫ –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç?", 
         "draft", "intro"),
        
        ("draft_feedback", "–û—Ç–∑—ã–≤ –æ —á–µ—Ä–Ω–æ–≤–∏–∫–µ", 
         "–ï—Å–ª–∏ –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ '–í—Å—ë —Å—É–ø–µ—Ä'. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ '–í–Ω–µ—Å—Ç–∏ –ø—Ä–∞–≤–∫–∏'.", 
         "draft", "feedback"),
        
        ("cover_intro", "–í–≤–µ–¥–µ–Ω–∏–µ –∫ –æ–±–ª–æ–∂–∫–∞–º", 
         "üé® <b>–í–∞—Ä–∏–∞–Ω—Ç—ã –æ–±–ª–æ–∂–µ–∫ –¥–ª—è –≤–∞—à–µ–π –∫–Ω–∏–≥–∏:</b>", 
         "cover", "intro"),
        
        ("cover_selected", "–û–±–ª–æ–∂–∫–∞ –≤—ã–±—Ä–∞–Ω–∞", 
         "‚úÖ –û–±–ª–æ–∂–∫–∞ –≤—ã–±—Ä–∞–Ω–∞: {cover_id}", 
         "cover", "selected"),
        
        ("delivery_address", "–ó–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", 
         "üì¶ <b>–î–ª—è –ø–µ—á–∞—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –Ω—É–∂–µ–Ω –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏</b>\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n‚Ä¢ –ò–Ω–¥–µ–∫—Å\n‚Ä¢ –ì–æ—Ä–æ–¥\n‚Ä¢ –£–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞\n‚Ä¢ –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è\n‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏", 
         "delivery", "address"),
        
        ("order_finished", "–ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω", 
         "üéâ <b>–í–∞—à–∞ –∫–Ω–∏–≥–∞ –≥–æ—Ç–æ–≤–∞!</b>\n\n–ú—ã —Å–æ–∑–¥–∞–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∫–Ω–∏–≥—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å. –ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –æ–Ω–∞ –ø—Ä–∏–Ω–µ—Å–µ—Ç —Ä–∞–¥–æ—Å—Ç—å –∏ —Ç–µ–ø–ª—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è!", 
         "completion", "finished"),
        
        # –û—à–∏–±–∫–∏
        ("photo_expected_error", "–û—à–∏–±–∫–∞ - –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ", 
         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç.", 
         "error", "photo_expected"),
        
        ("text_expected_error", "–û—à–∏–±–∫–∞ - –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç", 
         "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, –∞ –Ω–µ —Ñ–æ—Ç–æ.", 
         "error", "text_expected"),
        
        ("photo_processing_error", "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ", 
         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", 
         "error", "photo_processing"),
        
        ("order_creation_error", "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞", 
         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", 
         "error", "order_creation"),
        
        ("payment_error", "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã", 
         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ –æ–ø–ª–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.", 
         "error", "payment"),
        
        ("cover_loading_error", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–±–ª–æ–∂–µ–∫", 
         "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –æ–±–ª–æ–∂–µ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", 
         "error", "cover_loading"),
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        ("photo_received_info", "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ", 
         "–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ, –Ω–æ —Å–µ–π—á–∞—Å –Ω–µ –æ–∂–∏–¥–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π.", 
         "info", "photo_received"),
        
        ("processing_info", "–û–±—Ä–∞–±–æ—Ç–∫–∞", 
         "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞—à –∑–∞–ø—Ä–æ—Å...", 
         "info", "processing"),
        
        # === –°–û–û–ë–©–ï–ù–ò–Ø –î–õ–Ø –ü–ï–°–ù–ò (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä) ===
        ("song_voice_processing", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–∞", 
         "üé§ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à –≥–æ–ª–æ—Å...", 
         "song", "voice_processing"),
        
        ("song_style_selected", "–°—Ç–∏–ª—å –≤—ã–±—Ä–∞–Ω", 
         "‚úÖ –°—Ç–∏–ª—å –ø–µ—Å–Ω–∏ –≤—ã–±—Ä–∞–Ω!", 
         "song", "style_selected"),
        
        ("song_mood_selected", "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ", 
         "‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–µ—Å–Ω–∏ –≤—ã–±—Ä–∞–Ω–æ!", 
         "song", "mood_selected"),
        
        ("song_instruments_selected", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã", 
         "‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –≤—ã–±—Ä–∞–Ω—ã!", 
         "song", "instruments_selected"),
        
        ("song_duration_selected", "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–∞", 
         "‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Å–Ω–∏ –≤—ã–±—Ä–∞–Ω–∞!", 
         "song", "duration_selected"),
        
        ("song_language_selected", "–Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω", 
         "‚úÖ –Ø–∑—ã–∫ –ø–µ—Å–Ω–∏ –≤—ã–±—Ä–∞–Ω!", 
         "song", "language_selected"),
        
        ("song_special_requests_saved", "–û—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", 
         "‚úÖ –í–∞—à–∏ –æ—Å–æ–±—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!", 
         "song", "special_requests_saved"),
        
        ("song_creation_started", "–°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –Ω–∞—á–∞–ª–æ—Å—å", 
         "üéµ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞—à–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –ø–µ—Å–Ω–∏...", 
         "song", "creation_started"),
        
        ("song_lyrics_ready", "–¢–µ–∫—Å—Ç –ø–µ—Å–Ω–∏ –≥–æ—Ç–æ–≤", 
         "üìù –¢–µ–∫—Å—Ç –≤–∞—à–µ–π –ø–µ—Å–Ω–∏ –≥–æ—Ç–æ–≤!", 
         "song", "lyrics_ready"),
        
        ("song_melody_ready", "–ú–µ–ª–æ–¥–∏—è –≥–æ—Ç–æ–≤–∞", 
         "üéº –ú–µ–ª–æ–¥–∏—è –≤–∞—à–µ–π –ø–µ—Å–Ω–∏ –≥–æ—Ç–æ–≤–∞!", 
         "song", "melody_ready"),
        
        ("song_arrangement_ready", "–ê—Ä–∞–Ω–∂–∏—Ä–æ–≤–∫–∞ –≥–æ—Ç–æ–≤–∞", 
         "üéπ –ê—Ä–∞–Ω–∂–∏—Ä–æ–≤–∫–∞ –≤–∞—à–µ–π –ø–µ—Å–Ω–∏ –≥–æ—Ç–æ–≤–∞!", 
         "song", "arrangement_ready"),
        
        ("song_recording_ready", "–ó–∞–ø–∏—Å—å –≥–æ—Ç–æ–≤–∞", 
         "üé§ –ó–∞–ø–∏—Å—å –≤–∞—à–µ–π –ø–µ—Å–Ω–∏ –≥–æ—Ç–æ–≤–∞!", 
         "song", "recording_ready"),
        
        ("song_mixing_ready", "–°–≤–µ–¥–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ", 
         "üéß –°–≤–µ–¥–µ–Ω–∏–µ –≤–∞—à–µ–π –ø–µ—Å–Ω–∏ –≥–æ—Ç–æ–≤–æ!", 
         "song", "mixing_ready"),
        
        ("song_mastering_ready", "–ú–∞—Å—Ç–µ—Ä–∏–Ω–≥ –≥–æ—Ç–æ–≤", 
         "üéöÔ∏è –ú–∞—Å—Ç–µ—Ä–∏–Ω–≥ –≤–∞—à–µ–π –ø–µ—Å–Ω–∏ –≥–æ—Ç–æ–≤!", 
         "song", "mastering_ready"),
        
        ("song_quality_check", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞", 
         "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –≤–∞—à–µ–π –ø–µ—Å–Ω–∏...", 
         "song", "quality_check"),
        
        ("song_upload_ready", "–ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤–∞", 
         "üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à—É –ø–µ—Å–Ω—é...", 
         "song", "upload_ready"),
        
        ("song_complete", "–ü–µ—Å–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 
         "üéâ –í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–µ—Å–Ω—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞!", 
         "song", "complete"),
        
        ("song_share_ready", "–ì–æ—Ç–æ–≤–æ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ", 
         "üì§ –í–∞—à–∞ –ø–µ—Å–Ω—è –≥–æ—Ç–æ–≤–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é!", 
         "song", "share_ready"),
        
        # === –û–ë–©–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –î–õ–Ø –ö–ù–ò–ì–ò –ò –ü–ï–°–ù–ò ===
        ("product_selection_confirmation", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–∞", 
         "–û—Ç–ª–∏—á–Ω–æ! –í—ã –≤—ã–±—Ä–∞–ª–∏: {product}", 
         "common", "product_confirmation"),
        
        ("order_summary", "–°–≤–æ–¥–∫–∞ –∑–∞–∫–∞–∑–∞", 
         "üìã –°–≤–æ–¥–∫–∞ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:\n\n–ü—Ä–æ–¥—É–∫—Ç: {product}\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient}\n–ü–æ–≤–æ–¥: {occasion}\n\n–í—Å–µ –≤–µ—Ä–Ω–æ?", 
         "common", "order_summary"),
        
        ("order_confirmed", "–ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω", 
         "‚úÖ –ó–∞–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É...", 
         "common", "order_confirmed"),
        
        ("progress_update", "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞", 
         "üîÑ –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress}%", 
         "common", "progress_update"),
        
        ("estimated_time", "–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è", 
         "‚è±Ô∏è –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {time}", 
         "common", "estimated_time"),
        
        ("contact_support", "–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", 
         "üìû –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support", 
         "common", "contact_support"),
        
        ("thank_you", "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å", 
         "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–∫–∞–∑! –ú—ã —Å–æ–∑–¥–∞–¥–∏–º –¥–ª—è –≤–∞—Å —á—Ç–æ-—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ.", 
         "common", "thank_you"),
        
        ("feedback_request", "–ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞", 
         "üí≠ –ö–∞–∫ –≤–∞–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤ –æ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ!", 
         "common", "feedback_request"),
        
        ("recommendation_request", "–ó–∞–ø—Ä–æ—Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", 
         "üåü –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç? –ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –Ω–∞—Å –¥—Ä—É–∑—å—è–º!", 
         "common", "recommendation_request"),
        
        # === –í–´–ë–û–† –ü–û–õ–ê ===
        ("gender_request", "–ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞", 
         "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä ‚ú®\n–ú—ã –ø–æ–∑–∞–±–æ—Ç–∏–º—Å—è –æ —Ç–æ–º, —á—Ç–æ–±—ã —Ç–≤–æ—è –∫–Ω–∏–≥–∞ –ø–æ–ª—É—á–∏–ª–∞—Å—å –¥—É—à–µ–≤–Ω–æ–π –∏ –±–µ—Ä–µ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞ –≤—Å–µ –≤–∞–∂–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è.\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –º—ã –Ω–∞—á–Ω—ë–º —Å–æ–±–∏—Ä–∞—Ç—å —Ç–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é üìñ\n\nüë§ –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", 
         "gender", "selection"),
    ]
    
    for message_key, message_name, content, context, stage in auto_messages:
        await upsert_bot_message(message_key, message_name, content, context, stage) 
async def get_order_other_heroes(order_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥—Ä—É–≥–∏—Ö –≥–µ—Ä–æ–µ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏–∑ hero_photos —Ç–∞–±–ª–∏—Ü—ã –∏ order_data"""
    async with aiosqlite.connect(DB_PATH) as db:
        heroes = {}
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã hero_photos
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≥–µ—Ä–æ–µ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id} –∏–∑ —Ç–∞–±–ª–∏—Ü—ã hero_photos")
        async with db.execute('''
            SELECT filename, photo_type, hero_name, created_at
            FROM hero_photos
            WHERE order_id = ?
            ORDER BY created_at ASC
        ''', (order_id,)) as cursor:
            hero_photo_rows = await cursor.fetchall()
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ {len(hero_photo_rows)} —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≥–µ—Ä–æ–µ–≤")
            
            for filename, photo_type, hero_name, created_at in hero_photo_rows:
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è –≥–µ—Ä–æ—è, –∑–∞–º–µ–Ω—è—è –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–µ—à –Ω–∞ –ø—Ä—è–º–æ–π
                clean_hero_name = hero_name.replace('\\', '/') if hero_name else ''
                
                if clean_hero_name not in heroes:
                    heroes[clean_hero_name] = {
                        'id': len(heroes) + 1,
                        'hero_name': clean_hero_name,
                        'hero_intro': '',
                        'face_1': '',
                        'face_2': '',
                        'full': '',
                        'created_at': created_at
                    }
                
                # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è —Ñ–∞–π–ª–∞, –∑–∞–º–µ–Ω—è—è –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–µ—à –Ω–∞ –ø—Ä—è–º–æ–π
                clean_filename = filename.replace('\\', '/') if filename else ''
                
                # –ö–æ–¥–∏—Ä—É–µ–º filename –¥–ª—è URL
                from urllib.parse import quote
                encoded_filename = quote(clean_filename)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –ø–æ–ª–µ
                if photo_type == 'face_1':
                    heroes[clean_hero_name]['face_1'] = f"uploads/{encoded_filename}"
                elif photo_type == 'face_2':
                    heroes[clean_hero_name]['face_2'] = f"uploads/{encoded_filename}"
                elif photo_type == 'full':
                    heroes[clean_hero_name]['full'] = f"uploads/{encoded_filename}"
        
        # –¢–µ–ø–µ—Ä—å –¥–æ–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ order_data (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è intro)
        async with db.execute('SELECT order_data FROM orders WHERE id = ?', (order_id,)) as cursor:
            row = await cursor.fetchone()
            
            if row and row[0]:
                try:
                    order_data = json.loads(row[0])
                    other_heroes = order_data.get('other_heroes', [])
                    print(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ {len(other_heroes)} –≥–µ—Ä–æ–µ–≤ –≤ order_data")
                    
                    # –î–æ–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ—Ä–æ—è—Ö –∏–∑ order_data
                    for hero in other_heroes:
                        hero_name = hero.get('name', '')
                        hero_intro = hero.get('intro', '')
                        
                        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º—è –≥–µ—Ä–æ—è, –∑–∞–º–µ–Ω—è—è –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–µ—à –Ω–∞ –ø—Ä—è–º–æ–π
                        clean_hero_name = hero_name.replace('\\', '/') if hero_name else ''
                        
                        if clean_hero_name in heroes:
                            heroes[clean_hero_name]['hero_intro'] = hero_intro
                        elif hero_intro:  # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ, –Ω–æ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                            heroes[clean_hero_name] = {
                                'id': len(heroes) + 1,
                                'hero_name': clean_hero_name,
                                'hero_intro': hero_intro,
                                'face_1': '',
                                'face_2': '',
                                'full': '',
                                'created_at': ''
                            }
                            
                except json.JSONDecodeError:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ order_data –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
        
        result = list(heroes.values())
        print(f"‚úÖ –ò—Ç–æ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(result)} –≥–µ—Ä–æ–µ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {result}")
        return result



async def assign_manager_to_order(order_id: int) -> bool:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫ –∑–∞–∫–∞–∑—É –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø—É round-robin, –∏—Å–∫–ª—é—á–∞—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–≤"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
        selected_manager_id = await get_next_manager_in_queue()
        
        if not selected_manager_id:
            return False
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫ –∑–∞–∫–∞–∑—É
        await db.execute('''
            UPDATE orders
            SET assigned_manager_id = ?
            WHERE id = ?
        ''', (selected_manager_id, order_id))
        
        await db.commit()
        return True

async def assign_managers_to_all_orders() -> dict:
    """–ù–∞–∑–Ω–∞—á–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫–æ –≤—Å–µ–º –∑–∞–∫–∞–∑–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –∏—Ö –Ω–µ –∏–º–µ—é—Ç"""
    print("üîç –û–¢–õ–ê–î–ö–ê: assign_managers_to_all_orders() –≤—ã–∑–≤–∞–Ω–∞")
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑—ã –±–µ–∑ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        async with db.execute('''
            SELECT id FROM orders WHERE assigned_manager_id IS NULL
        ''') as cursor:
            unassigned_orders = await cursor.fetchall()
        
        if not unassigned_orders:
            return {"success": True, "message": "–í—Å–µ –∑–∞–∫–∞–∑—ã —É–∂–µ –∏–º–µ—é—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", "assigned_count": 0}
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –±–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {len(unassigned_orders)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        async with db.execute('''
            SELECT id, email, is_super_admin FROM managers ORDER BY id
        ''') as cursor:
            managers = await cursor.fetchall()
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –î–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {len(managers)}")
        for manager in managers:
            print(f"   ID: {manager[0]}, Email: {manager[1]}, –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω: {manager[2]}")
        
        success_count = 0
        for (order_id,) in unassigned_orders:
            try:
                print(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–∞–∑–Ω–∞—á–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫ –∑–∞–∫–∞–∑—É {order_id}")
                success = await assign_manager_to_order(order_id)
                if success:
                    success_count += 1
                    print(f"   ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞–∑–Ω–∞—á–µ–Ω –∫ –∑–∞–∫–∞–∑—É {order_id}")
                else:
                    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫ –∑–∞–∫–∞–∑—É {order_id}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫ –∑–∞–∫–∞–∑—É {order_id}: {e}")
        
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –ò—Ç–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ: {success_count}/{len(unassigned_orders)}")
        
        return {
            "success": True, 
            "message": f"–ù–∞–∑–Ω–∞—á–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –∫ {success_count} –∑–∞–∫–∞–∑–∞–º –∏–∑ {len(unassigned_orders)}", 
            "assigned_count": success_count,
            "total_unassigned": len(unassigned_orders)
        }

async def get_next_page_number(order_id: int) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(DB_PATH) as db:
        db.row_factory = aiosqlite.Row
        async with db.execute('''
            SELECT MAX(page_number) as max_page FROM order_pages 
            WHERE order_id = ?
        ''', (order_id,)) as cursor:
            row = await cursor.fetchone()
            print(f"üîç –û–¢–õ–ê–î–ö–ê: get_next_page_number –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: row={row}")
            if row and row['max_page'] is not None:
                next_num = row['max_page'] + 1
                print(f"üîç –û–¢–õ–ê–î–ö–ê: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã: {row['max_page']}, —Å–ª–µ–¥—É—é—â–∏–π: {next_num}")
                return next_num
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –ù–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü –≤ –ë–î, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1")
            return 1

async def save_page_number(order_id: int, page_number: int, filename: str, description: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(DB_PATH) as db:
        print(f"üîç –û–¢–õ–ê–î–ö–ê: save_page_number: order_id={order_id}, page_number={page_number}, filename={filename}")
        await db.execute('''
            INSERT INTO order_pages (order_id, page_number, filename, description, created_at)
            VALUES (?, ?, ?, ?, CURRENT_TIMESTAMP)
        ''', (order_id, page_number, filename, description))
        await db.commit()
        print(f"üîç –û–¢–õ–ê–î–ö–ê: –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_number} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î")
async def get_order_pages(order_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –∑–∞–∫–∞–∑–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑
        cursor = await db.execute('''
            SELECT id FROM orders WHERE id = ?
        ''', (order_id,))
        order_exists = await cursor.fetchone()
        
        if not order_exists:
            print(f"üîç –û–¢–õ–ê–î–ö–ê: –ó–∞–∫–∞–∑ {order_id} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return []
        
        # –ï—Å–ª–∏ –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—â–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        async with db.execute('''
            SELECT page_number, filename, description, created_at
            FROM order_pages 
            WHERE order_id = ?
            ORDER BY page_number ASC
        ''', (order_id,)) as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def get_order_demo_content(order_id: int) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ñ–∞–π–ª—ã –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT id, filename, file_type, uploaded_at
            FROM uploads 
            WHERE order_id = ? AND file_type IN ('demo_photo', 'demo_audio', 'demo_video', 'demo_pdf')
            ORDER BY uploaded_at DESC
        ''', (order_id,)) as cursor:
            rows = await cursor.fetchall()
            return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def update_order_email(order_id: int, email: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç email –≤ –∑–∞–∫–∞–∑–µ"""
    async with aiosqlite.connect(DB_PATH) as db:
        cursor = await db.execute('''
            UPDATE orders
            SET email = ?
            WHERE id = ?
        ''', (email, order_id))
        await db.commit()
        return cursor.rowcount > 0

async def add_upload(order_id: int, filename: str, file_type: str) -> bool:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute('''
            INSERT INTO uploads (order_id, filename, file_type, uploaded_at)
            VALUES (?, ?, ?, CURRENT_TIMESTAMP)
        ''', (order_id, filename, file_type))
        await db.commit()
        return True

async def update_order_field(order_id: int, field_name: str, value: str) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–µ –≤ –∑–∞–∫–∞–∑–µ"""
    print(f"üîç –û–¢–õ–ê–î–ö–ê update_order_field: order_id={order_id}, field_name={field_name}, value={value}")
    async with aiosqlite.connect(DB_PATH) as db:
        await db.execute(f'''
            UPDATE orders 
            SET {field_name} = ?, updated_at = CURRENT_TIMESTAMP
            WHERE id = ?
        ''', (value, order_id))
        await db.commit()
        print(f"‚úÖ –ü–æ–ª–µ {field_name} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
        return True

async def check_pages_sent_before(order_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –ª–∏ —É–∂–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT id FROM outbox 
            WHERE order_id = ? AND type_ = 'page_selection' 
            LIMIT 1
        ''', (order_id,)) as cursor:
            row = await cursor.fetchone()
            return row is not None

async def check_demo_content_sent_before(order_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è –ª–∏ —É–∂–µ –¥–µ–º–æ-–∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        async with db.execute('''
            SELECT id FROM outbox 
            WHERE order_id = ? AND type = 'multiple_images_with_text_and_button' 
            LIMIT 1
        ''', (order_id,)) as cursor:
            row = await cursor.fetchone()
            return row is not None

# --- –§—É–Ω–∫—Ü–∏–∏ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –º–µ—Ç—Ä–∏–∫ —Å–æ–±—ã—Ç–∏–π ---

async def track_event(
    user_id: int,
    event_type: str,
    event_data: dict = None,
    step_name: str = None,
    product_type: str = None,
    order_id: int = None,
    amount: float = None,
    source: str = None,
    utm_source: str = None,
    utm_medium: str = None,
    utm_campaign: str = None
) -> bool:
    """
    –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫
    
    –¢–∏–ø—ã —Å–æ–±—ã—Ç–∏–π:
    - 'bot_entry' - –≤—Ö–æ–¥ –≤ –±–æ—Ç–∞
    - 'start_clicked' - –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å—Ç–∞—Ä—Ç
    - 'product_selected' - –≤—ã–±–æ—Ä –∫–Ω–∏–≥–∏/–ø–µ—Å–Ω–∏
    - 'step_abandoned' - –æ—Ç–≤–∞–ª –Ω–∞ —à–∞–≥–µ
    - 'order_created' - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
    - 'purchase_completed' - –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
    - 'upsell_purchased' - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–∫—É–ø–∫–∞
    """
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ —Ç–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            # –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
            async with db.execute('''
                SELECT COUNT(*) FROM event_metrics 
                WHERE user_id = ? AND event_type = ? 
                AND timestamp > datetime('now', '-5 minutes')
                AND (order_id = ? OR (order_id IS NULL AND ? IS NULL))
            ''', (user_id, event_type, order_id, order_id)) as cursor:
                recent_count = await cursor.fetchone()
                if recent_count and recent_count[0] > 0:
                    print(f"‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ {event_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return True
            
            await db.execute('''
                INSERT INTO event_metrics 
                (user_id, event_type, event_data, step_name, product_type, order_id, amount, source, utm_source, utm_medium, utm_campaign, timestamp)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, datetime('now'))
            ''', (
                user_id,
                event_type,
                json.dumps(event_data) if event_data else None,
                step_name,
                product_type,
                order_id,
                amount,
                source,
                utm_source,
                utm_medium,
                utm_campaign
            ))
            await db.commit()
            print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ {event_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏—è {event_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

async def get_order_source(order_id: int) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã event_metrics"""
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            db.row_factory = aiosqlite.Row
            
            # –ò—â–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –≤ —Å–æ–±—ã—Ç–∏—è—Ö –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
            async with db.execute('''
                SELECT source 
                FROM event_metrics 
                WHERE order_id = ? AND source IS NOT NULL AND source != ''
                ORDER BY timestamp ASC
                LIMIT 1
            ''', (order_id,)) as cursor:
                row = await cursor.fetchone()
                if row and row['source']:
                    return row['source']
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ order_id, –∏—â–µ–º –ø–æ user_id –∏–∑ –∑–∞–∫–∞–∑–∞
            async with db.execute('''
                SELECT o.user_id, em.source
                FROM orders o
                JOIN event_metrics em ON o.user_id = em.user_id
                WHERE o.id = ? AND em.source IS NOT NULL AND em.source != ''
                ORDER BY em.timestamp ASC
                LIMIT 1
            ''', (order_id,)) as cursor:
                row = await cursor.fetchone()
                if row and row['source']:
                    return row['source']
            
            return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'

async def get_order_utm_data(order_id: int) -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç UTM-–¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã event_metrics"""
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            db.row_factory = aiosqlite.Row
            
            # –ò—â–µ–º UTM-–¥–∞–Ω–Ω—ã–µ –≤ —Å–æ–±—ã—Ç–∏—è—Ö –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
            async with db.execute('''
                SELECT utm_source, utm_medium, utm_campaign 
                FROM event_metrics 
                WHERE order_id = ? AND (utm_source IS NOT NULL OR utm_medium IS NOT NULL OR utm_campaign IS NOT NULL)
                ORDER BY timestamp ASC
                LIMIT 1
            ''', (order_id,)) as cursor:
                row = await cursor.fetchone()
                if row:
                    return {
                        'utm_source': row['utm_source'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'utm_medium': row['utm_medium'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'utm_campaign': row['utm_campaign'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    }
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ order_id, –∏—â–µ–º –ø–æ user_id —Ç–æ–ª—å–∫–æ —Å–æ–±—ã—Ç–∏—è –î–û —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
            async with db.execute('''
                SELECT o.user_id, o.created_at, em.utm_source, em.utm_medium, em.utm_campaign
                FROM orders o
                JOIN event_metrics em ON o.user_id = em.user_id
                WHERE o.id = ? AND (em.utm_source IS NOT NULL OR em.utm_medium IS NOT NULL OR em.utm_campaign IS NOT NULL)
                AND em.timestamp <= o.created_at
                ORDER BY em.timestamp DESC
                LIMIT 1
            ''', (order_id,)) as cursor:
                row = await cursor.fetchone()
                if row:
                    return {
                        'utm_source': row['utm_source'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'utm_medium': row['utm_medium'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                        'utm_campaign': row['utm_campaign'] or '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                    }
            
            return {
                'utm_source': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                'utm_medium': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                'utm_campaign': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
            }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è UTM-–¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        return {
            'utm_source': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            'utm_medium': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            'utm_campaign': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        }

async def get_event_metrics(
    start_date: str = None,
    end_date: str = None,
    event_type: str = None,
    user_id: int = None
) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π"""
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            query = "SELECT * FROM event_metrics WHERE 1=1"
            params = []
            
            if start_date:
                query += " AND DATE(timestamp) >= ?"
                params.append(start_date)
            
            if end_date:
                query += " AND DATE(timestamp) <= ?"
                params.append(end_date)
            
            if event_type:
                query += " AND event_type = ?"
                params.append(event_type)
            
            if user_id:
                query += " AND user_id = ?"
                params.append(user_id)
            
            query += " ORDER BY timestamp DESC"
            
            async with db.execute(query, params) as cursor:
                rows = await cursor.fetchall()
                return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ —Å–æ–±—ã—Ç–∏–π: {e}")
        return []

async def get_funnel_metrics(start_date: str, end_date: str) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤–æ—Ä–æ–Ω–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏"""
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
            events = [
                'bot_entry',
                'start_clicked', 
                'product_selected',
                'order_created',
                'purchase_completed'
            ]
            
            funnel_data = {}
            
            for event in events:
                # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                async with db.execute('''
                    SELECT COUNT(DISTINCT user_id) as unique_users
                    FROM event_metrics 
                    WHERE event_type = ? 
                    AND DATE(timestamp) BETWEEN ? AND ?
                ''', (event, start_date, end_date)) as cursor:
                    result = await cursor.fetchone()
                    unique_users = result[0] if result else 0
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π
                async with db.execute('''
                    SELECT COUNT(*) as total_clicks
                    FROM event_metrics 
                    WHERE event_type = ? 
                    AND DATE(timestamp) BETWEEN ? AND ?
                ''', (event, start_date, end_date)) as cursor:
                    result = await cursor.fetchone()
                    total_clicks = result[0] if result else 0
                
                # –î–ª—è –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ user_id
                funnel_data[event] = {
                    'unique_users': unique_users,  # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ user_id
                    'total_clicks': total_clicks
                }
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—Ö–æ–¥—ã –≤ –±–æ—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–µ–Ω—å—à–µ, —á–µ–º –Ω–∞–∂–∞—Ç–∏—è –°—Ç–∞—Ä—Ç
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–≥ –∑–∞–π—Ç–∏ –≤ –±–æ—Ç –¥–æ –ø–µ—Ä–∏–æ–¥–∞, –∞ –Ω–∞–∂–∞—Ç—å –°—Ç–∞—Ä—Ç –≤ –ø–µ—Ä–∏–æ–¥–µ.
            # –°—á–∏—Ç–∞–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Å–æ–±—ã—Ç–∏—è–º bot_entry –∏ start_clicked –∑–∞ –ø–µ—Ä–∏–æ–¥.
            async with db.execute('''
                SELECT COUNT(DISTINCT user_id) as union_users
                FROM event_metrics
                WHERE event_type IN ('bot_entry', 'start_clicked')
                AND DATE(timestamp) BETWEEN ? AND ?
            ''', (start_date, end_date)) as cursor:
                result = await cursor.fetchone()
                union_users = result[0] if result else 0
                if union_users > funnel_data['bot_entry']['unique_users']:
                    funnel_data['bot_entry']['unique_users'] = union_users
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –¥–µ–º–æ –ø–µ—Å–Ω–∏ –∏ –∫–Ω–∏–≥–∏
            # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: —Å—á–∏—Ç–∞–µ–º –¥–µ–º–æ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É" –ø–æ—Å–ª–µ –¥–µ–º–æ
            
            # –î–µ–º–æ –ø–µ—Å–Ω–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∂–∞–ª–∏ "–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É" –ø–æ—Å–ª–µ –¥–µ–º–æ –ø–µ—Å–Ω–∏
            async with db.execute('''
                SELECT COUNT(DISTINCT user_id) as song_demo_users
                FROM event_metrics 
                WHERE event_type = 'song_demo_learn_price_clicked'
                AND DATE(timestamp) BETWEEN ? AND ?
            ''', (start_date, end_date)) as cursor:
                result = await cursor.fetchone()
                song_demo_users = result[0] if result else 0
            
            # –î–µ–º–æ –∫–Ω–∏–≥–∏ - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–∂–∞–ª–∏ "–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—É" –ø–æ—Å–ª–µ –¥–µ–º–æ –∫–Ω–∏–≥–∏
            async with db.execute('''
                SELECT COUNT(DISTINCT user_id) as book_demo_users
                FROM event_metrics 
                WHERE event_type = 'demo_learn_price_clicked'
                AND DATE(timestamp) BETWEEN ? AND ?
            ''', (start_date, end_date)) as cursor:
                result = await cursor.fetchone()
                book_demo_users = result[0] if result else 0
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π order_created, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–∫–∞–∑–æ–≤
            if funnel_data['order_created']['unique_users'] == 0:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤
                async with db.execute('''
                    SELECT COUNT(DISTINCT user_id) as unique_users, COUNT(*) as total_orders
                    FROM orders 
                    WHERE DATE(created_at) BETWEEN ? AND ?
                ''', (start_date, end_date)) as cursor:
                    result = await cursor.fetchone()
                    unique_users = result[0] if result else 0
                    total_orders = result[1] if result else 0
                    funnel_data['order_created'] = {
                        'unique_users': unique_users,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        'total_clicks': total_orders
                    }
            
            # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π purchase_completed, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∑–∞–∫–∞–∑–æ–≤
            if funnel_data['purchase_completed']['unique_users'] == 0:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                status_placeholders = ','.join(['?' for _ in PAID_ORDER_STATUSES])
                async with db.execute(f'''
                    SELECT COUNT(DISTINCT user_id) as unique_users, COUNT(*) as paid_orders
                    FROM orders 
                    WHERE status IN ({status_placeholders})
                    AND DATE(created_at) BETWEEN ? AND ?
                ''', (*PAID_ORDER_STATUSES, start_date, end_date)) as cursor:
                    result = await cursor.fetchone()
                    unique_users = result[0] if result else 0
                    paid_orders = result[1] if result else 0
                    funnel_data['purchase_completed'] = {
                        'unique_users': unique_users,  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                        'total_clicks': paid_orders
                    }
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∞–ø—Å–µ–π–ª–∞ –¥–ª—è "–ü–µ—Ä–µ—à–ª–æ –≤–æ –≤—Ç–æ—Ä–æ–π –∑–∞–∫–∞–∑"
            # –°—á–∏—Ç–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è purchase_completed, –Ω–æ –∏—Å–∫–ª—é—á–∞–µ–º –¥–æ–ø–ª–∞—Ç—ã –∑–∞ –ø–µ—á–∞—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é
            # –§–∏–ª—å—Ç—Ä—É–µ–º –Ω—É–ª–µ–≤—ã–µ —Å—É–º–º—ã –∏ —Å–æ–±—ã—Ç–∏—è –±–µ–∑ order_id
            async with db.execute('''
                SELECT COUNT(DISTINCT user_id) as unique_users, COUNT(DISTINCT order_id) as total_clicks
                FROM event_metrics 
                WHERE event_type = 'purchase_completed'
                AND (event_data NOT LIKE '%"upsell_type": "print"%' OR event_data IS NULL)
                AND DATE(timestamp) BETWEEN ? AND ?
                AND amount IS NOT NULL 
                AND amount > 0
                AND order_id IS NOT NULL
            ''', (start_date, end_date)) as cursor:
                result = await cursor.fetchone()
                upsell_unique_users = result[0] if result else 0
                upsell_total_clicks = result[1] if result else 0
            
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫—É –∞–ø—Å–µ–π–ª–∞ –≤ funnel_data
            funnel_data['upsell_clicked'] = {
                'unique_users': upsell_unique_users,
                'total_clicks': upsell_total_clicks
            }
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–Ω–≤–µ—Ä—Å–∏–∏
            conversions = {}
            if funnel_data['bot_entry']['unique_users'] > 0:
                conversions['start_rate'] = funnel_data['start_clicked']['unique_users'] / funnel_data['bot_entry']['unique_users']
                conversions['product_selection_rate'] = funnel_data['product_selected']['unique_users'] / funnel_data['bot_entry']['unique_users']
                conversions['order_creation_rate'] = funnel_data['order_created']['unique_users'] / funnel_data['bot_entry']['unique_users']
                conversions['purchase_rate'] = funnel_data['purchase_completed']['unique_users'] / funnel_data['bot_entry']['unique_users']
            
            return {
                'funnel_data': funnel_data,
                'conversions': conversions,
                'song_demo_users': song_demo_users,
                'book_demo_users': book_demo_users
            }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –≤–æ—Ä–æ–Ω–∫–∏: {e}")
        return {'funnel_data': {}, 'conversions': {}, 'song_demo_users': 0, 'book_demo_users': 0}
async def get_abandonment_metrics(start_date: str, end_date: str) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç–≤–∞–ª–æ–≤ –ø–æ —à–∞–≥–∞–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
    
    –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ó–ê–ö–ê–ó–û–í (–Ω–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π) –Ω–∞ –∫–∞–∂–¥–æ–º —ç—Ç–∞–ø–µ.
    –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å –º–µ—Ç—Ä–∏–∫–∏, –∫–æ–≥–¥–∞ —É –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤.
    """
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            db.row_factory = aiosqlite.Row
            
            # –ì–ª–∞–≤–∞ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ (product_selection)
            # –ü—Ä–æ—à–ª–æ —à–∞–≥ = –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
            async with db.execute('''
                SELECT COUNT(*) as total_orders
                FROM orders
                WHERE DATE(created_at) BETWEEN ? AND ?
            ''', (start_date, end_date)) as cursor:
                row = await cursor.fetchone()
                product_selection_total = row[0] if row else 0
            
            # –û—Ç–≤–∞–ª–∏–ª–∏—Å—å = –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–ª–∏—Å—å –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö
            async with db.execute('''
                SELECT COUNT(*) as abandoned_orders
                FROM orders
                WHERE status IN ('created', 'product_selected', 'gender_selected', 'relation_selected', 'collecting_facts')
                AND DATE(created_at) BETWEEN ? AND ?
            ''', (start_date, end_date)) as cursor:
                row = await cursor.fetchone()
                product_selection_abandoned = row[0] if row else 0
            
            # –ì–ª–∞–≤–∞ 2: –î–µ–º–æ-–≤–µ—Ä—Å–∏—è –ü–ï–°–ù–ò (demo_sent)
            # –ü—Ä–æ—à–ª–æ —à–∞–≥ = –∑–∞–∫–∞–∑—ã –ø–µ—Å–Ω–∏, –¥–æ—Å—Ç–∏–≥—à–∏–µ demo_sent –∏–ª–∏ –¥–∞–ª—å—à–µ (–≤–∫–ª—é—á–∞—è –í–°–ï —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å–ª–µ –¥–µ–º–æ)
            async with db.execute('''
                SELECT COUNT(*) as total_orders
                FROM orders
                WHERE JSON_EXTRACT(order_data, '$.product') = '–ü–µ—Å–Ω—è'
                AND status IN ('demo_sent', 'demo_content', 'waiting_payment', 'payment_created', 'payment_pending',
                               'paid', 'upsell_paid', 'upsell_payment_created', 'upsell_payment_pending', 'additional_payment_paid',
                               'collecting_facts', 'waiting_plot_options', 'plot_selected', 'waiting_final_version',
                               'waiting_draft', 'draft_sent', 'editing', 'waiting_feedback', 'feedback_processed',
                               'prefinal_sent', 'waiting_final', 'final_sent', 'ready', 'delivered', 'completed')
                AND DATE(created_at) BETWEEN ? AND ?
            ''', (start_date, end_date)) as cursor:
                row = await cursor.fetchone()
                demo_sent_song_total = row[0] if row else 0
            
            # –û—Ç–≤–∞–ª–∏–ª–∏—Å—å = –∑–∞–∫–∞–∑—ã –ø–µ—Å–Ω–∏ –≤ —Å—Ç–∞—Ç—É—Å–µ demo_sent –∏–ª–∏ demo_content, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –æ–ø–ª–∞—á–µ–Ω—ã
            async with db.execute('''
                SELECT COUNT(*) as abandoned_orders
                FROM orders
                WHERE JSON_EXTRACT(order_data, '$.product') = '–ü–µ—Å–Ω—è'
                AND status IN ('demo_sent', 'demo_content')
                AND DATE(created_at) BETWEEN ? AND ?
            ''', (start_date, end_date)) as cursor:
                row = await cursor.fetchone()
                demo_sent_song_abandoned = row[0] if row else 0
            
            # –ì–ª–∞–≤–∞ 2: –î–µ–º–æ-–≤–µ—Ä—Å–∏—è –ö–ù–ò–ì–ò (demo_sent_book)
            # –ü—Ä–æ—à–ª–æ —à–∞–≥ = –∑–∞–∫–∞–∑—ã –∫–Ω–∏–≥–∏, –¥–æ—Å—Ç–∏–≥—à–∏–µ demo_sent –∏–ª–∏ –¥–∞–ª—å—à–µ (–≤–∫–ª—é—á–∞—è –í–°–ï —Å—Ç–∞—Ç—É—Å—ã –ø–æ—Å–ª–µ –¥–µ–º–æ)
            async with db.execute('''
                SELECT COUNT(*) as total_orders
                FROM orders
                WHERE JSON_EXTRACT(order_data, '$.product') = '–ö–Ω–∏–≥–∞'
                AND status IN ('demo_sent', 'demo_content', 'answering_questions', 'questions_completed', 
                               'waiting_payment', 'payment_created', 'payment_pending', 'paid', 'upsell_paid',
                               'story_selection', 'waiting_story_options', 'waiting_story_choice', 'story_selected', 'story_options_sent',
                               'pages_selected', 'covers_sent', 'waiting_cover_choice', 'cover_selected',
                               'waiting_draft', 'draft_sent', 'editing', 'waiting_feedback', 'feedback_processed',
                               'prefinal_sent', 'waiting_final', 'final_sent',
                               'waiting_delivery', 'print_delivery_pending', 'ready', 'delivered', 'completed',
                               'upsell_payment_created', 'upsell_payment_pending', 'additional_payment_paid')
                AND DATE(created_at) BETWEEN ? AND ?
            ''', (start_date, end_date)) as cursor:
                row = await cursor.fetchone()
                demo_sent_book_total = row[0] if row else 0
            
            # –û—Ç–≤–∞–ª–∏–ª–∏—Å—å = –∑–∞–∫–∞–∑—ã –∫–Ω–∏–≥–∏ –Ω–∞ —ç—Ç–∞–ø–µ –¥–µ–º–æ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–æ –ù–ï –æ–ø–ª–∞—Ç–∏–≤—à–∏–µ
            async with db.execute('''
                SELECT COUNT(*) as abandoned_orders
                FROM orders
                WHERE JSON_EXTRACT(order_data, '$.product') = '–ö–Ω–∏–≥–∞'
                AND status IN ('demo_sent', 'demo_content', 'answering_questions', 'questions_completed')
                AND DATE(created_at) BETWEEN ? AND ?
            ''', (start_date, end_date)) as cursor:
                row = await cursor.fetchone()
                demo_sent_book_abandoned = row[0] if row else 0
            
            # –ì–ª–∞–≤–∞ 3: –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ (payment)
            # –ü—Ä–æ—à–ª–æ —à–∞–≥ = –≤—Å–µ –∑–∞–∫–∞–∑—ã, –¥–æ—Å—Ç–∏–≥—à–∏–µ —ç—Ç–∞–ø–∞ –æ–ø–ª–∞—Ç—ã (–≤–∫–ª—é—á–∞—è —Å—Ç–∞—Ç—É—Å—ã –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏ –≤—Å–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ)
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ + —Å—Ç–∞—Ç—É—Å—ã –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã
            payment_statuses = ['waiting_payment', 'payment_created', 'payment_pending'] + PAID_ORDER_STATUSES
            status_placeholders = ','.join(['?' for _ in payment_statuses])
            async with db.execute(f'''
                SELECT COUNT(*) as total_orders
                FROM orders
                WHERE status IN ({status_placeholders})
                AND DATE(created_at) BETWEEN ? AND ?
            ''', (*payment_statuses, start_date, end_date)) as cursor:
                row = await cursor.fetchone()
                payment_total = row[0] if row else 0
            
            # –û—Ç–≤–∞–ª–∏–ª–∏—Å—å = –∑–∞–∫–∞–∑—ã –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã (–ù–ï –æ–ø–ª–∞—á–µ–Ω—ã)
            async with db.execute('''
                SELECT COUNT(*) as abandoned_orders
                FROM orders
                WHERE status IN ('waiting_payment', 'payment_created', 'payment_pending')
                AND DATE(created_at) BETWEEN ? AND ?
            ''', (start_date, end_date)) as cursor:
                row = await cursor.fetchone()
                payment_abandoned = row[0] if row else 0
            
            # –ì–ª–∞–≤–∞ 4: –ü—Ä–µ–¥—Ñ–∏–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è (prefinal_sent)
            # –ü—Ä–æ—à–ª–æ —à–∞–≥ = –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã –∏–∑ PAID_ORDER_STATUSES)
            status_placeholders_paid = ','.join(['?' for _ in PAID_ORDER_STATUSES])
            async with db.execute(f'''
                SELECT COUNT(*) as total_orders
                FROM orders
                WHERE status IN ({status_placeholders_paid})
                AND DATE(created_at) BETWEEN ? AND ?
            ''', (*PAID_ORDER_STATUSES, start_date, end_date)) as cursor:
                row = await cursor.fetchone()
                prefinal_total = row[0] if row else 0
            
            # –û—Ç–≤–∞–ª–∏–ª–∏—Å—å = –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã, –Ω–µ –¥–æ—Å—Ç–∏–≥—à–∏–µ prefinal_sent
            # –≠—Ç–æ –∑–∞–∫–∞–∑—ã –≤ –Ω–∞—á–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
            async with db.execute('''
                SELECT COUNT(*) as abandoned_orders
                FROM orders
                WHERE status IN ('paid', 'upsell_paid', 'story_selection', 'waiting_story_options', 
                                 'waiting_story_choice', 'story_selected', 'story_options_sent',
                                 'waiting_draft', 'draft_sent', 'collecting_facts', 
                                 'waiting_plot_options', 'plot_selected')
                AND DATE(created_at) BETWEEN ? AND ?
            ''', (start_date, end_date)) as cursor:
                row = await cursor.fetchone()
                prefinal_abandoned = row[0] if row else 0
            
            # –ì–ª–∞–≤–∞ 5: –ü—Ä–∞–≤–∫–∏ –∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ (editing)
            # –ü—Ä–æ—à–ª–æ —à–∞–≥ = –∑–∞–∫–∞–∑—ã, –¥–æ—Å—Ç–∏–≥—à–∏–µ prefinal_sent –∏–ª–∏ –¥–∞–ª—å—à–µ (–≤–∫–ª—é—á–∞—è –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã)
            async with db.execute('''
                SELECT COUNT(*) as total_orders
                FROM orders
                WHERE status IN ('prefinal_sent', 'editing', 'waiting_feedback', 'feedback_processed',
                                 'waiting_final', 'final_sent', 'waiting_delivery', 'print_delivery_pending',
                                 'ready', 'delivered', 'completed')
                AND DATE(created_at) BETWEEN ? AND ?
            ''', (start_date, end_date)) as cursor:
                row = await cursor.fetchone()
                editing_total = row[0] if row else 0
            
            # –û—Ç–≤–∞–ª–∏–ª–∏—Å—å = –∑–∞–∫–∞–∑—ã –≤ —Å—Ç–∞—Ç—É—Å–∞—Ö prefinal_sent, editing –∏ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö (–Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)
            async with db.execute('''
                SELECT COUNT(*) as abandoned_orders
                FROM orders
                WHERE status IN ('prefinal_sent', 'editing', 'waiting_feedback', 'feedback_processed',
                                 'waiting_final', 'final_sent', 'waiting_delivery', 'print_delivery_pending')
                AND DATE(created_at) BETWEEN ? AND ?
            ''', (start_date, end_date)) as cursor:
                row = await cursor.fetchone()
                editing_abandoned = row[0] if row else 0
            
            # –ì–ª–∞–≤–∞ 6: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ (completed)
            # –ü—Ä–æ—à–ª–æ —à–∞–≥ = –∑–∞–∫–∞–∑—ã –≤ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–∞—Ö (–≤–∫–ª—é—á–∞—è waiting_delivery –∏ print_delivery_pending)
            async with db.execute('''
                SELECT COUNT(*) as total_orders
                FROM orders
                WHERE status IN ('ready', 'waiting_delivery', 'print_delivery_pending', 'delivered', 'completed')
                AND DATE(created_at) BETWEEN ? AND ?
            ''', (start_date, end_date)) as cursor:
                row = await cursor.fetchone()
                completed_total = row[0] if row else 0
            
            # –û—Ç–≤–∞–ª–∏–ª–∏—Å—å = –∑–∞–∫–∞–∑—ã –≥–æ—Ç–æ–≤—ã–µ, –Ω–æ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ (–≤–∫–ª—é—á–∞—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã –¥–æ—Å—Ç–∞–≤–∫–∏)
            async with db.execute('''
                SELECT COUNT(*) as abandoned_orders
                FROM orders
                WHERE status IN ('ready', 'waiting_delivery', 'print_delivery_pending', 'delivered')
                AND DATE(created_at) BETWEEN ? AND ?
            ''', (start_date, end_date)) as cursor:
                row = await cursor.fetchone()
                completed_abandoned = row[0] if row else 0
            
            abandonment_data = [
                {
                    'step_name': 'product_selection',
                    'abandonment_count': product_selection_abandoned,
                    'unique_users': product_selection_total
                },
                {
                    'step_name': 'demo_sent',
                    'abandonment_count': demo_sent_song_abandoned,
                    'unique_users': demo_sent_song_total
                },
                {
                    'step_name': 'demo_sent_book',
                    'abandonment_count': demo_sent_book_abandoned,
                    'unique_users': demo_sent_book_total
                },
                {
                    'step_name': 'payment',
                    'abandonment_count': payment_abandoned,
                    'unique_users': payment_total
                },
                {
                    'step_name': 'prefinal_sent',
                    'abandonment_count': prefinal_abandoned,
                    'unique_users': prefinal_total
                },
                {
                    'step_name': 'editing',
                    'abandonment_count': editing_abandoned,
                    'unique_users': editing_total
                },
                {
                    'step_name': 'completed',
                    'abandonment_count': completed_abandoned,
                    'unique_users': completed_total
                }
            ]
            
            return abandonment_data
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –æ—Ç–≤–∞–ª–æ–≤: {e}")
        import traceback
        traceback.print_exc()
        return []

async def get_revenue_metrics(start_date: str, end_date: str) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –≤—ã—Ä—É—á–∫–∏"""
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫ —Å—á–∏—Ç–∞–µ–º –ü–û –°–¢–ê–¢–£–°–ê–ú (–∫–∞–∫ –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ)
            # –≠—Ç–æ —É–±–∏—Ä–∞–µ—Ç —Ä–∞—Å—Ö–æ–∂–¥–µ–Ω–∏—è, –∫–æ–≥–¥–∞ —Å–æ–±—ã—Ç–∏–µ purchase_completed –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∞ —Å—Ç–∞—Ç—É—Å —É–∂–µ –æ–ø–ª–∞—á–µ–Ω
            status_placeholders = ','.join(['?' for _ in PAID_ORDER_STATUSES])
            async with db.execute(f'''
                SELECT 
                    COUNT(*) as purchase_count
                FROM orders 
                WHERE status IN ({status_placeholders})
                AND DATE(created_at) BETWEEN ? AND ?
            ''', (*PAID_ORDER_STATUSES, start_date, end_date)) as cursor:
                status_count_row = await cursor.fetchone()
                purchases_count_by_status = status_count_row[0] if status_count_row else 0
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ –∏–∑ —Å–æ–±—ã—Ç–∏–π
            async with db.execute('''
                SELECT 
                    COALESCE(SUM(amount), 0) as total_revenue
                FROM event_metrics 
                WHERE event_type = 'purchase_completed'
                AND DATE(timestamp) BETWEEN ? AND ?
                AND amount IS NOT NULL
                AND amount > 0
                AND order_id IS NOT NULL
            ''', (start_date, end_date)) as cursor:
                main_revenue_row = await cursor.fetchone()
                main_revenue_sum = float(main_revenue_row[0]) if main_revenue_row and main_revenue_row[0] is not None else 0.0
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–±—ã—Ç–∏—è—Ö, –±–µ—Ä–µ–º –∏–∑ –∑–∞–∫–∞–∑–æ–≤
            if main_revenue_sum == 0:
                async with db.execute('''
                    SELECT 
                        COALESCE(SUM(total_amount), 0) as total_revenue
                    FROM orders 
                    WHERE status IN ({status_placeholders})
                    AND DATE(created_at) BETWEEN ? AND ?
                    AND total_amount IS NOT NULL AND total_amount > 0
                ''', (*PAID_ORDER_STATUSES, start_date, end_date)) as cursor:
                    row = await cursor.fetchone()
                    main_revenue_sum = float(row[0]) if row and row[0] is not None else 0.0
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –∏–∑ —Å–æ–±—ã—Ç–∏–π
            # –°—á–∏—Ç–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ order_id, –∏—Å–∫–ª—é—á–∞–µ–º –Ω—É–ª–µ–≤—ã–µ —Å—É–º–º—ã
            async with db.execute('''
                SELECT 
                    COUNT(DISTINCT order_id) as upsell_count,
                    SUM(amount) as upsell_revenue
                FROM event_metrics 
                WHERE event_type = 'upsell_purchased'
                AND DATE(timestamp) BETWEEN ? AND ?
                AND amount IS NOT NULL 
                AND amount > 0
                AND order_id IS NOT NULL
            ''', (start_date, end_date)) as cursor:
                upsells = await cursor.fetchone()
            
            # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–±—ã—Ç–∏—è—Ö, –±–µ—Ä–µ–º –∏–∑ –∑–∞–∫–∞–∑–æ–≤ —Å —Å—Ç–∞—Ç—É—Å–æ–º upsell_paid
            if not upsells or upsells[0] == 0:
                async with db.execute('''
                    SELECT 
                        COUNT(*) as upsell_count,
                        COALESCE(SUM(total_amount), 0) as upsell_revenue
                    FROM orders 
                    WHERE status = 'upsell_paid'
                    AND DATE(created_at) BETWEEN ? AND ?
                    AND total_amount IS NOT NULL AND total_amount > 0
                ''', (start_date, end_date)) as cursor:
                    upsells = await cursor.fetchone()
            
            # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ —Å—á–∏—Ç–∞–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–∫—É–ø–æ–∫ (–ø–æ —Å—Ç–∞—Ç—É—Å–∞–º)
            avg_value = (main_revenue_sum / purchases_count_by_status) if purchases_count_by_status > 0 else 0
            
            return {
                'main_purchases': {
                    'count': purchases_count_by_status,
                    'revenue': main_revenue_sum,
                    'avg_value': avg_value
                },
                'upsells': {
                    'count': upsells[0] if upsells else 0,
                    'revenue': upsells[1] if upsells else 0
                }
            }
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –≤—ã—Ä—É—á–∫–∏: {e}")
        return {'main_purchases': {'count': 0, 'revenue': 0, 'avg_value': 0}, 'upsells': {'count': 0, 'revenue': 0}}

async def get_detailed_revenue_metrics(start_date: str, end_date: str) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤—ã—Ä—É—á–∫–∏ –ø–æ —Ç–∏–ø–∞–º –ø—Ä–æ–¥—É–∫—Ç–æ–≤"""
    try:
        import json
        async with aiosqlite.connect(DB_PATH) as db:
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—É–º–º—ã –∏–∑ event_metrics –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
            # –ë–µ—Ä–µ–º –ü–ï–†–í–û–ï —Å–æ–±—ã—Ç–∏–µ purchase_completed (–æ—Å–Ω–æ–≤–Ω—É—é –ø–æ–∫—É–ø–∫—É), –∞ –Ω–µ —Å—É–º–º—É
            async with db.execute('''
                SELECT 
                    order_id,
                    MIN(amount) as initial_purchase_amount,
                    MAX(amount) as max_amount
                FROM event_metrics
                WHERE event_type = 'purchase_completed'
                AND DATE(timestamp) BETWEEN ? AND ?
                AND amount IS NOT NULL
                AND amount > 0
                AND order_id IS NOT NULL
                GROUP BY order_id
            ''', (start_date, end_date)) as cursor:
                events_data = {row[0]: {'initial': row[1], 'max': row[2]} for row in await cursor.fetchall()}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É –∫–∞–∫–∏—Ö –∑–∞–∫–∞–∑–æ–≤ –µ—Å—Ç—å –¥–æ–ø–ª–∞—Ç—ã
            async with db.execute('''
                SELECT DISTINCT order_id
                FROM event_metrics
                WHERE event_type = 'upsell_purchased'
                AND order_id IS NOT NULL
            ''') as cursor:
                upsell_orders = {row[0] for row in await cursor.fetchall()}
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã —Å order_data –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–∏–ø–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            async with db.execute('''
                SELECT 
                    id,
                    order_data,
                    COALESCE(total_amount, 0) as total_amount,
                    status
                FROM orders 
                WHERE order_data IS NOT NULL AND order_data != ""
                AND DATE(created_at) BETWEEN ? AND ?
                AND status NOT IN ('created', 'cancelled', 'refunded')
            ''', (start_date, end_date)) as cursor:
                rows = await cursor.fetchall()
                
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = {
                '–ö–Ω–∏–≥–∞ (–æ–±—â–µ–µ)': {'count': 0, 'revenue': 0, 'avg_value': 0},
                '–ö–Ω–∏–≥–∞ –ø–µ—á–∞—Ç–Ω–∞—è': {'count': 0, 'revenue': 0, 'avg_value': 0},
                '–ö–Ω–∏–≥–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è': {'count': 0, 'revenue': 0, 'avg_value': 0},
                '–ü–µ—Å–Ω—è (–æ–±—â–µ–µ)': {'count': 0, 'revenue': 0, 'avg_value': 0},
                '–ü–µ—Å–Ω—è': {'count': 0, 'revenue': 0, 'avg_value': 0}
            }
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∑–∞–∫–∞–∑
            for row in rows:
                order_id, order_data_str, total_amount, status = row
                
                if not order_data_str:
                    continue
                    
                try:
                    order_data = json.loads(order_data_str)
                    product = order_data.get('product', '')
                    book_format = order_data.get('book_format', '')
                    format_field = order_data.get('format', '')
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º
                    is_paid = status in PAID_ORDER_STATUSES
                    
                    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ–±—ã—Ç–∏–π
                    event_info = events_data.get(order_id, {})
                    initial_amount = event_info.get('initial', 0)
                    
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É–º–º—É –∏–∑ event_metrics, –µ—Å–ª–∏ total_amount = 0 –∏–ª–∏ None
                    # –î–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å –¥–æ–ø–ª–∞—Ç–æ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—É–º–º—É (–±–µ–∑ –¥–æ–ø–ª–∞—Ç—ã)
                    if order_id in upsell_orders:
                        actual_amount = initial_amount
                    else:
                        actual_amount = initial_amount if total_amount == 0 else total_amount
                    
                    # –û–¢–õ–ê–î–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–∞–∑ #10
                    if order_id == 10:
                        print(f"üîç –û–¢–õ–ê–î–ö–ê –î–ï–¢–ê–õ–¨–ù–´–• –ú–ï–¢–†–ò–ö: –ó–∞–∫–∞–∑ #10 - —Å—Ç–∞—Ç—É—Å={status}, product={product}, total_amount={total_amount}, actual_amount={actual_amount}, is_paid={is_paid}")
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞
                    if product == '–ö–Ω–∏–≥–∞':
                        # –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∫–Ω–∏–≥–∏ –≤ –æ–±—â–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ
                        if is_paid:
                            result['–ö–Ω–∏–≥–∞ (–æ–±—â–µ–µ)']['count'] += 1
                            if actual_amount > 0:
                                result['–ö–Ω–∏–≥–∞ (–æ–±—â–µ–µ)']['revenue'] += actual_amount
                        
                        # –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º –¥–∞–Ω–Ω—ã–µ –æ —Ñ–æ—Ä–º–∞—Ç–µ –∫–Ω–∏–≥–∏
                        if is_paid and actual_amount > 0:
                            print(f"üîç –û–¢–õ–ê–î–ö–ê –ö–ù–ò–ì–ò: –ó–∞–∫–∞–∑ #{order_id} - book_format='{book_format}', format='{format_field}', actual_amount={actual_amount}, is_upsell={order_id in upsell_orders}")
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–Ω–∏–≥–∏
                        # –î–ª—è –∑–∞–∫–∞–∑–æ–≤ —Å –¥–æ–ø–ª–∞—Ç–æ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—É–º–º–µ
                        if order_id in upsell_orders:
                            # –ï—Å–ª–∏ –Ω–∞—á–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ < 3000, —Ç–æ –±—ã–ª–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞
                            is_electronic = initial_amount < 3000
                        else:
                            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤ order_data
                            is_electronic = (
                                book_format == '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞' or 
                                format_field == 'üìÑ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞' or
                                '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è' in str(book_format) or
                                '–≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è' in str(format_field)
                            )
                        
                        # –û–¢–õ–ê–î–ö–ê: –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞
                        if is_paid and actual_amount > 0:
                            print(f"üîç –û–¢–õ–ê–î–ö–ê –ö–ù–ò–ì–ò: –ó–∞–∫–∞–∑ #{order_id} - is_electronic={is_electronic}, initial_amount={initial_amount}")
                        
                        # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ –ø–µ—á–∞—Ç–Ω—ã–µ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
                        if is_paid:
                            if is_electronic:
                                result['–ö–Ω–∏–≥–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è']['count'] += 1
                                if actual_amount > 0:
                                    result['–ö–Ω–∏–≥–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è']['revenue'] += actual_amount
                            else:
                                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º –ø–µ—á–∞—Ç–Ω–æ–π –∫–Ω–∏–≥–æ–π
                                result['–ö–Ω–∏–≥–∞ –ø–µ—á–∞—Ç–Ω–∞—è']['count'] += 1
                                if actual_amount > 0:
                                    result['–ö–Ω–∏–≥–∞ –ø–µ—á–∞—Ç–Ω–∞—è']['revenue'] += actual_amount
                    elif product == '–ü–µ—Å–Ω—è':
                        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Å–µ–Ω (–≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã, –∫—Ä–æ–º–µ —Å–æ–∑–¥–∞–Ω/–æ—Ç–º–µ–Ω—ë–Ω/refund)
                        result['–ü–µ—Å–Ω—è (–æ–±—â–µ–µ)']['count'] += 1
                        # –û–ø–ª–∞—á–µ–Ω–Ω—ã–µ –ø–µ—Å–Ω–∏
                        if is_paid:
                            result['–ü–µ—Å–Ω—è']['count'] += 1
                            if actual_amount > 0:
                                result['–ü–µ—Å–Ω—è']['revenue'] += actual_amount
                        
                except json.JSONDecodeError:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ order_data –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                    continue
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
            for product_type in result:
                if result[product_type]['count'] > 0:
                    result[product_type]['avg_value'] = result[product_type]['revenue'] / result[product_type]['count']
            
            return result
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤—ã—Ä—É—á–∫–∏: {e}")
        return {
            '–ö–Ω–∏–≥–∞ (–æ–±—â–µ–µ)': {'count': 0, 'revenue': 0, 'avg_value': 0},
            '–ö–Ω–∏–≥–∞ –ø–µ—á–∞—Ç–Ω–∞—è': {'count': 0, 'revenue': 0, 'avg_value': 0},
            '–ö–Ω–∏–≥–∞ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è': {'count': 0, 'revenue': 0, 'avg_value': 0},
            '–ü–µ—Å–Ω—è (–æ–±—â–µ–µ)': {'count': 0, 'revenue': 0, 'avg_value': 0},
            '–ü–µ—Å–Ω—è': {'count': 0, 'revenue': 0, 'avg_value': 0}
        }

async def get_orders_count_with_permissions(manager_email: str, status: Optional[str] = None) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ —Å —É—á–µ—Ç–æ–º –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –º–µ–Ω–µ–¥–∂–µ—Ä –≥–ª–∞–≤–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
        is_admin = await is_super_admin(manager_email)
        
        if is_admin:
            # –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞–∫–∞–∑—ã
            if status:
                query = '''
                    SELECT COUNT(*) as count
                    FROM orders o 
                    WHERE o.status = ?
                '''
                args = (status,)
            else:
                query = '''
                    SELECT COUNT(*) as count
                    FROM orders o 
                '''
                args = ()
        else:
            # –û–±—ã—á–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã
            manager = await get_manager_by_email(manager_email)
            if not manager:
                return 0
            
            if status:
                query = '''
                    SELECT COUNT(*) as count
                    FROM orders o 
                    WHERE o.assigned_manager_id = ? AND o.status = ?
                '''
                args = (manager["id"], status)
            else:
                query = '''
                    SELECT COUNT(*) as count
                    FROM orders o 
                    WHERE o.assigned_manager_id = ?
                '''
                args = (manager["id"],)
        
        async with db.execute(query, args) as cursor:
            row = await cursor.fetchone()
            return row[0] if row else 0

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ ---

async def create_or_update_order_notification(order_id: int, manager_id: int = None):
    """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    async with aiosqlite.connect(DB_PATH) as db:
        await configure_db_connection(db)
        
        # –ï—Å–ª–∏ manager_id –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –∏–∑ –∑–∞–∫–∞–∑–∞
        if not manager_id:
            async with db.execute('SELECT assigned_manager_id FROM orders WHERE id = ?', (order_id,)) as cursor:
                row = await cursor.fetchone()
                if row and row[0]:
                    manager_id = row[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–∫–∞–∑–∞
        async with db.execute('SELECT id, is_read FROM order_notifications WHERE order_id = ?', (order_id,)) as cursor:
            existing = await cursor.fetchone()
        
        if existing:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ—Å—Ç–∏
            await db.execute('''
                UPDATE order_notifications 
                SET is_read = 0, last_user_message_at = datetime('now'), updated_at = datetime('now')
                WHERE order_id = ?
            ''', (order_id,))
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await db.execute('''
                INSERT INTO order_notifications 
                (order_id, manager_id, is_read, last_user_message_at, created_at, updated_at)
                VALUES (?, ?, 0, datetime('now'), datetime('now'), datetime('now'))
            ''', (order_id, manager_id))
        await db.commit()

async def mark_notification_as_read(order_id: int, manager_id: int = None):
    """–û—Ç–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ"""
    async with aiosqlite.connect(DB_PATH) as db:
        await configure_db_connection(db)
        
        # –ü—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∑–∞–∫–∞–∑–∞ (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞)
        await db.execute('''
            UPDATE order_notifications 
            SET is_read = 1, updated_at = datetime('now')
            WHERE order_id = ?
        ''', (order_id,))
        
        await db.commit()

async def get_order_notifications(manager_id: int = None) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–ª–∏ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)"""
    async with aiosqlite.connect(DB_PATH) as db:
        await configure_db_connection(db)
        
        if manager_id:
            # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            async with db.execute('''
                SELECT notif.*, o.id as order_id, o.status, o.created_at as order_created_at,
                       o.assigned_manager_id, m.email as manager_email, m.full_name as manager_name
                FROM order_notifications notif
                JOIN orders o ON notif.order_id = o.id
                LEFT JOIN managers m ON notif.manager_id = m.id
                WHERE notif.manager_id = ? AND notif.is_read = 0
                ORDER BY notif.last_user_message_at DESC
            ''', (manager_id,)) as cursor:
                rows = await cursor.fetchall()
                return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]
        else:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)
            async with db.execute('''
                SELECT notif.*, o.id as order_id, o.status, o.created_at as order_created_at,
                       o.assigned_manager_id, m.email as manager_email, m.full_name as manager_name
                FROM order_notifications notif
                JOIN orders o ON notif.order_id = o.id
                LEFT JOIN managers m ON notif.manager_id = m.id
                WHERE notif.is_read = 0
                ORDER BY notif.last_user_message_at DESC
            ''') as cursor:
                rows = await cursor.fetchall()
                return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def get_notification_by_order_id(order_id: int) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID –∑–∞–∫–∞–∑–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        await configure_db_connection(db)
        
        async with db.execute('''
            SELECT * FROM order_notifications WHERE order_id = ?
        ''', (order_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                return dict(zip([column[0] for column in cursor.description], row))
            return None

async def create_notifications_for_all_orders():
    """–°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"""
    async with aiosqlite.connect(DB_PATH) as db:
        await configure_db_connection(db)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
        async with db.execute('''
            SELECT id, assigned_manager_id 
            FROM orders
        ''') as cursor:
            all_orders = await cursor.fetchall()
        
        created_count = 0
        for order_id, manager_id in all_orders:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            async with db.execute('SELECT id FROM order_notifications WHERE order_id = ?', (order_id,)) as cursor:
                existing = await cursor.fetchone()
            
            if not existing:
                # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ)
                await db.execute('''
                    INSERT INTO order_notifications 
                    (order_id, manager_id, is_read, last_user_message_at, created_at, updated_at)
                    VALUES (?, ?, 1, datetime('now'), datetime('now'), datetime('now'))
                ''', (order_id, manager_id))
                created_count += 1
        
        await db.commit()
        return created_count

async def get_order_notifications_v2(manager_id: int = None) -> List[Dict]:
    """–ü–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–ª–∏ –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)"""
    async with aiosqlite.connect(DB_PATH) as db:
        await configure_db_connection(db)
        
        if manager_id:
            # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            async with db.execute('''
                SELECT notif.*, o.id as order_id, o.status, o.created_at as order_created_at,
                       o.assigned_manager_id, m.email as manager_email, m.full_name as manager_name
                FROM order_notifications notif
                JOIN orders o ON notif.order_id = o.id
                LEFT JOIN managers m ON notif.manager_id = m.id
                WHERE notif.manager_id = ? AND notif.is_read = 0
                ORDER BY notif.last_user_message_at DESC
            ''', (manager_id,)) as cursor:
                rows = await cursor.fetchall()
                return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]
        else:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞)
            async with db.execute('''
                SELECT notif.*, o.id as order_id, o.status, o.created_at as order_created_at,
                       o.assigned_manager_id, m.email as manager_email, m.full_name as manager_name
                FROM order_notifications notif
                JOIN orders o ON notif.order_id = o.id
                LEFT JOIN managers m ON notif.manager_id = m.id
                WHERE notif.is_read = 0
                ORDER BY notif.last_user_message_at DESC
            ''') as cursor:
                rows = await cursor.fetchall()
                return [dict(zip([column[0] for column in cursor.description], row)) for row in rows]

async def get_notification_by_order_id(order_id: int) -> Dict:
    """–ü–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ ID –∑–∞–∫–∞–∑–∞"""
    async with aiosqlite.connect(DB_PATH) as db:
        await configure_db_connection(db)
        
        async with db.execute('''
            SELECT * FROM order_notifications WHERE order_id = ?
        ''', (order_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                return dict(zip([column[0] for column in cursor.description], row))
            return None
async def create_notifications_for_all_orders():
    """–°–æ–∑–¥–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤"""
    async with aiosqlite.connect(DB_PATH) as db:
        await configure_db_connection(db)
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
        async with db.execute('''
            SELECT id, assigned_manager_id 
            FROM orders
        ''') as cursor:
            all_orders = await cursor.fetchall()
        
        created_count = 0
        for order_id, manager_id in all_orders:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            async with db.execute('SELECT id FROM order_notifications WHERE order_id = ?', (order_id,)) as cursor:
                existing = await cursor.fetchone()
            
            if not existing:
                # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ)
                await db.execute('''
                    INSERT INTO order_notifications 
                    (order_id, manager_id, is_read, last_user_message_at, created_at, updated_at)
                    VALUES (?, ?, 1, datetime('now'), datetime('now'), datetime('now'))
                ''', (order_id, manager_id))
                created_count += 1
        
        await db.commit()
        return created_count