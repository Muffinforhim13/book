#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤ –∏ —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–∞ ID
–í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ —É–¥–∞–ª–∏—Ç –í–°–ï –∑–∞–∫–∞–∑—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!
"""

import asyncio
import aiosqlite
import os
import sys

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
import locale
import codecs

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UTF-8 –∫–æ–¥–∏—Ä–æ–≤–∫—É
if hasattr(sys.stdout, 'reconfigure'):
    sys.stdout.reconfigure(encoding='utf-8')
    sys.stderr.reconfigure(encoding='utf-8')

DB_PATH = 'bookai.db'

async def clear_orders_table():
    """–û—á–∏—â–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ ID"""
    
    if not os.path.exists(DB_PATH):
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {DB_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–∫–∞–∑—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")
    print("‚ö†Ô∏è  –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ù–ï–û–ë–†–ê–¢–ò–ú–û!")
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    confirm = input("\nAre you sure? Type 'YES' to confirm: ")
    
    if confirm != 'YES':
        print("‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await db.execute("PRAGMA foreign_keys = ON")
            await db.execute("PRAGMA journal_mode = WAL")
            await db.execute("PRAGMA synchronous = NORMAL")
            await db.execute("PRAGMA cache_size = 1000")
            await db.execute("PRAGMA temp_store = MEMORY")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            async with db.execute("SELECT COUNT(*) FROM orders") as cursor:
                count_before = (await cursor.fetchone())[0]
            
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ: {count_before}")
            
            if count_before == 0:
                print("‚ÑπÔ∏è  –í —Ç–∞–±–ª–∏—Ü–µ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
                return
            
            # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ
            print("üîß –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π...")
            await db.execute("PRAGMA foreign_keys = OFF")
            
            # –û—á–∏—â–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Å—ã–ª–∞—é—Ç—Å—è –Ω–∞ –∑–∞–∫–∞–∑—ã
            print("üßπ –û—á–∏—â–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã...")
            
            # –¢–∞–±–ª–∏—Ü—ã —Å –ø—Ä—è–º—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ orders
            related_tables = [
                'sent_messages_log',
                'delayed_messages', 
                'timer_messages_sent',
                'early_user_messages'
            ]
            
            # –¢–∞–±–ª–∏—Ü—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å
            metrics_tables = [
                'event_metrics'  # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –º–µ—Ç—Ä–∏–∫ (–∫–ª–∏–∫–∏, –≤—ã—Ä—É—á–∫–∞ –∏ —Ç.–¥.)
            ]
            
            for table in related_tables:
                try:
                    async with db.execute(f"SELECT COUNT(*) FROM {table}") as cursor:
                        count = (await cursor.fetchone())[0]
                    if count > 0:
                        print(f"   –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É {table} ({count} –∑–∞–ø–∏—Å–µ–π)...")
                        await db.execute(f"DELETE FROM {table}")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
            
            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
            print("üìä –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫...")
            for table in metrics_tables:
                try:
                    async with db.execute(f"SELECT COUNT(*) FROM {table}") as cursor:
                        count = (await cursor.fetchone())[0]
                    if count > 0:
                        print(f"   –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É {table} ({count} –∑–∞–ø–∏—Å–µ–π)...")
                        await db.execute(f"DELETE FROM {table}")
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —Ç–∞–±–ª–∏—Ü –º–µ—Ç—Ä–∏–∫
                        await db.execute(f"DELETE FROM sqlite_sequence WHERE name='{table}'")
                except Exception as e:
                    print(f"   ‚ö†Ô∏è  –¢–∞–±–ª–∏—Ü–∞ {table} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞: {e}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã
            print("üóëÔ∏è  –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã...")
            await db.execute("DELETE FROM orders")
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ AUTOINCREMENT
            print("üîÑ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ ID...")
            await db.execute("DELETE FROM sqlite_sequence WHERE name='orders'")
            
            # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π
            print("üîß –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫—É –≤–Ω–µ—à–Ω–∏—Ö –∫–ª—é—á–µ–π...")
            await db.execute("PRAGMA foreign_keys = ON")
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            await db.commit()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            async with db.execute("SELECT COUNT(*) FROM orders") as cursor:
                count_after = (await cursor.fetchone())[0]
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ {count_before} –∑–∞–∫–∞–∑–æ–≤")
            print(f"‚úÖ –°—á–µ—Ç—á–∏–∫ ID —Å–±—Ä–æ—à–µ–Ω. –°–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –∏–º–µ—Ç—å ID = 1")
            print(f"üìä –ó–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {count_after}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

async def show_orders_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö –≤ –±–∞–∑–µ"""
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            async with db.execute("SELECT COUNT(*) FROM orders") as cursor:
                total_orders = (await cursor.fetchone())[0]
            
            if total_orders == 0:
                print("üìä –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω ID
            async with db.execute("SELECT MIN(id), MAX(id) FROM orders") as cursor:
                min_id, max_id = await cursor.fetchone()
            
            print(f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö:")
            print(f"   –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}")
            print(f"   –î–∏–∞–ø–∞–∑–æ–Ω ID: {min_id} - {max_id}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤
            async with db.execute("""
                SELECT id, status, created_at, user_id 
                FROM orders 
                ORDER BY id DESC 
                LIMIT 5
            """) as cursor:
                rows = await cursor.fetchall()
                print(f"\nüìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤:")
                for row in rows:
                    print(f"   #{row[0]} | {row[1]} | {row[2]} | User: {row[3]}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

async def show_preserved_data():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏"""
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            print("\nüõ°Ô∏è  –î–ê–ù–ù–´–ï, –ö–û–¢–û–†–´–ï –û–°–¢–ê–ù–£–¢–°–Ø –ù–ï–¢–†–û–ù–£–¢–´–ú–ò:")
            print("=" * 60)
            
            # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
            async with db.execute("SELECT COUNT(*) FROM managers") as cursor:
                managers_count = (await cursor.fetchone())[0]
            print(f"üë• –ú–µ–Ω–µ–¥–∂–µ—Ä—ã: {managers_count} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            async with db.execute("SELECT COUNT(*) FROM user_profiles") as cursor:
                profiles_count = (await cursor.fetchone())[0]
            print(f"üë§ –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {profiles_count} –∑–∞–ø–∏—Å–µ–π")
            
            # –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
            async with db.execute("SELECT COUNT(*) FROM message_templates") as cursor:
                templates_count = (await cursor.fetchone())[0]
            print(f"üìù –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π: {templates_count} –∑–∞–ø–∏—Å–µ–π")
            
            # –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            async with db.execute("SELECT COUNT(*) FROM delayed_messages") as cursor:
                delayed_count = (await cursor.fetchone())[0]
            print(f"‚è∞ –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {delayed_count} –∑–∞–ø–∏—Å–µ–π")
            
            # –°—Ç–∏–ª–∏ –∫–Ω–∏–≥
            async with db.execute("SELECT COUNT(*) FROM book_styles") as cursor:
                book_styles_count = (await cursor.fetchone())[0]
            print(f"üìö –°—Ç–∏–ª–∏ –∫–Ω–∏–≥: {book_styles_count} –∑–∞–ø–∏—Å–µ–π")
            
            # –°—Ç–∏–ª–∏ –≥–æ–ª–æ—Å–∞
            async with db.execute("SELECT COUNT(*) FROM voice_styles") as cursor:
                voice_styles_count = (await cursor.fetchone())[0]
            print(f"üéµ –°—Ç–∏–ª–∏ –≥–æ–ª–æ—Å–∞: {voice_styles_count} –∑–∞–ø–∏—Å–µ–π")
            
            # –®–∞–±–ª–æ–Ω—ã –æ–±–ª–æ–∂–µ–∫
            async with db.execute("SELECT COUNT(*) FROM cover_templates") as cursor:
                covers_count = (await cursor.fetchone())[0]
            print(f"üé® –®–∞–±–ª–æ–Ω—ã –æ–±–ª–æ–∂–µ–∫: {covers_count} –∑–∞–ø–∏—Å–µ–π")
            
            # –®–∞–≥–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            async with db.execute("SELECT COUNT(*) FROM content_steps") as cursor:
                content_steps_count = (await cursor.fetchone())[0]
            print(f"üìÑ –®–∞–≥–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {content_steps_count} –∑–∞–ø–∏—Å–µ–π")
            
            # –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
            async with db.execute("SELECT COUNT(*) FROM bot_messages") as cursor:
                bot_messages_count = (await cursor.fetchone())[0]
            print(f"ü§ñ –°–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞: {bot_messages_count} –∑–∞–ø–∏—Å–µ–π")
            
            # –®–∞–±–ª–æ–Ω—ã —Å–≤–æ–¥–∫–∏ –∑–∞–∫–∞–∑–∞
            async with db.execute("SELECT COUNT(*) FROM order_summary_templates") as cursor:
                summary_templates_count = (await cursor.fetchone())[0]
            print(f"üìã –®–∞–±–ª–æ–Ω—ã —Å–≤–æ–¥–∫–∏ –∑–∞–∫–∞–∑–∞: {summary_templates_count} –∑–∞–ø–∏—Å–µ–π")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—á–∏—â–µ–Ω—ã
            print("\nüóëÔ∏è  –¢–ê–ë–õ–ò–¶–´, –ö–û–¢–û–†–´–ï –ë–£–î–£–¢ –û–ß–ò–©–ï–ù–´:")
            print("-" * 40)
            
            # –°–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            related_tables = [
                'sent_messages_log',
                'delayed_messages', 
                'timer_messages_sent',
                'early_user_messages'
            ]
            
            for table in related_tables:
                try:
                    async with db.execute(f"SELECT COUNT(*) FROM {table}") as cursor:
                        count = (await cursor.fetchone())[0]
                    print(f"üìã {table}: {count} –∑–∞–ø–∏—Å–µ–π")
                except:
                    print(f"üìã {table}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            # –¢–∞–±–ª–∏—Ü—ã –º–µ—Ç—Ä–∏–∫
            metrics_tables = ['event_metrics', 'orders']
            for table in metrics_tables:
                try:
                    async with db.execute(f"SELECT COUNT(*) FROM {table}") as cursor:
                        count = (await cursor.fetchone())[0]
                    print(f"üìä {table}: {count} –∑–∞–ø–∏—Å–µ–π")
                except:
                    print(f"üìä {table}: —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
            print("\n‚úÖ –í–°–ï –û–°–¢–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï –û–°–¢–ê–ù–£–¢–°–Ø –ù–ï–¢–†–û–ù–£–¢–´–ú–ò!")
            print("=" * 60)
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")

async def main():
    print("üîß –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∑–∞–∫–∞–∑–æ–≤")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    await show_orders_info()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ—Å—Ç–∞–Ω—É—Ç—Å—è –Ω–µ—Ç—Ä–æ–Ω—É—Ç—ã–º–∏
    await show_preserved_data()
    
    print("\n" + "=" * 50)
    print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
    print("1. –û—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É –∑–∞–∫–∞–∑–æ–≤ (—É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–∫–∞–∑—ã)")
    print("2. –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–∞—Ö")
    print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    print("4. –í—ã—Ö–æ–¥")
    
    choice = input("\nEnter action number (1-4): ").strip()
    
    if choice == "1":
        await clear_orders_table()
    elif choice == "2":
        await show_orders_info()
    elif choice == "3":
        await show_preserved_data()
    elif choice == "4":
        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
    else:
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")

if __name__ == "__main__":
    asyncio.run(main())
