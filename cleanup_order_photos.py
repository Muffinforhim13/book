#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–∫–∞–∑–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å—Ç–∏–ª–∏ –∫–Ω–∏–≥, –æ–±–ª–æ–∂–∫–∏ –∏ —Å—Ç–∏–ª–∏ –ø–µ—Å–µ–Ω
"""

import asyncio
import aiosqlite
import json
import os
import glob

DB_PATH = 'bookai.db'

async def analyze_photo_types():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–∏–ø—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ"""
    async with aiosqlite.connect(DB_PATH) as db:
        print("üîç –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ...")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É uploads
        async with db.execute('''
            SELECT file_type, COUNT(*) as count
            FROM uploads
            GROUP BY file_type
            ORDER BY count DESC
        ''') as cursor:
            upload_types = await cursor.fetchall()
            print("\nüìä –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü–µ uploads:")
            for file_type, count in upload_types:
                print(f"  {file_type}: {count} —Ñ–∞–π–ª–æ–≤")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º order_data –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Ç–∏–ø–æ–≤ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        async with db.execute('''
            SELECT order_data
            FROM orders
            WHERE order_data IS NOT NULL AND order_data != ''
        ''') as cursor:
            orders = await cursor.fetchall()
            print(f"\nüìä –ê–Ω–∞–ª–∏–∑ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ —Å order_data...")
            
            photo_types = set()
            for order_data_str, in orders:
                try:
                    order_data = json.loads(order_data_str)
                    
                    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
                    main_hero_photos = order_data.get('main_hero_photos', [])
                    if isinstance(main_hero_photos, list):
                        for photo_obj in main_hero_photos:
                            if isinstance(photo_obj, dict):
                                photo_type = photo_obj.get('type', 'main_hero')
                                photo_types.add(photo_type)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
                    if order_data.get('main_face_1'):
                        photo_types.add('main_face_1')
                    if order_data.get('main_face_2'):
                        photo_types.add('main_face_2')
                    if order_data.get('main_full'):
                        photo_types.add('main_full')
                    if order_data.get('joint_photo'):
                        photo_types.add('joint_photo')
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏—Ö –≥–µ—Ä–æ–µ–≤
                    other_heroes = order_data.get('other_heroes', [])
                    for hero in other_heroes:
                        if hero.get('face_1'):
                            photo_types.add('other_hero_face_1')
                        if hero.get('face_2'):
                            photo_types.add('other_hero_face_2')
                        if hero.get('full'):
                            photo_types.add('other_hero_full')
                            
                except json.JSONDecodeError:
                    continue
            
            print(f"\nüìä –¢–∏–ø—ã —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –≤ –∑–∞–∫–∞–∑–∞—Ö:")
            for photo_type in sorted(photo_types):
                print(f"  {photo_type}")

async def cleanup_order_photos():
    """–£–¥–∞–ª—è–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–∞–∑–æ–≤, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Å—Ç–∏–ª–∏ –∫–Ω–∏–≥, –æ–±–ª–æ–∂–∫–∏ –∏ —Å—Ç–∏–ª–∏ –ø–µ—Å–µ–Ω"""
    async with aiosqlite.connect(DB_PATH) as db:
        print("üßπ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–∫–∞–∑–æ–≤...")
        
        # –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –°–û–•–†–ê–ù–ò–¢–¨ (—Å—Ç–∏–ª–∏ –∫–Ω–∏–≥, –æ–±–ª–æ–∂–∫–∏, —Å—Ç–∏–ª–∏ –ø–µ—Å–µ–Ω)
        keep_types = {
            'book_style', 'book_cover', 'song_style', 'style', 'cover', 
            'template', 'background', 'design', 'artwork'
        }
        
        # –¢–∏–ø—ã —Ñ–∞–π–ª–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –£–î–ê–õ–ò–¢–¨ (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–∞–∑–æ–≤)
        # –û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ, —É–¥–∞–ª—è–µ–º demo_photo, first_page_photo, last_page_photo, custom_photo
        remove_types = {
            'demo_photo', 'first_page_photo', 'last_page_photo', 'custom_photo',
            'main_hero', 'main_face_1', 'main_face_2', 'main_full', 
            'joint_photo', 'other_hero_face_1', 'other_hero_face_2', 
            'other_hero_full', 'page_1', 'page_2', 'page_3', 'page_4',
            'page_5', 'page_6', 'page_7', 'page_8', 'page_9', 'page_10',
            'demo_audio', 'demo_video', 'demo_pdf'  # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ —Ñ–∞–π–ª—ã
        }
        
        deleted_count = 0
        kept_count = 0
        
        # 1. –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É uploads
        print("\nüóëÔ∏è –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã uploads...")
        async with db.execute('''
            SELECT id, filename, file_type, order_id
            FROM uploads
        ''') as cursor:
            uploads = await cursor.fetchall()
            
            for upload_id, filename, file_type, order_id in uploads:
                should_delete = False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
                if file_type in remove_types:
                    should_delete = True
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–∞–∑–æ–≤)
                elif any(remove_pattern in filename.lower() for remove_pattern in [
                    'main_', 'joint_', 'hero_', 'page_', 'order_', 'face_', 'full_',
                    'demo_', '–æ–±–ª–æ–∂–∫–∞', '–Ω–∞—Ä–µ–∑–∫–∞', '–ø—Ä–æ–±–Ω–∞—è', '–¥–µ–º–æ'
                ]):
                    should_delete = True
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (—Å—Ç–∏–ª–∏, –æ–±–ª–æ–∂–∫–∏, —à–∞–±–ª–æ–Ω—ã)
                elif any(keep_type in filename.lower() for keep_type in keep_types):
                    should_delete = False
                
                if should_delete:
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Ñ–∏–∑–∏—á–µ—Å–∫–∏
                    file_path = os.path.join('uploads', filename)
                    if os.path.exists(file_path):
                        try:
                            os.remove(file_path)
                            print(f"  üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {filename}")
                        except Exception as e:
                            print(f"  ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {filename}: {e}")
                    
                    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î
                    await db.execute('DELETE FROM uploads WHERE id = ?', (upload_id,))
                    deleted_count += 1
                else:
                    print(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω —Ñ–∞–π–ª: {filename} (—Ç–∏–ø: {file_type})")
                    kept_count += 1
        
        # 2. –û—á–∏—â–∞–µ–º order_data –æ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
        print("\nüóëÔ∏è –û—á–∏—Å—Ç–∫–∞ order_data –æ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π...")
        async with db.execute('''
            SELECT id, order_data
            FROM orders
            WHERE order_data IS NOT NULL AND order_data != ''
        ''') as cursor:
            orders = await cursor.fetchall()
            
            for order_id, order_data_str in orders:
                try:
                    order_data = json.loads(order_data_str)
                    original_data = order_data.copy()
                    
                    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—è —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏
                    photo_fields = [
                        'main_hero_photos', 'main_face_1', 'main_face_2', 'main_full',
                        'joint_photo', 'other_heroes'
                    ]
                    
                    for field in photo_fields:
                        if field in order_data:
                            del order_data[field]
                    
                    # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î
                    if order_data != original_data:
                        await db.execute('''
                            UPDATE orders 
                            SET order_data = ?
                            WHERE id = ?
                        ''', (json.dumps(order_data), order_id))
                        print(f"  üóëÔ∏è –û—á–∏—â–µ–Ω order_data –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}")
                    
                except json.JSONDecodeError as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ order_data –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_id}: {e}")
        
        # 3. –û—á–∏—â–∞–µ–º –ø–∞–ø–∫–∏ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∑–∞–∫–∞–∑–æ–≤
        print("\nüóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –ø–∞–ø–æ–∫ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∑–∞–∫–∞–∑–æ–≤...")
        
        # –£–¥–∞–ª—è–µ–º –ø–∞–ø–∫–∏ order_*_pages
        pages_dirs = glob.glob("uploads/order_*_pages")
        for pages_dir in pages_dirs:
            try:
                import shutil
                shutil.rmtree(pages_dir)
                print(f"  üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {pages_dir}")
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏ {pages_dir}: {e}")
        
        await db.commit()
        
        print(f"\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"  üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {deleted_count}")
        print(f"  ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {kept_count}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üßπ –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∑–∞–∫–∞–∑–æ–≤")
    print("=" * 50)
    
    # –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
    await analyze_photo_types()
    
    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
    print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —É–¥–∞–ª–∏—Ç –í–°–ï —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∑–∞–∫–∞–∑–æ–≤!")
    print("   –ë—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Å—Ç–∏–ª–∏ –∫–Ω–∏–≥, –æ–±–ª–æ–∂–∫–∏ –∏ —Å—Ç–∏–ª–∏ –ø–µ—Å–µ–Ω.")
    print("   –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É
    await cleanup_order_photos()

if __name__ == "__main__":
    asyncio.run(main())
